
fault_handling_analysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001360  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08001500  08001500  00011500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001660  08001660  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001660  08001660  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001660  08001660  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001660  08001660  00011660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001664  08001664  00011664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080016c4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080016c4  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a12  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000038c  00000000  00000000  00020ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  00020e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e3  00000000  00000000  00020fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cb3  00000000  00000000  0002109b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000151c  00000000  00000000  00023d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000098a3  00000000  00000000  0002526a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000be4  00000000  00000000  0002eb10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0002f6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080014e8 	.word	0x080014e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080014e8 	.word	0x080014e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <UsageFault_Handler_c>:
#define BUSFAULT_OFFSET 17U
#define MEMFAULT_OFFSET 16U
#define SHCRS_Base 0xE000ED24U

void UsageFault_Handler_c(uint32_t *p_baseStackFrame)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	register uint32_t msp_value __asm("r0");
	uint32_t* pMSP = (uint32_t *)msp_value;
 8000288:	4603      	mov	r3, r0
 800028a:	60fb      	str	r3, [r7, #12]
	uint32_t *pUFSR = (uint32_t *)0xE000ED2A;
 800028c:	4b21      	ldr	r3, [pc, #132]	; (8000314 <UsageFault_Handler_c+0x94>)
 800028e:	60bb      	str	r3, [r7, #8]
	printf("UsageFault_Handler\n");
 8000290:	4821      	ldr	r0, [pc, #132]	; (8000318 <UsageFault_Handler_c+0x98>)
 8000292:	f000 fabf 	bl	8000814 <puts>
	printf("UFSR = %lx\n",(*pUFSR) & 0xFFFFU);
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	b29b      	uxth	r3, r3
 800029c:	4619      	mov	r1, r3
 800029e:	481f      	ldr	r0, [pc, #124]	; (800031c <UsageFault_Handler_c+0x9c>)
 80002a0:	f000 fa52 	bl	8000748 <iprintf>
	printf("The value of R0 = %lx\n",p_baseStackFrame[0]);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4619      	mov	r1, r3
 80002aa:	481d      	ldr	r0, [pc, #116]	; (8000320 <UsageFault_Handler_c+0xa0>)
 80002ac:	f000 fa4c 	bl	8000748 <iprintf>
	printf("The value of R1 = %lx\n",p_baseStackFrame[1]);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	3304      	adds	r3, #4
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4619      	mov	r1, r3
 80002b8:	481a      	ldr	r0, [pc, #104]	; (8000324 <UsageFault_Handler_c+0xa4>)
 80002ba:	f000 fa45 	bl	8000748 <iprintf>
	printf("The value of R2 = %lx\n",p_baseStackFrame[2]);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	3308      	adds	r3, #8
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4619      	mov	r1, r3
 80002c6:	4818      	ldr	r0, [pc, #96]	; (8000328 <UsageFault_Handler_c+0xa8>)
 80002c8:	f000 fa3e 	bl	8000748 <iprintf>
	printf("The value of R3 = %lx\n",p_baseStackFrame[3]);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	330c      	adds	r3, #12
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4619      	mov	r1, r3
 80002d4:	4815      	ldr	r0, [pc, #84]	; (800032c <UsageFault_Handler_c+0xac>)
 80002d6:	f000 fa37 	bl	8000748 <iprintf>
	printf("The value of R12 = %lx\n",p_baseStackFrame[4]);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	3310      	adds	r3, #16
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4619      	mov	r1, r3
 80002e2:	4813      	ldr	r0, [pc, #76]	; (8000330 <UsageFault_Handler_c+0xb0>)
 80002e4:	f000 fa30 	bl	8000748 <iprintf>
	printf("The value of LR = %lx\n",p_baseStackFrame[5]);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	3314      	adds	r3, #20
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4619      	mov	r1, r3
 80002f0:	4810      	ldr	r0, [pc, #64]	; (8000334 <UsageFault_Handler_c+0xb4>)
 80002f2:	f000 fa29 	bl	8000748 <iprintf>
	printf("The value of PC = %lx\n",p_baseStackFrame[6]);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	3318      	adds	r3, #24
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4619      	mov	r1, r3
 80002fe:	480e      	ldr	r0, [pc, #56]	; (8000338 <UsageFault_Handler_c+0xb8>)
 8000300:	f000 fa22 	bl	8000748 <iprintf>
	printf("The value of XPSR = %lx\n",p_baseStackFrame[7]);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	331c      	adds	r3, #28
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4619      	mov	r1, r3
 800030c:	480b      	ldr	r0, [pc, #44]	; (800033c <UsageFault_Handler_c+0xbc>)
 800030e:	f000 fa1b 	bl	8000748 <iprintf>
	while(1);
 8000312:	e7fe      	b.n	8000312 <UsageFault_Handler_c+0x92>
 8000314:	e000ed2a 	.word	0xe000ed2a
 8000318:	08001500 	.word	0x08001500
 800031c:	08001514 	.word	0x08001514
 8000320:	08001520 	.word	0x08001520
 8000324:	08001538 	.word	0x08001538
 8000328:	08001550 	.word	0x08001550
 800032c:	08001568 	.word	0x08001568
 8000330:	08001580 	.word	0x08001580
 8000334:	08001598 	.word	0x08001598
 8000338:	080015b0 	.word	0x080015b0
 800033c:	080015c8 	.word	0x080015c8

08000340 <main>:
}

int main(void)
{
 8000340:	b480      	push	{r7}
 8000342:	b085      	sub	sp, #20
 8000344:	af00      	add	r7, sp, #0
	/* Firstly, enable system exceptions */
	uint32_t *pSHCRS = (uint32_t *)SHCRS_Base;
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <main+0x44>)
 8000348:	60fb      	str	r3, [r7, #12]
	/* Enable usage fault exception */
	/* *pSHCRS |= (1 << USGFAULT_OFFSET); */
	/* Enable bus fault exception */
	*pSHCRS |= (1 << BUSFAULT_OFFSET);
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	601a      	str	r2, [r3, #0]
	/* Enable mem fault exception */
	*pSHCRS |= (1 << MEMFAULT_OFFSET);
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
#endif

#if 1
	/* Divided by zero */
	/* Enable divided by zero trap in CCR */
	uint32_t *pCCR = (uint32_t *)0xE000ED14U;
 8000362:	4b09      	ldr	r3, [pc, #36]	; (8000388 <main+0x48>)
 8000364:	60bb      	str	r3, [r7, #8]
	/* Enable -> fault */
	*pCCR |= (1 << 4);
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f043 0210 	orr.w	r2, r3, #16
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	601a      	str	r2, [r3, #0]
	/* Disable -> no error */
	/* *pCCR &= ~(1 << 4); */
	uint8_t a = 5;
 8000372:	2305      	movs	r3, #5
 8000374:	71fb      	strb	r3, [r7, #7]
	a = a / 0;
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2200      	movs	r2, #0
 800037a:	fbb3 f3f2 	udiv	r3, r3, r2
 800037e:	71fb      	strb	r3, [r7, #7]
#if 0
	/* Executing SVC instruction inside the interrupt handler whose priority is same or lesser than SVC handler */
#endif

    /* Loop forever */
	for(;;);
 8000380:	e7fe      	b.n	8000380 <main+0x40>
 8000382:	bf00      	nop
 8000384:	e000ed24 	.word	0xe000ed24
 8000388:	e000ed14 	.word	0xe000ed14

0800038c <UsageFault_Handler>:
}

__attribute__ ((naked)) void UsageFault_Handler(void)
{
	/* Extract the value of MSP when switching from thread mode to handler mode */
	__asm ("MRS r0,MSP");
 800038c:	f3ef 8008 	mrs	r0, MSP
	/* The content of the r0 becomes the argument 1 for the calee(UsageFault_Handler_c) */
	/* That's why the value of r0 will be captured in pBaseStackFrame */
	__asm ("B UsageFault_Handler_c");
 8000390:	f7ff bf76 	b.w	8000280 <UsageFault_Handler_c>
}
 8000394:	bf00      	nop
	...

08000398 <HardFault_Handler>:


void HardFault_Handler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	printf("Hardfault_Handler\n");
 800039c:	4801      	ldr	r0, [pc, #4]	; (80003a4 <HardFault_Handler+0xc>)
 800039e:	f000 fa39 	bl	8000814 <puts>
	while(1);
 80003a2:	e7fe      	b.n	80003a2 <HardFault_Handler+0xa>
 80003a4:	080015e4 	.word	0x080015e4

080003a8 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	printf("MemManage_Handler\n");
 80003ac:	4801      	ldr	r0, [pc, #4]	; (80003b4 <MemManage_Handler+0xc>)
 80003ae:	f000 fa31 	bl	8000814 <puts>
	while(1);
 80003b2:	e7fe      	b.n	80003b2 <MemManage_Handler+0xa>
 80003b4:	080015f8 	.word	0x080015f8

080003b8 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	printf("BusFault_Handler\n");
 80003bc:	4801      	ldr	r0, [pc, #4]	; (80003c4 <BusFault_Handler+0xc>)
 80003be:	f000 fa29 	bl	8000814 <puts>
	while(1);
 80003c2:	e7fe      	b.n	80003c2 <BusFault_Handler+0xa>
 80003c4:	0800160c 	.word	0x0800160c

080003c8 <SVC_Handler>:
}

void SVC_Handler(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	printf("SVC_Handler\n");
 80003cc:	4801      	ldr	r0, [pc, #4]	; (80003d4 <SVC_Handler+0xc>)
 80003ce:	f000 fa21 	bl	8000814 <puts>
	while(1);
 80003d2:	e7fe      	b.n	80003d2 <SVC_Handler+0xa>
 80003d4:	08001620 	.word	0x08001620

080003d8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <ITM_SendChar+0x48>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a0e      	ldr	r2, [pc, #56]	; (8000420 <ITM_SendChar+0x48>)
 80003e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003ec:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <ITM_SendChar+0x4c>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <ITM_SendChar+0x4c>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80003fa:	bf00      	nop
 80003fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	2b00      	cmp	r3, #0
 8000408:	d0f8      	beq.n	80003fc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800040a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	6013      	str	r3, [r2, #0]
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	e000edfc 	.word	0xe000edfc
 8000424:	e0000e00 	.word	0xe0000e00

08000428 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]
 8000438:	e00a      	b.n	8000450 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800043a:	f3af 8000 	nop.w
 800043e:	4601      	mov	r1, r0
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	1c5a      	adds	r2, r3, #1
 8000444:	60ba      	str	r2, [r7, #8]
 8000446:	b2ca      	uxtb	r2, r1
 8000448:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	3301      	adds	r3, #1
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	697a      	ldr	r2, [r7, #20]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	429a      	cmp	r2, r3
 8000456:	dbf0      	blt.n	800043a <_read+0x12>
  }

  return len;
 8000458:	687b      	ldr	r3, [r7, #4]
}
 800045a:	4618      	mov	r0, r3
 800045c:	3718      	adds	r7, #24
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b086      	sub	sp, #24
 8000466:	af00      	add	r7, sp, #0
 8000468:	60f8      	str	r0, [r7, #12]
 800046a:	60b9      	str	r1, [r7, #8]
 800046c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]
 8000472:	e009      	b.n	8000488 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	60ba      	str	r2, [r7, #8]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ffab 	bl	80003d8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	3301      	adds	r3, #1
 8000486:	617b      	str	r3, [r7, #20]
 8000488:	697a      	ldr	r2, [r7, #20]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	429a      	cmp	r2, r3
 800048e:	dbf1      	blt.n	8000474 <_write+0x12>
  }
  return len;
 8000490:	687b      	ldr	r3, [r7, #4]
}
 8000492:	4618      	mov	r0, r3
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <_close>:

int _close(int file)
{
 800049a:	b480      	push	{r7}
 800049c:	b083      	sub	sp, #12
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr

080004b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b083      	sub	sp, #12
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
 80004ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004c2:	605a      	str	r2, [r3, #4]
  return 0;
 80004c4:	2300      	movs	r3, #0
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <_isatty>:

int _isatty(int file)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b083      	sub	sp, #12
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004da:	2301      	movs	r3, #1
}
 80004dc:	4618      	mov	r0, r3
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004f4:	2300      	movs	r3, #0
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
	...

08000504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800050c:	4a14      	ldr	r2, [pc, #80]	; (8000560 <_sbrk+0x5c>)
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <_sbrk+0x60>)
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <_sbrk+0x64>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d102      	bne.n	8000526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <_sbrk+0x64>)
 8000522:	4a12      	ldr	r2, [pc, #72]	; (800056c <_sbrk+0x68>)
 8000524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <_sbrk+0x64>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	693a      	ldr	r2, [r7, #16]
 8000530:	429a      	cmp	r2, r3
 8000532:	d207      	bcs.n	8000544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000534:	f000 fa9c 	bl	8000a70 <__errno>
 8000538:	4603      	mov	r3, r0
 800053a:	220c      	movs	r2, #12
 800053c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	e009      	b.n	8000558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <_sbrk+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <_sbrk+0x64>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	4a05      	ldr	r2, [pc, #20]	; (8000568 <_sbrk+0x64>)
 8000554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000556:	68fb      	ldr	r3, [r7, #12]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3718      	adds	r7, #24
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20020000 	.word	0x20020000
 8000564:	00000400 	.word	0x00000400
 8000568:	20000078 	.word	0x20000078
 800056c:	200001c8 	.word	0x200001c8

08000570 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000570:	480d      	ldr	r0, [pc, #52]	; (80005a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000572:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000574:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <LoopForever+0x6>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	; (80005b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <LoopForever+0xe>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	; (80005bc <LoopForever+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800059e:	f000 fa6d 	bl	8000a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a2:	f7ff fecd 	bl	8000340 <main>

080005a6 <LoopForever>:

LoopForever:
  b LoopForever
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
  ldr   r0, =_estack
 80005a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005b4:	08001668 	.word	0x08001668
  ldr r2, =_sbss
 80005b8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005bc:	200001c8 	.word	0x200001c8

080005c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC_IRQHandler>
	...

080005c4 <std>:
 80005c4:	2300      	movs	r3, #0
 80005c6:	b510      	push	{r4, lr}
 80005c8:	4604      	mov	r4, r0
 80005ca:	e9c0 3300 	strd	r3, r3, [r0]
 80005ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005d2:	6083      	str	r3, [r0, #8]
 80005d4:	8181      	strh	r1, [r0, #12]
 80005d6:	6643      	str	r3, [r0, #100]	; 0x64
 80005d8:	81c2      	strh	r2, [r0, #14]
 80005da:	6183      	str	r3, [r0, #24]
 80005dc:	4619      	mov	r1, r3
 80005de:	2208      	movs	r2, #8
 80005e0:	305c      	adds	r0, #92	; 0x5c
 80005e2:	f000 f9f7 	bl	80009d4 <memset>
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <std+0x58>)
 80005e8:	6263      	str	r3, [r4, #36]	; 0x24
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <std+0x5c>)
 80005ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <std+0x60>)
 80005f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <std+0x64>)
 80005f4:	6323      	str	r3, [r4, #48]	; 0x30
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <std+0x68>)
 80005f8:	6224      	str	r4, [r4, #32]
 80005fa:	429c      	cmp	r4, r3
 80005fc:	d006      	beq.n	800060c <std+0x48>
 80005fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000602:	4294      	cmp	r4, r2
 8000604:	d002      	beq.n	800060c <std+0x48>
 8000606:	33d0      	adds	r3, #208	; 0xd0
 8000608:	429c      	cmp	r4, r3
 800060a:	d105      	bne.n	8000618 <std+0x54>
 800060c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000614:	f000 ba56 	b.w	8000ac4 <__retarget_lock_init_recursive>
 8000618:	bd10      	pop	{r4, pc}
 800061a:	bf00      	nop
 800061c:	08000825 	.word	0x08000825
 8000620:	08000847 	.word	0x08000847
 8000624:	0800087f 	.word	0x0800087f
 8000628:	080008a3 	.word	0x080008a3
 800062c:	2000007c 	.word	0x2000007c

08000630 <stdio_exit_handler>:
 8000630:	4a02      	ldr	r2, [pc, #8]	; (800063c <stdio_exit_handler+0xc>)
 8000632:	4903      	ldr	r1, [pc, #12]	; (8000640 <stdio_exit_handler+0x10>)
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <stdio_exit_handler+0x14>)
 8000636:	f000 b869 	b.w	800070c <_fwalk_sglue>
 800063a:	bf00      	nop
 800063c:	20000000 	.word	0x20000000
 8000640:	08001371 	.word	0x08001371
 8000644:	2000000c 	.word	0x2000000c

08000648 <cleanup_stdio>:
 8000648:	6841      	ldr	r1, [r0, #4]
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <cleanup_stdio+0x34>)
 800064c:	4299      	cmp	r1, r3
 800064e:	b510      	push	{r4, lr}
 8000650:	4604      	mov	r4, r0
 8000652:	d001      	beq.n	8000658 <cleanup_stdio+0x10>
 8000654:	f000 fe8c 	bl	8001370 <_fflush_r>
 8000658:	68a1      	ldr	r1, [r4, #8]
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <cleanup_stdio+0x38>)
 800065c:	4299      	cmp	r1, r3
 800065e:	d002      	beq.n	8000666 <cleanup_stdio+0x1e>
 8000660:	4620      	mov	r0, r4
 8000662:	f000 fe85 	bl	8001370 <_fflush_r>
 8000666:	68e1      	ldr	r1, [r4, #12]
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <cleanup_stdio+0x3c>)
 800066a:	4299      	cmp	r1, r3
 800066c:	d004      	beq.n	8000678 <cleanup_stdio+0x30>
 800066e:	4620      	mov	r0, r4
 8000670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000674:	f000 be7c 	b.w	8001370 <_fflush_r>
 8000678:	bd10      	pop	{r4, pc}
 800067a:	bf00      	nop
 800067c:	2000007c 	.word	0x2000007c
 8000680:	200000e4 	.word	0x200000e4
 8000684:	2000014c 	.word	0x2000014c

08000688 <global_stdio_init.part.0>:
 8000688:	b510      	push	{r4, lr}
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <global_stdio_init.part.0+0x30>)
 800068c:	4c0b      	ldr	r4, [pc, #44]	; (80006bc <global_stdio_init.part.0+0x34>)
 800068e:	4a0c      	ldr	r2, [pc, #48]	; (80006c0 <global_stdio_init.part.0+0x38>)
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	4620      	mov	r0, r4
 8000694:	2200      	movs	r2, #0
 8000696:	2104      	movs	r1, #4
 8000698:	f7ff ff94 	bl	80005c4 <std>
 800069c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80006a0:	2201      	movs	r2, #1
 80006a2:	2109      	movs	r1, #9
 80006a4:	f7ff ff8e 	bl	80005c4 <std>
 80006a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006ac:	2202      	movs	r2, #2
 80006ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006b2:	2112      	movs	r1, #18
 80006b4:	f7ff bf86 	b.w	80005c4 <std>
 80006b8:	200001b4 	.word	0x200001b4
 80006bc:	2000007c 	.word	0x2000007c
 80006c0:	08000631 	.word	0x08000631

080006c4 <__sfp_lock_acquire>:
 80006c4:	4801      	ldr	r0, [pc, #4]	; (80006cc <__sfp_lock_acquire+0x8>)
 80006c6:	f000 b9fe 	b.w	8000ac6 <__retarget_lock_acquire_recursive>
 80006ca:	bf00      	nop
 80006cc:	200001bd 	.word	0x200001bd

080006d0 <__sfp_lock_release>:
 80006d0:	4801      	ldr	r0, [pc, #4]	; (80006d8 <__sfp_lock_release+0x8>)
 80006d2:	f000 b9f9 	b.w	8000ac8 <__retarget_lock_release_recursive>
 80006d6:	bf00      	nop
 80006d8:	200001bd 	.word	0x200001bd

080006dc <__sinit>:
 80006dc:	b510      	push	{r4, lr}
 80006de:	4604      	mov	r4, r0
 80006e0:	f7ff fff0 	bl	80006c4 <__sfp_lock_acquire>
 80006e4:	6a23      	ldr	r3, [r4, #32]
 80006e6:	b11b      	cbz	r3, 80006f0 <__sinit+0x14>
 80006e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ec:	f7ff bff0 	b.w	80006d0 <__sfp_lock_release>
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <__sinit+0x28>)
 80006f2:	6223      	str	r3, [r4, #32]
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__sinit+0x2c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f5      	bne.n	80006e8 <__sinit+0xc>
 80006fc:	f7ff ffc4 	bl	8000688 <global_stdio_init.part.0>
 8000700:	e7f2      	b.n	80006e8 <__sinit+0xc>
 8000702:	bf00      	nop
 8000704:	08000649 	.word	0x08000649
 8000708:	200001b4 	.word	0x200001b4

0800070c <_fwalk_sglue>:
 800070c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000710:	4607      	mov	r7, r0
 8000712:	4688      	mov	r8, r1
 8000714:	4614      	mov	r4, r2
 8000716:	2600      	movs	r6, #0
 8000718:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800071c:	f1b9 0901 	subs.w	r9, r9, #1
 8000720:	d505      	bpl.n	800072e <_fwalk_sglue+0x22>
 8000722:	6824      	ldr	r4, [r4, #0]
 8000724:	2c00      	cmp	r4, #0
 8000726:	d1f7      	bne.n	8000718 <_fwalk_sglue+0xc>
 8000728:	4630      	mov	r0, r6
 800072a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800072e:	89ab      	ldrh	r3, [r5, #12]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d907      	bls.n	8000744 <_fwalk_sglue+0x38>
 8000734:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000738:	3301      	adds	r3, #1
 800073a:	d003      	beq.n	8000744 <_fwalk_sglue+0x38>
 800073c:	4629      	mov	r1, r5
 800073e:	4638      	mov	r0, r7
 8000740:	47c0      	blx	r8
 8000742:	4306      	orrs	r6, r0
 8000744:	3568      	adds	r5, #104	; 0x68
 8000746:	e7e9      	b.n	800071c <_fwalk_sglue+0x10>

08000748 <iprintf>:
 8000748:	b40f      	push	{r0, r1, r2, r3}
 800074a:	b507      	push	{r0, r1, r2, lr}
 800074c:	4906      	ldr	r1, [pc, #24]	; (8000768 <iprintf+0x20>)
 800074e:	ab04      	add	r3, sp, #16
 8000750:	6808      	ldr	r0, [r1, #0]
 8000752:	f853 2b04 	ldr.w	r2, [r3], #4
 8000756:	6881      	ldr	r1, [r0, #8]
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	f000 fad9 	bl	8000d10 <_vfiprintf_r>
 800075e:	b003      	add	sp, #12
 8000760:	f85d eb04 	ldr.w	lr, [sp], #4
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr
 8000768:	20000058 	.word	0x20000058

0800076c <_puts_r>:
 800076c:	6a03      	ldr	r3, [r0, #32]
 800076e:	b570      	push	{r4, r5, r6, lr}
 8000770:	6884      	ldr	r4, [r0, #8]
 8000772:	4605      	mov	r5, r0
 8000774:	460e      	mov	r6, r1
 8000776:	b90b      	cbnz	r3, 800077c <_puts_r+0x10>
 8000778:	f7ff ffb0 	bl	80006dc <__sinit>
 800077c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800077e:	07db      	lsls	r3, r3, #31
 8000780:	d405      	bmi.n	800078e <_puts_r+0x22>
 8000782:	89a3      	ldrh	r3, [r4, #12]
 8000784:	0598      	lsls	r0, r3, #22
 8000786:	d402      	bmi.n	800078e <_puts_r+0x22>
 8000788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800078a:	f000 f99c 	bl	8000ac6 <__retarget_lock_acquire_recursive>
 800078e:	89a3      	ldrh	r3, [r4, #12]
 8000790:	0719      	lsls	r1, r3, #28
 8000792:	d513      	bpl.n	80007bc <_puts_r+0x50>
 8000794:	6923      	ldr	r3, [r4, #16]
 8000796:	b18b      	cbz	r3, 80007bc <_puts_r+0x50>
 8000798:	3e01      	subs	r6, #1
 800079a:	68a3      	ldr	r3, [r4, #8]
 800079c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007a0:	3b01      	subs	r3, #1
 80007a2:	60a3      	str	r3, [r4, #8]
 80007a4:	b9e9      	cbnz	r1, 80007e2 <_puts_r+0x76>
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	da2e      	bge.n	8000808 <_puts_r+0x9c>
 80007aa:	4622      	mov	r2, r4
 80007ac:	210a      	movs	r1, #10
 80007ae:	4628      	mov	r0, r5
 80007b0:	f000 f87b 	bl	80008aa <__swbuf_r>
 80007b4:	3001      	adds	r0, #1
 80007b6:	d007      	beq.n	80007c8 <_puts_r+0x5c>
 80007b8:	250a      	movs	r5, #10
 80007ba:	e007      	b.n	80007cc <_puts_r+0x60>
 80007bc:	4621      	mov	r1, r4
 80007be:	4628      	mov	r0, r5
 80007c0:	f000 f8b0 	bl	8000924 <__swsetup_r>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d0e7      	beq.n	8000798 <_puts_r+0x2c>
 80007c8:	f04f 35ff 	mov.w	r5, #4294967295
 80007cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007ce:	07da      	lsls	r2, r3, #31
 80007d0:	d405      	bmi.n	80007de <_puts_r+0x72>
 80007d2:	89a3      	ldrh	r3, [r4, #12]
 80007d4:	059b      	lsls	r3, r3, #22
 80007d6:	d402      	bmi.n	80007de <_puts_r+0x72>
 80007d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007da:	f000 f975 	bl	8000ac8 <__retarget_lock_release_recursive>
 80007de:	4628      	mov	r0, r5
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	da04      	bge.n	80007f0 <_puts_r+0x84>
 80007e6:	69a2      	ldr	r2, [r4, #24]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	dc06      	bgt.n	80007fa <_puts_r+0x8e>
 80007ec:	290a      	cmp	r1, #10
 80007ee:	d004      	beq.n	80007fa <_puts_r+0x8e>
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	6022      	str	r2, [r4, #0]
 80007f6:	7019      	strb	r1, [r3, #0]
 80007f8:	e7cf      	b.n	800079a <_puts_r+0x2e>
 80007fa:	4622      	mov	r2, r4
 80007fc:	4628      	mov	r0, r5
 80007fe:	f000 f854 	bl	80008aa <__swbuf_r>
 8000802:	3001      	adds	r0, #1
 8000804:	d1c9      	bne.n	800079a <_puts_r+0x2e>
 8000806:	e7df      	b.n	80007c8 <_puts_r+0x5c>
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	250a      	movs	r5, #10
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	6022      	str	r2, [r4, #0]
 8000810:	701d      	strb	r5, [r3, #0]
 8000812:	e7db      	b.n	80007cc <_puts_r+0x60>

08000814 <puts>:
 8000814:	4b02      	ldr	r3, [pc, #8]	; (8000820 <puts+0xc>)
 8000816:	4601      	mov	r1, r0
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	f7ff bfa7 	b.w	800076c <_puts_r>
 800081e:	bf00      	nop
 8000820:	20000058 	.word	0x20000058

08000824 <__sread>:
 8000824:	b510      	push	{r4, lr}
 8000826:	460c      	mov	r4, r1
 8000828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800082c:	f000 f8fc 	bl	8000a28 <_read_r>
 8000830:	2800      	cmp	r0, #0
 8000832:	bfab      	itete	ge
 8000834:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000836:	89a3      	ldrhlt	r3, [r4, #12]
 8000838:	181b      	addge	r3, r3, r0
 800083a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800083e:	bfac      	ite	ge
 8000840:	6563      	strge	r3, [r4, #84]	; 0x54
 8000842:	81a3      	strhlt	r3, [r4, #12]
 8000844:	bd10      	pop	{r4, pc}

08000846 <__swrite>:
 8000846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800084a:	461f      	mov	r7, r3
 800084c:	898b      	ldrh	r3, [r1, #12]
 800084e:	05db      	lsls	r3, r3, #23
 8000850:	4605      	mov	r5, r0
 8000852:	460c      	mov	r4, r1
 8000854:	4616      	mov	r6, r2
 8000856:	d505      	bpl.n	8000864 <__swrite+0x1e>
 8000858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800085c:	2302      	movs	r3, #2
 800085e:	2200      	movs	r2, #0
 8000860:	f000 f8d0 	bl	8000a04 <_lseek_r>
 8000864:	89a3      	ldrh	r3, [r4, #12]
 8000866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800086a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800086e:	81a3      	strh	r3, [r4, #12]
 8000870:	4632      	mov	r2, r6
 8000872:	463b      	mov	r3, r7
 8000874:	4628      	mov	r0, r5
 8000876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800087a:	f000 b8e7 	b.w	8000a4c <_write_r>

0800087e <__sseek>:
 800087e:	b510      	push	{r4, lr}
 8000880:	460c      	mov	r4, r1
 8000882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000886:	f000 f8bd 	bl	8000a04 <_lseek_r>
 800088a:	1c43      	adds	r3, r0, #1
 800088c:	89a3      	ldrh	r3, [r4, #12]
 800088e:	bf15      	itete	ne
 8000890:	6560      	strne	r0, [r4, #84]	; 0x54
 8000892:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000896:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800089a:	81a3      	strheq	r3, [r4, #12]
 800089c:	bf18      	it	ne
 800089e:	81a3      	strhne	r3, [r4, #12]
 80008a0:	bd10      	pop	{r4, pc}

080008a2 <__sclose>:
 80008a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a6:	f000 b89d 	b.w	80009e4 <_close_r>

080008aa <__swbuf_r>:
 80008aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ac:	460e      	mov	r6, r1
 80008ae:	4614      	mov	r4, r2
 80008b0:	4605      	mov	r5, r0
 80008b2:	b118      	cbz	r0, 80008bc <__swbuf_r+0x12>
 80008b4:	6a03      	ldr	r3, [r0, #32]
 80008b6:	b90b      	cbnz	r3, 80008bc <__swbuf_r+0x12>
 80008b8:	f7ff ff10 	bl	80006dc <__sinit>
 80008bc:	69a3      	ldr	r3, [r4, #24]
 80008be:	60a3      	str	r3, [r4, #8]
 80008c0:	89a3      	ldrh	r3, [r4, #12]
 80008c2:	071a      	lsls	r2, r3, #28
 80008c4:	d525      	bpl.n	8000912 <__swbuf_r+0x68>
 80008c6:	6923      	ldr	r3, [r4, #16]
 80008c8:	b31b      	cbz	r3, 8000912 <__swbuf_r+0x68>
 80008ca:	6823      	ldr	r3, [r4, #0]
 80008cc:	6922      	ldr	r2, [r4, #16]
 80008ce:	1a98      	subs	r0, r3, r2
 80008d0:	6963      	ldr	r3, [r4, #20]
 80008d2:	b2f6      	uxtb	r6, r6
 80008d4:	4283      	cmp	r3, r0
 80008d6:	4637      	mov	r7, r6
 80008d8:	dc04      	bgt.n	80008e4 <__swbuf_r+0x3a>
 80008da:	4621      	mov	r1, r4
 80008dc:	4628      	mov	r0, r5
 80008de:	f000 fd47 	bl	8001370 <_fflush_r>
 80008e2:	b9e0      	cbnz	r0, 800091e <__swbuf_r+0x74>
 80008e4:	68a3      	ldr	r3, [r4, #8]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	60a3      	str	r3, [r4, #8]
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	6022      	str	r2, [r4, #0]
 80008f0:	701e      	strb	r6, [r3, #0]
 80008f2:	6962      	ldr	r2, [r4, #20]
 80008f4:	1c43      	adds	r3, r0, #1
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d004      	beq.n	8000904 <__swbuf_r+0x5a>
 80008fa:	89a3      	ldrh	r3, [r4, #12]
 80008fc:	07db      	lsls	r3, r3, #31
 80008fe:	d506      	bpl.n	800090e <__swbuf_r+0x64>
 8000900:	2e0a      	cmp	r6, #10
 8000902:	d104      	bne.n	800090e <__swbuf_r+0x64>
 8000904:	4621      	mov	r1, r4
 8000906:	4628      	mov	r0, r5
 8000908:	f000 fd32 	bl	8001370 <_fflush_r>
 800090c:	b938      	cbnz	r0, 800091e <__swbuf_r+0x74>
 800090e:	4638      	mov	r0, r7
 8000910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000912:	4621      	mov	r1, r4
 8000914:	4628      	mov	r0, r5
 8000916:	f000 f805 	bl	8000924 <__swsetup_r>
 800091a:	2800      	cmp	r0, #0
 800091c:	d0d5      	beq.n	80008ca <__swbuf_r+0x20>
 800091e:	f04f 37ff 	mov.w	r7, #4294967295
 8000922:	e7f4      	b.n	800090e <__swbuf_r+0x64>

08000924 <__swsetup_r>:
 8000924:	b538      	push	{r3, r4, r5, lr}
 8000926:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <__swsetup_r+0xac>)
 8000928:	4605      	mov	r5, r0
 800092a:	6818      	ldr	r0, [r3, #0]
 800092c:	460c      	mov	r4, r1
 800092e:	b118      	cbz	r0, 8000938 <__swsetup_r+0x14>
 8000930:	6a03      	ldr	r3, [r0, #32]
 8000932:	b90b      	cbnz	r3, 8000938 <__swsetup_r+0x14>
 8000934:	f7ff fed2 	bl	80006dc <__sinit>
 8000938:	89a3      	ldrh	r3, [r4, #12]
 800093a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800093e:	0718      	lsls	r0, r3, #28
 8000940:	d422      	bmi.n	8000988 <__swsetup_r+0x64>
 8000942:	06d9      	lsls	r1, r3, #27
 8000944:	d407      	bmi.n	8000956 <__swsetup_r+0x32>
 8000946:	2309      	movs	r3, #9
 8000948:	602b      	str	r3, [r5, #0]
 800094a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800094e:	81a3      	strh	r3, [r4, #12]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	e034      	b.n	80009c0 <__swsetup_r+0x9c>
 8000956:	0758      	lsls	r0, r3, #29
 8000958:	d512      	bpl.n	8000980 <__swsetup_r+0x5c>
 800095a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800095c:	b141      	cbz	r1, 8000970 <__swsetup_r+0x4c>
 800095e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000962:	4299      	cmp	r1, r3
 8000964:	d002      	beq.n	800096c <__swsetup_r+0x48>
 8000966:	4628      	mov	r0, r5
 8000968:	f000 f8b0 	bl	8000acc <_free_r>
 800096c:	2300      	movs	r3, #0
 800096e:	6363      	str	r3, [r4, #52]	; 0x34
 8000970:	89a3      	ldrh	r3, [r4, #12]
 8000972:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000976:	81a3      	strh	r3, [r4, #12]
 8000978:	2300      	movs	r3, #0
 800097a:	6063      	str	r3, [r4, #4]
 800097c:	6923      	ldr	r3, [r4, #16]
 800097e:	6023      	str	r3, [r4, #0]
 8000980:	89a3      	ldrh	r3, [r4, #12]
 8000982:	f043 0308 	orr.w	r3, r3, #8
 8000986:	81a3      	strh	r3, [r4, #12]
 8000988:	6923      	ldr	r3, [r4, #16]
 800098a:	b94b      	cbnz	r3, 80009a0 <__swsetup_r+0x7c>
 800098c:	89a3      	ldrh	r3, [r4, #12]
 800098e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000996:	d003      	beq.n	80009a0 <__swsetup_r+0x7c>
 8000998:	4621      	mov	r1, r4
 800099a:	4628      	mov	r0, r5
 800099c:	f000 fd36 	bl	800140c <__smakebuf_r>
 80009a0:	89a0      	ldrh	r0, [r4, #12]
 80009a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009a6:	f010 0301 	ands.w	r3, r0, #1
 80009aa:	d00a      	beq.n	80009c2 <__swsetup_r+0x9e>
 80009ac:	2300      	movs	r3, #0
 80009ae:	60a3      	str	r3, [r4, #8]
 80009b0:	6963      	ldr	r3, [r4, #20]
 80009b2:	425b      	negs	r3, r3
 80009b4:	61a3      	str	r3, [r4, #24]
 80009b6:	6923      	ldr	r3, [r4, #16]
 80009b8:	b943      	cbnz	r3, 80009cc <__swsetup_r+0xa8>
 80009ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80009be:	d1c4      	bne.n	800094a <__swsetup_r+0x26>
 80009c0:	bd38      	pop	{r3, r4, r5, pc}
 80009c2:	0781      	lsls	r1, r0, #30
 80009c4:	bf58      	it	pl
 80009c6:	6963      	ldrpl	r3, [r4, #20]
 80009c8:	60a3      	str	r3, [r4, #8]
 80009ca:	e7f4      	b.n	80009b6 <__swsetup_r+0x92>
 80009cc:	2000      	movs	r0, #0
 80009ce:	e7f7      	b.n	80009c0 <__swsetup_r+0x9c>
 80009d0:	20000058 	.word	0x20000058

080009d4 <memset>:
 80009d4:	4402      	add	r2, r0
 80009d6:	4603      	mov	r3, r0
 80009d8:	4293      	cmp	r3, r2
 80009da:	d100      	bne.n	80009de <memset+0xa>
 80009dc:	4770      	bx	lr
 80009de:	f803 1b01 	strb.w	r1, [r3], #1
 80009e2:	e7f9      	b.n	80009d8 <memset+0x4>

080009e4 <_close_r>:
 80009e4:	b538      	push	{r3, r4, r5, lr}
 80009e6:	4d06      	ldr	r5, [pc, #24]	; (8000a00 <_close_r+0x1c>)
 80009e8:	2300      	movs	r3, #0
 80009ea:	4604      	mov	r4, r0
 80009ec:	4608      	mov	r0, r1
 80009ee:	602b      	str	r3, [r5, #0]
 80009f0:	f7ff fd53 	bl	800049a <_close>
 80009f4:	1c43      	adds	r3, r0, #1
 80009f6:	d102      	bne.n	80009fe <_close_r+0x1a>
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	b103      	cbz	r3, 80009fe <_close_r+0x1a>
 80009fc:	6023      	str	r3, [r4, #0]
 80009fe:	bd38      	pop	{r3, r4, r5, pc}
 8000a00:	200001b8 	.word	0x200001b8

08000a04 <_lseek_r>:
 8000a04:	b538      	push	{r3, r4, r5, lr}
 8000a06:	4d07      	ldr	r5, [pc, #28]	; (8000a24 <_lseek_r+0x20>)
 8000a08:	4604      	mov	r4, r0
 8000a0a:	4608      	mov	r0, r1
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	2200      	movs	r2, #0
 8000a10:	602a      	str	r2, [r5, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	f7ff fd68 	bl	80004e8 <_lseek>
 8000a18:	1c43      	adds	r3, r0, #1
 8000a1a:	d102      	bne.n	8000a22 <_lseek_r+0x1e>
 8000a1c:	682b      	ldr	r3, [r5, #0]
 8000a1e:	b103      	cbz	r3, 8000a22 <_lseek_r+0x1e>
 8000a20:	6023      	str	r3, [r4, #0]
 8000a22:	bd38      	pop	{r3, r4, r5, pc}
 8000a24:	200001b8 	.word	0x200001b8

08000a28 <_read_r>:
 8000a28:	b538      	push	{r3, r4, r5, lr}
 8000a2a:	4d07      	ldr	r5, [pc, #28]	; (8000a48 <_read_r+0x20>)
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	4608      	mov	r0, r1
 8000a30:	4611      	mov	r1, r2
 8000a32:	2200      	movs	r2, #0
 8000a34:	602a      	str	r2, [r5, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	f7ff fcf6 	bl	8000428 <_read>
 8000a3c:	1c43      	adds	r3, r0, #1
 8000a3e:	d102      	bne.n	8000a46 <_read_r+0x1e>
 8000a40:	682b      	ldr	r3, [r5, #0]
 8000a42:	b103      	cbz	r3, 8000a46 <_read_r+0x1e>
 8000a44:	6023      	str	r3, [r4, #0]
 8000a46:	bd38      	pop	{r3, r4, r5, pc}
 8000a48:	200001b8 	.word	0x200001b8

08000a4c <_write_r>:
 8000a4c:	b538      	push	{r3, r4, r5, lr}
 8000a4e:	4d07      	ldr	r5, [pc, #28]	; (8000a6c <_write_r+0x20>)
 8000a50:	4604      	mov	r4, r0
 8000a52:	4608      	mov	r0, r1
 8000a54:	4611      	mov	r1, r2
 8000a56:	2200      	movs	r2, #0
 8000a58:	602a      	str	r2, [r5, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	f7ff fd01 	bl	8000462 <_write>
 8000a60:	1c43      	adds	r3, r0, #1
 8000a62:	d102      	bne.n	8000a6a <_write_r+0x1e>
 8000a64:	682b      	ldr	r3, [r5, #0]
 8000a66:	b103      	cbz	r3, 8000a6a <_write_r+0x1e>
 8000a68:	6023      	str	r3, [r4, #0]
 8000a6a:	bd38      	pop	{r3, r4, r5, pc}
 8000a6c:	200001b8 	.word	0x200001b8

08000a70 <__errno>:
 8000a70:	4b01      	ldr	r3, [pc, #4]	; (8000a78 <__errno+0x8>)
 8000a72:	6818      	ldr	r0, [r3, #0]
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000058 	.word	0x20000058

08000a7c <__libc_init_array>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	4d0d      	ldr	r5, [pc, #52]	; (8000ab4 <__libc_init_array+0x38>)
 8000a80:	4c0d      	ldr	r4, [pc, #52]	; (8000ab8 <__libc_init_array+0x3c>)
 8000a82:	1b64      	subs	r4, r4, r5
 8000a84:	10a4      	asrs	r4, r4, #2
 8000a86:	2600      	movs	r6, #0
 8000a88:	42a6      	cmp	r6, r4
 8000a8a:	d109      	bne.n	8000aa0 <__libc_init_array+0x24>
 8000a8c:	4d0b      	ldr	r5, [pc, #44]	; (8000abc <__libc_init_array+0x40>)
 8000a8e:	4c0c      	ldr	r4, [pc, #48]	; (8000ac0 <__libc_init_array+0x44>)
 8000a90:	f000 fd2a 	bl	80014e8 <_init>
 8000a94:	1b64      	subs	r4, r4, r5
 8000a96:	10a4      	asrs	r4, r4, #2
 8000a98:	2600      	movs	r6, #0
 8000a9a:	42a6      	cmp	r6, r4
 8000a9c:	d105      	bne.n	8000aaa <__libc_init_array+0x2e>
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aa4:	4798      	blx	r3
 8000aa6:	3601      	adds	r6, #1
 8000aa8:	e7ee      	b.n	8000a88 <__libc_init_array+0xc>
 8000aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aae:	4798      	blx	r3
 8000ab0:	3601      	adds	r6, #1
 8000ab2:	e7f2      	b.n	8000a9a <__libc_init_array+0x1e>
 8000ab4:	08001660 	.word	0x08001660
 8000ab8:	08001660 	.word	0x08001660
 8000abc:	08001660 	.word	0x08001660
 8000ac0:	08001664 	.word	0x08001664

08000ac4 <__retarget_lock_init_recursive>:
 8000ac4:	4770      	bx	lr

08000ac6 <__retarget_lock_acquire_recursive>:
 8000ac6:	4770      	bx	lr

08000ac8 <__retarget_lock_release_recursive>:
 8000ac8:	4770      	bx	lr
	...

08000acc <_free_r>:
 8000acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	d044      	beq.n	8000b5c <_free_r+0x90>
 8000ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ad6:	9001      	str	r0, [sp, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	f1a1 0404 	sub.w	r4, r1, #4
 8000ade:	bfb8      	it	lt
 8000ae0:	18e4      	addlt	r4, r4, r3
 8000ae2:	f000 f8df 	bl	8000ca4 <__malloc_lock>
 8000ae6:	4a1e      	ldr	r2, [pc, #120]	; (8000b60 <_free_r+0x94>)
 8000ae8:	9801      	ldr	r0, [sp, #4]
 8000aea:	6813      	ldr	r3, [r2, #0]
 8000aec:	b933      	cbnz	r3, 8000afc <_free_r+0x30>
 8000aee:	6063      	str	r3, [r4, #4]
 8000af0:	6014      	str	r4, [r2, #0]
 8000af2:	b003      	add	sp, #12
 8000af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000af8:	f000 b8da 	b.w	8000cb0 <__malloc_unlock>
 8000afc:	42a3      	cmp	r3, r4
 8000afe:	d908      	bls.n	8000b12 <_free_r+0x46>
 8000b00:	6825      	ldr	r5, [r4, #0]
 8000b02:	1961      	adds	r1, r4, r5
 8000b04:	428b      	cmp	r3, r1
 8000b06:	bf01      	itttt	eq
 8000b08:	6819      	ldreq	r1, [r3, #0]
 8000b0a:	685b      	ldreq	r3, [r3, #4]
 8000b0c:	1949      	addeq	r1, r1, r5
 8000b0e:	6021      	streq	r1, [r4, #0]
 8000b10:	e7ed      	b.n	8000aee <_free_r+0x22>
 8000b12:	461a      	mov	r2, r3
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	b10b      	cbz	r3, 8000b1c <_free_r+0x50>
 8000b18:	42a3      	cmp	r3, r4
 8000b1a:	d9fa      	bls.n	8000b12 <_free_r+0x46>
 8000b1c:	6811      	ldr	r1, [r2, #0]
 8000b1e:	1855      	adds	r5, r2, r1
 8000b20:	42a5      	cmp	r5, r4
 8000b22:	d10b      	bne.n	8000b3c <_free_r+0x70>
 8000b24:	6824      	ldr	r4, [r4, #0]
 8000b26:	4421      	add	r1, r4
 8000b28:	1854      	adds	r4, r2, r1
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	6011      	str	r1, [r2, #0]
 8000b2e:	d1e0      	bne.n	8000af2 <_free_r+0x26>
 8000b30:	681c      	ldr	r4, [r3, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	6053      	str	r3, [r2, #4]
 8000b36:	440c      	add	r4, r1
 8000b38:	6014      	str	r4, [r2, #0]
 8000b3a:	e7da      	b.n	8000af2 <_free_r+0x26>
 8000b3c:	d902      	bls.n	8000b44 <_free_r+0x78>
 8000b3e:	230c      	movs	r3, #12
 8000b40:	6003      	str	r3, [r0, #0]
 8000b42:	e7d6      	b.n	8000af2 <_free_r+0x26>
 8000b44:	6825      	ldr	r5, [r4, #0]
 8000b46:	1961      	adds	r1, r4, r5
 8000b48:	428b      	cmp	r3, r1
 8000b4a:	bf04      	itt	eq
 8000b4c:	6819      	ldreq	r1, [r3, #0]
 8000b4e:	685b      	ldreq	r3, [r3, #4]
 8000b50:	6063      	str	r3, [r4, #4]
 8000b52:	bf04      	itt	eq
 8000b54:	1949      	addeq	r1, r1, r5
 8000b56:	6021      	streq	r1, [r4, #0]
 8000b58:	6054      	str	r4, [r2, #4]
 8000b5a:	e7ca      	b.n	8000af2 <_free_r+0x26>
 8000b5c:	b003      	add	sp, #12
 8000b5e:	bd30      	pop	{r4, r5, pc}
 8000b60:	200001c0 	.word	0x200001c0

08000b64 <sbrk_aligned>:
 8000b64:	b570      	push	{r4, r5, r6, lr}
 8000b66:	4e0e      	ldr	r6, [pc, #56]	; (8000ba0 <sbrk_aligned+0x3c>)
 8000b68:	460c      	mov	r4, r1
 8000b6a:	6831      	ldr	r1, [r6, #0]
 8000b6c:	4605      	mov	r5, r0
 8000b6e:	b911      	cbnz	r1, 8000b76 <sbrk_aligned+0x12>
 8000b70:	f000 fcaa 	bl	80014c8 <_sbrk_r>
 8000b74:	6030      	str	r0, [r6, #0]
 8000b76:	4621      	mov	r1, r4
 8000b78:	4628      	mov	r0, r5
 8000b7a:	f000 fca5 	bl	80014c8 <_sbrk_r>
 8000b7e:	1c43      	adds	r3, r0, #1
 8000b80:	d00a      	beq.n	8000b98 <sbrk_aligned+0x34>
 8000b82:	1cc4      	adds	r4, r0, #3
 8000b84:	f024 0403 	bic.w	r4, r4, #3
 8000b88:	42a0      	cmp	r0, r4
 8000b8a:	d007      	beq.n	8000b9c <sbrk_aligned+0x38>
 8000b8c:	1a21      	subs	r1, r4, r0
 8000b8e:	4628      	mov	r0, r5
 8000b90:	f000 fc9a 	bl	80014c8 <_sbrk_r>
 8000b94:	3001      	adds	r0, #1
 8000b96:	d101      	bne.n	8000b9c <sbrk_aligned+0x38>
 8000b98:	f04f 34ff 	mov.w	r4, #4294967295
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ba0:	200001c4 	.word	0x200001c4

08000ba4 <_malloc_r>:
 8000ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ba8:	1ccd      	adds	r5, r1, #3
 8000baa:	f025 0503 	bic.w	r5, r5, #3
 8000bae:	3508      	adds	r5, #8
 8000bb0:	2d0c      	cmp	r5, #12
 8000bb2:	bf38      	it	cc
 8000bb4:	250c      	movcc	r5, #12
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	4607      	mov	r7, r0
 8000bba:	db01      	blt.n	8000bc0 <_malloc_r+0x1c>
 8000bbc:	42a9      	cmp	r1, r5
 8000bbe:	d905      	bls.n	8000bcc <_malloc_r+0x28>
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	4630      	mov	r0, r6
 8000bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000ca0 <_malloc_r+0xfc>
 8000bd0:	f000 f868 	bl	8000ca4 <__malloc_lock>
 8000bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8000bd8:	461c      	mov	r4, r3
 8000bda:	bb5c      	cbnz	r4, 8000c34 <_malloc_r+0x90>
 8000bdc:	4629      	mov	r1, r5
 8000bde:	4638      	mov	r0, r7
 8000be0:	f7ff ffc0 	bl	8000b64 <sbrk_aligned>
 8000be4:	1c43      	adds	r3, r0, #1
 8000be6:	4604      	mov	r4, r0
 8000be8:	d155      	bne.n	8000c96 <_malloc_r+0xf2>
 8000bea:	f8d8 4000 	ldr.w	r4, [r8]
 8000bee:	4626      	mov	r6, r4
 8000bf0:	2e00      	cmp	r6, #0
 8000bf2:	d145      	bne.n	8000c80 <_malloc_r+0xdc>
 8000bf4:	2c00      	cmp	r4, #0
 8000bf6:	d048      	beq.n	8000c8a <_malloc_r+0xe6>
 8000bf8:	6823      	ldr	r3, [r4, #0]
 8000bfa:	4631      	mov	r1, r6
 8000bfc:	4638      	mov	r0, r7
 8000bfe:	eb04 0903 	add.w	r9, r4, r3
 8000c02:	f000 fc61 	bl	80014c8 <_sbrk_r>
 8000c06:	4581      	cmp	r9, r0
 8000c08:	d13f      	bne.n	8000c8a <_malloc_r+0xe6>
 8000c0a:	6821      	ldr	r1, [r4, #0]
 8000c0c:	1a6d      	subs	r5, r5, r1
 8000c0e:	4629      	mov	r1, r5
 8000c10:	4638      	mov	r0, r7
 8000c12:	f7ff ffa7 	bl	8000b64 <sbrk_aligned>
 8000c16:	3001      	adds	r0, #1
 8000c18:	d037      	beq.n	8000c8a <_malloc_r+0xe6>
 8000c1a:	6823      	ldr	r3, [r4, #0]
 8000c1c:	442b      	add	r3, r5
 8000c1e:	6023      	str	r3, [r4, #0]
 8000c20:	f8d8 3000 	ldr.w	r3, [r8]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d038      	beq.n	8000c9a <_malloc_r+0xf6>
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	42a2      	cmp	r2, r4
 8000c2c:	d12b      	bne.n	8000c86 <_malloc_r+0xe2>
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	e00f      	b.n	8000c54 <_malloc_r+0xb0>
 8000c34:	6822      	ldr	r2, [r4, #0]
 8000c36:	1b52      	subs	r2, r2, r5
 8000c38:	d41f      	bmi.n	8000c7a <_malloc_r+0xd6>
 8000c3a:	2a0b      	cmp	r2, #11
 8000c3c:	d917      	bls.n	8000c6e <_malloc_r+0xca>
 8000c3e:	1961      	adds	r1, r4, r5
 8000c40:	42a3      	cmp	r3, r4
 8000c42:	6025      	str	r5, [r4, #0]
 8000c44:	bf18      	it	ne
 8000c46:	6059      	strne	r1, [r3, #4]
 8000c48:	6863      	ldr	r3, [r4, #4]
 8000c4a:	bf08      	it	eq
 8000c4c:	f8c8 1000 	streq.w	r1, [r8]
 8000c50:	5162      	str	r2, [r4, r5]
 8000c52:	604b      	str	r3, [r1, #4]
 8000c54:	4638      	mov	r0, r7
 8000c56:	f104 060b 	add.w	r6, r4, #11
 8000c5a:	f000 f829 	bl	8000cb0 <__malloc_unlock>
 8000c5e:	f026 0607 	bic.w	r6, r6, #7
 8000c62:	1d23      	adds	r3, r4, #4
 8000c64:	1af2      	subs	r2, r6, r3
 8000c66:	d0ae      	beq.n	8000bc6 <_malloc_r+0x22>
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	50a3      	str	r3, [r4, r2]
 8000c6c:	e7ab      	b.n	8000bc6 <_malloc_r+0x22>
 8000c6e:	42a3      	cmp	r3, r4
 8000c70:	6862      	ldr	r2, [r4, #4]
 8000c72:	d1dd      	bne.n	8000c30 <_malloc_r+0x8c>
 8000c74:	f8c8 2000 	str.w	r2, [r8]
 8000c78:	e7ec      	b.n	8000c54 <_malloc_r+0xb0>
 8000c7a:	4623      	mov	r3, r4
 8000c7c:	6864      	ldr	r4, [r4, #4]
 8000c7e:	e7ac      	b.n	8000bda <_malloc_r+0x36>
 8000c80:	4634      	mov	r4, r6
 8000c82:	6876      	ldr	r6, [r6, #4]
 8000c84:	e7b4      	b.n	8000bf0 <_malloc_r+0x4c>
 8000c86:	4613      	mov	r3, r2
 8000c88:	e7cc      	b.n	8000c24 <_malloc_r+0x80>
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	f000 f80e 	bl	8000cb0 <__malloc_unlock>
 8000c94:	e797      	b.n	8000bc6 <_malloc_r+0x22>
 8000c96:	6025      	str	r5, [r4, #0]
 8000c98:	e7dc      	b.n	8000c54 <_malloc_r+0xb0>
 8000c9a:	605b      	str	r3, [r3, #4]
 8000c9c:	deff      	udf	#255	; 0xff
 8000c9e:	bf00      	nop
 8000ca0:	200001c0 	.word	0x200001c0

08000ca4 <__malloc_lock>:
 8000ca4:	4801      	ldr	r0, [pc, #4]	; (8000cac <__malloc_lock+0x8>)
 8000ca6:	f7ff bf0e 	b.w	8000ac6 <__retarget_lock_acquire_recursive>
 8000caa:	bf00      	nop
 8000cac:	200001bc 	.word	0x200001bc

08000cb0 <__malloc_unlock>:
 8000cb0:	4801      	ldr	r0, [pc, #4]	; (8000cb8 <__malloc_unlock+0x8>)
 8000cb2:	f7ff bf09 	b.w	8000ac8 <__retarget_lock_release_recursive>
 8000cb6:	bf00      	nop
 8000cb8:	200001bc 	.word	0x200001bc

08000cbc <__sfputc_r>:
 8000cbc:	6893      	ldr	r3, [r2, #8]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	b410      	push	{r4}
 8000cc4:	6093      	str	r3, [r2, #8]
 8000cc6:	da08      	bge.n	8000cda <__sfputc_r+0x1e>
 8000cc8:	6994      	ldr	r4, [r2, #24]
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	db01      	blt.n	8000cd2 <__sfputc_r+0x16>
 8000cce:	290a      	cmp	r1, #10
 8000cd0:	d103      	bne.n	8000cda <__sfputc_r+0x1e>
 8000cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cd6:	f7ff bde8 	b.w	80008aa <__swbuf_r>
 8000cda:	6813      	ldr	r3, [r2, #0]
 8000cdc:	1c58      	adds	r0, r3, #1
 8000cde:	6010      	str	r0, [r2, #0]
 8000ce0:	7019      	strb	r1, [r3, #0]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <__sfputs_r>:
 8000cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cec:	4606      	mov	r6, r0
 8000cee:	460f      	mov	r7, r1
 8000cf0:	4614      	mov	r4, r2
 8000cf2:	18d5      	adds	r5, r2, r3
 8000cf4:	42ac      	cmp	r4, r5
 8000cf6:	d101      	bne.n	8000cfc <__sfputs_r+0x12>
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	e007      	b.n	8000d0c <__sfputs_r+0x22>
 8000cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d00:	463a      	mov	r2, r7
 8000d02:	4630      	mov	r0, r6
 8000d04:	f7ff ffda 	bl	8000cbc <__sfputc_r>
 8000d08:	1c43      	adds	r3, r0, #1
 8000d0a:	d1f3      	bne.n	8000cf4 <__sfputs_r+0xa>
 8000d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d10 <_vfiprintf_r>:
 8000d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d14:	460d      	mov	r5, r1
 8000d16:	b09d      	sub	sp, #116	; 0x74
 8000d18:	4614      	mov	r4, r2
 8000d1a:	4698      	mov	r8, r3
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	b118      	cbz	r0, 8000d28 <_vfiprintf_r+0x18>
 8000d20:	6a03      	ldr	r3, [r0, #32]
 8000d22:	b90b      	cbnz	r3, 8000d28 <_vfiprintf_r+0x18>
 8000d24:	f7ff fcda 	bl	80006dc <__sinit>
 8000d28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d2a:	07d9      	lsls	r1, r3, #31
 8000d2c:	d405      	bmi.n	8000d3a <_vfiprintf_r+0x2a>
 8000d2e:	89ab      	ldrh	r3, [r5, #12]
 8000d30:	059a      	lsls	r2, r3, #22
 8000d32:	d402      	bmi.n	8000d3a <_vfiprintf_r+0x2a>
 8000d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d36:	f7ff fec6 	bl	8000ac6 <__retarget_lock_acquire_recursive>
 8000d3a:	89ab      	ldrh	r3, [r5, #12]
 8000d3c:	071b      	lsls	r3, r3, #28
 8000d3e:	d501      	bpl.n	8000d44 <_vfiprintf_r+0x34>
 8000d40:	692b      	ldr	r3, [r5, #16]
 8000d42:	b99b      	cbnz	r3, 8000d6c <_vfiprintf_r+0x5c>
 8000d44:	4629      	mov	r1, r5
 8000d46:	4630      	mov	r0, r6
 8000d48:	f7ff fdec 	bl	8000924 <__swsetup_r>
 8000d4c:	b170      	cbz	r0, 8000d6c <_vfiprintf_r+0x5c>
 8000d4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d50:	07dc      	lsls	r4, r3, #31
 8000d52:	d504      	bpl.n	8000d5e <_vfiprintf_r+0x4e>
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	b01d      	add	sp, #116	; 0x74
 8000d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d5e:	89ab      	ldrh	r3, [r5, #12]
 8000d60:	0598      	lsls	r0, r3, #22
 8000d62:	d4f7      	bmi.n	8000d54 <_vfiprintf_r+0x44>
 8000d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d66:	f7ff feaf 	bl	8000ac8 <__retarget_lock_release_recursive>
 8000d6a:	e7f3      	b.n	8000d54 <_vfiprintf_r+0x44>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8000d70:	2320      	movs	r3, #32
 8000d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d7a:	2330      	movs	r3, #48	; 0x30
 8000d7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000f30 <_vfiprintf_r+0x220>
 8000d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d84:	f04f 0901 	mov.w	r9, #1
 8000d88:	4623      	mov	r3, r4
 8000d8a:	469a      	mov	sl, r3
 8000d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d90:	b10a      	cbz	r2, 8000d96 <_vfiprintf_r+0x86>
 8000d92:	2a25      	cmp	r2, #37	; 0x25
 8000d94:	d1f9      	bne.n	8000d8a <_vfiprintf_r+0x7a>
 8000d96:	ebba 0b04 	subs.w	fp, sl, r4
 8000d9a:	d00b      	beq.n	8000db4 <_vfiprintf_r+0xa4>
 8000d9c:	465b      	mov	r3, fp
 8000d9e:	4622      	mov	r2, r4
 8000da0:	4629      	mov	r1, r5
 8000da2:	4630      	mov	r0, r6
 8000da4:	f7ff ffa1 	bl	8000cea <__sfputs_r>
 8000da8:	3001      	adds	r0, #1
 8000daa:	f000 80a9 	beq.w	8000f00 <_vfiprintf_r+0x1f0>
 8000dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000db0:	445a      	add	r2, fp
 8000db2:	9209      	str	r2, [sp, #36]	; 0x24
 8000db4:	f89a 3000 	ldrb.w	r3, [sl]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 80a1 	beq.w	8000f00 <_vfiprintf_r+0x1f0>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000dc8:	f10a 0a01 	add.w	sl, sl, #1
 8000dcc:	9304      	str	r3, [sp, #16]
 8000dce:	9307      	str	r3, [sp, #28]
 8000dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8000dd6:	4654      	mov	r4, sl
 8000dd8:	2205      	movs	r2, #5
 8000dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dde:	4854      	ldr	r0, [pc, #336]	; (8000f30 <_vfiprintf_r+0x220>)
 8000de0:	f7ff f9fe 	bl	80001e0 <memchr>
 8000de4:	9a04      	ldr	r2, [sp, #16]
 8000de6:	b9d8      	cbnz	r0, 8000e20 <_vfiprintf_r+0x110>
 8000de8:	06d1      	lsls	r1, r2, #27
 8000dea:	bf44      	itt	mi
 8000dec:	2320      	movmi	r3, #32
 8000dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000df2:	0713      	lsls	r3, r2, #28
 8000df4:	bf44      	itt	mi
 8000df6:	232b      	movmi	r3, #43	; 0x2b
 8000df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8000e00:	2b2a      	cmp	r3, #42	; 0x2a
 8000e02:	d015      	beq.n	8000e30 <_vfiprintf_r+0x120>
 8000e04:	9a07      	ldr	r2, [sp, #28]
 8000e06:	4654      	mov	r4, sl
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f04f 0c0a 	mov.w	ip, #10
 8000e0e:	4621      	mov	r1, r4
 8000e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e14:	3b30      	subs	r3, #48	; 0x30
 8000e16:	2b09      	cmp	r3, #9
 8000e18:	d94d      	bls.n	8000eb6 <_vfiprintf_r+0x1a6>
 8000e1a:	b1b0      	cbz	r0, 8000e4a <_vfiprintf_r+0x13a>
 8000e1c:	9207      	str	r2, [sp, #28]
 8000e1e:	e014      	b.n	8000e4a <_vfiprintf_r+0x13a>
 8000e20:	eba0 0308 	sub.w	r3, r0, r8
 8000e24:	fa09 f303 	lsl.w	r3, r9, r3
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	9304      	str	r3, [sp, #16]
 8000e2c:	46a2      	mov	sl, r4
 8000e2e:	e7d2      	b.n	8000dd6 <_vfiprintf_r+0xc6>
 8000e30:	9b03      	ldr	r3, [sp, #12]
 8000e32:	1d19      	adds	r1, r3, #4
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	9103      	str	r1, [sp, #12]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	bfbb      	ittet	lt
 8000e3c:	425b      	neglt	r3, r3
 8000e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8000e42:	9307      	strge	r3, [sp, #28]
 8000e44:	9307      	strlt	r3, [sp, #28]
 8000e46:	bfb8      	it	lt
 8000e48:	9204      	strlt	r2, [sp, #16]
 8000e4a:	7823      	ldrb	r3, [r4, #0]
 8000e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8000e4e:	d10c      	bne.n	8000e6a <_vfiprintf_r+0x15a>
 8000e50:	7863      	ldrb	r3, [r4, #1]
 8000e52:	2b2a      	cmp	r3, #42	; 0x2a
 8000e54:	d134      	bne.n	8000ec0 <_vfiprintf_r+0x1b0>
 8000e56:	9b03      	ldr	r3, [sp, #12]
 8000e58:	1d1a      	adds	r2, r3, #4
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	9203      	str	r2, [sp, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bfb8      	it	lt
 8000e62:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e66:	3402      	adds	r4, #2
 8000e68:	9305      	str	r3, [sp, #20]
 8000e6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000f40 <_vfiprintf_r+0x230>
 8000e6e:	7821      	ldrb	r1, [r4, #0]
 8000e70:	2203      	movs	r2, #3
 8000e72:	4650      	mov	r0, sl
 8000e74:	f7ff f9b4 	bl	80001e0 <memchr>
 8000e78:	b138      	cbz	r0, 8000e8a <_vfiprintf_r+0x17a>
 8000e7a:	9b04      	ldr	r3, [sp, #16]
 8000e7c:	eba0 000a 	sub.w	r0, r0, sl
 8000e80:	2240      	movs	r2, #64	; 0x40
 8000e82:	4082      	lsls	r2, r0
 8000e84:	4313      	orrs	r3, r2
 8000e86:	3401      	adds	r4, #1
 8000e88:	9304      	str	r3, [sp, #16]
 8000e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e8e:	4829      	ldr	r0, [pc, #164]	; (8000f34 <_vfiprintf_r+0x224>)
 8000e90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e94:	2206      	movs	r2, #6
 8000e96:	f7ff f9a3 	bl	80001e0 <memchr>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d03f      	beq.n	8000f1e <_vfiprintf_r+0x20e>
 8000e9e:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <_vfiprintf_r+0x228>)
 8000ea0:	bb1b      	cbnz	r3, 8000eea <_vfiprintf_r+0x1da>
 8000ea2:	9b03      	ldr	r3, [sp, #12]
 8000ea4:	3307      	adds	r3, #7
 8000ea6:	f023 0307 	bic.w	r3, r3, #7
 8000eaa:	3308      	adds	r3, #8
 8000eac:	9303      	str	r3, [sp, #12]
 8000eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000eb0:	443b      	add	r3, r7
 8000eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8000eb4:	e768      	b.n	8000d88 <_vfiprintf_r+0x78>
 8000eb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000eba:	460c      	mov	r4, r1
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	e7a6      	b.n	8000e0e <_vfiprintf_r+0xfe>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	3401      	adds	r4, #1
 8000ec4:	9305      	str	r3, [sp, #20]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 0c0a 	mov.w	ip, #10
 8000ecc:	4620      	mov	r0, r4
 8000ece:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ed2:	3a30      	subs	r2, #48	; 0x30
 8000ed4:	2a09      	cmp	r2, #9
 8000ed6:	d903      	bls.n	8000ee0 <_vfiprintf_r+0x1d0>
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0c6      	beq.n	8000e6a <_vfiprintf_r+0x15a>
 8000edc:	9105      	str	r1, [sp, #20]
 8000ede:	e7c4      	b.n	8000e6a <_vfiprintf_r+0x15a>
 8000ee0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ee4:	4604      	mov	r4, r0
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e7f0      	b.n	8000ecc <_vfiprintf_r+0x1bc>
 8000eea:	ab03      	add	r3, sp, #12
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	462a      	mov	r2, r5
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <_vfiprintf_r+0x22c>)
 8000ef2:	a904      	add	r1, sp, #16
 8000ef4:	4630      	mov	r0, r6
 8000ef6:	f3af 8000 	nop.w
 8000efa:	4607      	mov	r7, r0
 8000efc:	1c78      	adds	r0, r7, #1
 8000efe:	d1d6      	bne.n	8000eae <_vfiprintf_r+0x19e>
 8000f00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f02:	07d9      	lsls	r1, r3, #31
 8000f04:	d405      	bmi.n	8000f12 <_vfiprintf_r+0x202>
 8000f06:	89ab      	ldrh	r3, [r5, #12]
 8000f08:	059a      	lsls	r2, r3, #22
 8000f0a:	d402      	bmi.n	8000f12 <_vfiprintf_r+0x202>
 8000f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f0e:	f7ff fddb 	bl	8000ac8 <__retarget_lock_release_recursive>
 8000f12:	89ab      	ldrh	r3, [r5, #12]
 8000f14:	065b      	lsls	r3, r3, #25
 8000f16:	f53f af1d 	bmi.w	8000d54 <_vfiprintf_r+0x44>
 8000f1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f1c:	e71c      	b.n	8000d58 <_vfiprintf_r+0x48>
 8000f1e:	ab03      	add	r3, sp, #12
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	462a      	mov	r2, r5
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <_vfiprintf_r+0x22c>)
 8000f26:	a904      	add	r1, sp, #16
 8000f28:	4630      	mov	r0, r6
 8000f2a:	f000 f879 	bl	8001020 <_printf_i>
 8000f2e:	e7e4      	b.n	8000efa <_vfiprintf_r+0x1ea>
 8000f30:	0800162c 	.word	0x0800162c
 8000f34:	08001636 	.word	0x08001636
 8000f38:	00000000 	.word	0x00000000
 8000f3c:	08000ceb 	.word	0x08000ceb
 8000f40:	08001632 	.word	0x08001632

08000f44 <_printf_common>:
 8000f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f48:	4616      	mov	r6, r2
 8000f4a:	4699      	mov	r9, r3
 8000f4c:	688a      	ldr	r2, [r1, #8]
 8000f4e:	690b      	ldr	r3, [r1, #16]
 8000f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f54:	4293      	cmp	r3, r2
 8000f56:	bfb8      	it	lt
 8000f58:	4613      	movlt	r3, r2
 8000f5a:	6033      	str	r3, [r6, #0]
 8000f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f60:	4607      	mov	r7, r0
 8000f62:	460c      	mov	r4, r1
 8000f64:	b10a      	cbz	r2, 8000f6a <_printf_common+0x26>
 8000f66:	3301      	adds	r3, #1
 8000f68:	6033      	str	r3, [r6, #0]
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	0699      	lsls	r1, r3, #26
 8000f6e:	bf42      	ittt	mi
 8000f70:	6833      	ldrmi	r3, [r6, #0]
 8000f72:	3302      	addmi	r3, #2
 8000f74:	6033      	strmi	r3, [r6, #0]
 8000f76:	6825      	ldr	r5, [r4, #0]
 8000f78:	f015 0506 	ands.w	r5, r5, #6
 8000f7c:	d106      	bne.n	8000f8c <_printf_common+0x48>
 8000f7e:	f104 0a19 	add.w	sl, r4, #25
 8000f82:	68e3      	ldr	r3, [r4, #12]
 8000f84:	6832      	ldr	r2, [r6, #0]
 8000f86:	1a9b      	subs	r3, r3, r2
 8000f88:	42ab      	cmp	r3, r5
 8000f8a:	dc26      	bgt.n	8000fda <_printf_common+0x96>
 8000f8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000f90:	1e13      	subs	r3, r2, #0
 8000f92:	6822      	ldr	r2, [r4, #0]
 8000f94:	bf18      	it	ne
 8000f96:	2301      	movne	r3, #1
 8000f98:	0692      	lsls	r2, r2, #26
 8000f9a:	d42b      	bmi.n	8000ff4 <_printf_common+0xb0>
 8000f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000fa0:	4649      	mov	r1, r9
 8000fa2:	4638      	mov	r0, r7
 8000fa4:	47c0      	blx	r8
 8000fa6:	3001      	adds	r0, #1
 8000fa8:	d01e      	beq.n	8000fe8 <_printf_common+0xa4>
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	6922      	ldr	r2, [r4, #16]
 8000fae:	f003 0306 	and.w	r3, r3, #6
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf02      	ittt	eq
 8000fb6:	68e5      	ldreq	r5, [r4, #12]
 8000fb8:	6833      	ldreq	r3, [r6, #0]
 8000fba:	1aed      	subeq	r5, r5, r3
 8000fbc:	68a3      	ldr	r3, [r4, #8]
 8000fbe:	bf0c      	ite	eq
 8000fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fc4:	2500      	movne	r5, #0
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	bfc4      	itt	gt
 8000fca:	1a9b      	subgt	r3, r3, r2
 8000fcc:	18ed      	addgt	r5, r5, r3
 8000fce:	2600      	movs	r6, #0
 8000fd0:	341a      	adds	r4, #26
 8000fd2:	42b5      	cmp	r5, r6
 8000fd4:	d11a      	bne.n	800100c <_printf_common+0xc8>
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	e008      	b.n	8000fec <_printf_common+0xa8>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	4652      	mov	r2, sl
 8000fde:	4649      	mov	r1, r9
 8000fe0:	4638      	mov	r0, r7
 8000fe2:	47c0      	blx	r8
 8000fe4:	3001      	adds	r0, #1
 8000fe6:	d103      	bne.n	8000ff0 <_printf_common+0xac>
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff0:	3501      	adds	r5, #1
 8000ff2:	e7c6      	b.n	8000f82 <_printf_common+0x3e>
 8000ff4:	18e1      	adds	r1, r4, r3
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	2030      	movs	r0, #48	; 0x30
 8000ffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000ffe:	4422      	add	r2, r4
 8001000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001008:	3302      	adds	r3, #2
 800100a:	e7c7      	b.n	8000f9c <_printf_common+0x58>
 800100c:	2301      	movs	r3, #1
 800100e:	4622      	mov	r2, r4
 8001010:	4649      	mov	r1, r9
 8001012:	4638      	mov	r0, r7
 8001014:	47c0      	blx	r8
 8001016:	3001      	adds	r0, #1
 8001018:	d0e6      	beq.n	8000fe8 <_printf_common+0xa4>
 800101a:	3601      	adds	r6, #1
 800101c:	e7d9      	b.n	8000fd2 <_printf_common+0x8e>
	...

08001020 <_printf_i>:
 8001020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	7e0f      	ldrb	r7, [r1, #24]
 8001026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001028:	2f78      	cmp	r7, #120	; 0x78
 800102a:	4691      	mov	r9, r2
 800102c:	4680      	mov	r8, r0
 800102e:	460c      	mov	r4, r1
 8001030:	469a      	mov	sl, r3
 8001032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001036:	d807      	bhi.n	8001048 <_printf_i+0x28>
 8001038:	2f62      	cmp	r7, #98	; 0x62
 800103a:	d80a      	bhi.n	8001052 <_printf_i+0x32>
 800103c:	2f00      	cmp	r7, #0
 800103e:	f000 80d4 	beq.w	80011ea <_printf_i+0x1ca>
 8001042:	2f58      	cmp	r7, #88	; 0x58
 8001044:	f000 80c0 	beq.w	80011c8 <_printf_i+0x1a8>
 8001048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800104c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001050:	e03a      	b.n	80010c8 <_printf_i+0xa8>
 8001052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001056:	2b15      	cmp	r3, #21
 8001058:	d8f6      	bhi.n	8001048 <_printf_i+0x28>
 800105a:	a101      	add	r1, pc, #4	; (adr r1, 8001060 <_printf_i+0x40>)
 800105c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001060:	080010b9 	.word	0x080010b9
 8001064:	080010cd 	.word	0x080010cd
 8001068:	08001049 	.word	0x08001049
 800106c:	08001049 	.word	0x08001049
 8001070:	08001049 	.word	0x08001049
 8001074:	08001049 	.word	0x08001049
 8001078:	080010cd 	.word	0x080010cd
 800107c:	08001049 	.word	0x08001049
 8001080:	08001049 	.word	0x08001049
 8001084:	08001049 	.word	0x08001049
 8001088:	08001049 	.word	0x08001049
 800108c:	080011d1 	.word	0x080011d1
 8001090:	080010f9 	.word	0x080010f9
 8001094:	0800118b 	.word	0x0800118b
 8001098:	08001049 	.word	0x08001049
 800109c:	08001049 	.word	0x08001049
 80010a0:	080011f3 	.word	0x080011f3
 80010a4:	08001049 	.word	0x08001049
 80010a8:	080010f9 	.word	0x080010f9
 80010ac:	08001049 	.word	0x08001049
 80010b0:	08001049 	.word	0x08001049
 80010b4:	08001193 	.word	0x08001193
 80010b8:	682b      	ldr	r3, [r5, #0]
 80010ba:	1d1a      	adds	r2, r3, #4
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	602a      	str	r2, [r5, #0]
 80010c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010c8:	2301      	movs	r3, #1
 80010ca:	e09f      	b.n	800120c <_printf_i+0x1ec>
 80010cc:	6820      	ldr	r0, [r4, #0]
 80010ce:	682b      	ldr	r3, [r5, #0]
 80010d0:	0607      	lsls	r7, r0, #24
 80010d2:	f103 0104 	add.w	r1, r3, #4
 80010d6:	6029      	str	r1, [r5, #0]
 80010d8:	d501      	bpl.n	80010de <_printf_i+0xbe>
 80010da:	681e      	ldr	r6, [r3, #0]
 80010dc:	e003      	b.n	80010e6 <_printf_i+0xc6>
 80010de:	0646      	lsls	r6, r0, #25
 80010e0:	d5fb      	bpl.n	80010da <_printf_i+0xba>
 80010e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	da03      	bge.n	80010f2 <_printf_i+0xd2>
 80010ea:	232d      	movs	r3, #45	; 0x2d
 80010ec:	4276      	negs	r6, r6
 80010ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010f2:	485a      	ldr	r0, [pc, #360]	; (800125c <_printf_i+0x23c>)
 80010f4:	230a      	movs	r3, #10
 80010f6:	e012      	b.n	800111e <_printf_i+0xfe>
 80010f8:	682b      	ldr	r3, [r5, #0]
 80010fa:	6820      	ldr	r0, [r4, #0]
 80010fc:	1d19      	adds	r1, r3, #4
 80010fe:	6029      	str	r1, [r5, #0]
 8001100:	0605      	lsls	r5, r0, #24
 8001102:	d501      	bpl.n	8001108 <_printf_i+0xe8>
 8001104:	681e      	ldr	r6, [r3, #0]
 8001106:	e002      	b.n	800110e <_printf_i+0xee>
 8001108:	0641      	lsls	r1, r0, #25
 800110a:	d5fb      	bpl.n	8001104 <_printf_i+0xe4>
 800110c:	881e      	ldrh	r6, [r3, #0]
 800110e:	4853      	ldr	r0, [pc, #332]	; (800125c <_printf_i+0x23c>)
 8001110:	2f6f      	cmp	r7, #111	; 0x6f
 8001112:	bf0c      	ite	eq
 8001114:	2308      	moveq	r3, #8
 8001116:	230a      	movne	r3, #10
 8001118:	2100      	movs	r1, #0
 800111a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800111e:	6865      	ldr	r5, [r4, #4]
 8001120:	60a5      	str	r5, [r4, #8]
 8001122:	2d00      	cmp	r5, #0
 8001124:	bfa2      	ittt	ge
 8001126:	6821      	ldrge	r1, [r4, #0]
 8001128:	f021 0104 	bicge.w	r1, r1, #4
 800112c:	6021      	strge	r1, [r4, #0]
 800112e:	b90e      	cbnz	r6, 8001134 <_printf_i+0x114>
 8001130:	2d00      	cmp	r5, #0
 8001132:	d04b      	beq.n	80011cc <_printf_i+0x1ac>
 8001134:	4615      	mov	r5, r2
 8001136:	fbb6 f1f3 	udiv	r1, r6, r3
 800113a:	fb03 6711 	mls	r7, r3, r1, r6
 800113e:	5dc7      	ldrb	r7, [r0, r7]
 8001140:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001144:	4637      	mov	r7, r6
 8001146:	42bb      	cmp	r3, r7
 8001148:	460e      	mov	r6, r1
 800114a:	d9f4      	bls.n	8001136 <_printf_i+0x116>
 800114c:	2b08      	cmp	r3, #8
 800114e:	d10b      	bne.n	8001168 <_printf_i+0x148>
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	07de      	lsls	r6, r3, #31
 8001154:	d508      	bpl.n	8001168 <_printf_i+0x148>
 8001156:	6923      	ldr	r3, [r4, #16]
 8001158:	6861      	ldr	r1, [r4, #4]
 800115a:	4299      	cmp	r1, r3
 800115c:	bfde      	ittt	le
 800115e:	2330      	movle	r3, #48	; 0x30
 8001160:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001164:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001168:	1b52      	subs	r2, r2, r5
 800116a:	6122      	str	r2, [r4, #16]
 800116c:	f8cd a000 	str.w	sl, [sp]
 8001170:	464b      	mov	r3, r9
 8001172:	aa03      	add	r2, sp, #12
 8001174:	4621      	mov	r1, r4
 8001176:	4640      	mov	r0, r8
 8001178:	f7ff fee4 	bl	8000f44 <_printf_common>
 800117c:	3001      	adds	r0, #1
 800117e:	d14a      	bne.n	8001216 <_printf_i+0x1f6>
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	b004      	add	sp, #16
 8001186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	6023      	str	r3, [r4, #0]
 8001192:	4833      	ldr	r0, [pc, #204]	; (8001260 <_printf_i+0x240>)
 8001194:	2778      	movs	r7, #120	; 0x78
 8001196:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	6829      	ldr	r1, [r5, #0]
 800119e:	061f      	lsls	r7, r3, #24
 80011a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80011a4:	d402      	bmi.n	80011ac <_printf_i+0x18c>
 80011a6:	065f      	lsls	r7, r3, #25
 80011a8:	bf48      	it	mi
 80011aa:	b2b6      	uxthmi	r6, r6
 80011ac:	07df      	lsls	r7, r3, #31
 80011ae:	bf48      	it	mi
 80011b0:	f043 0320 	orrmi.w	r3, r3, #32
 80011b4:	6029      	str	r1, [r5, #0]
 80011b6:	bf48      	it	mi
 80011b8:	6023      	strmi	r3, [r4, #0]
 80011ba:	b91e      	cbnz	r6, 80011c4 <_printf_i+0x1a4>
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	f023 0320 	bic.w	r3, r3, #32
 80011c2:	6023      	str	r3, [r4, #0]
 80011c4:	2310      	movs	r3, #16
 80011c6:	e7a7      	b.n	8001118 <_printf_i+0xf8>
 80011c8:	4824      	ldr	r0, [pc, #144]	; (800125c <_printf_i+0x23c>)
 80011ca:	e7e4      	b.n	8001196 <_printf_i+0x176>
 80011cc:	4615      	mov	r5, r2
 80011ce:	e7bd      	b.n	800114c <_printf_i+0x12c>
 80011d0:	682b      	ldr	r3, [r5, #0]
 80011d2:	6826      	ldr	r6, [r4, #0]
 80011d4:	6961      	ldr	r1, [r4, #20]
 80011d6:	1d18      	adds	r0, r3, #4
 80011d8:	6028      	str	r0, [r5, #0]
 80011da:	0635      	lsls	r5, r6, #24
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	d501      	bpl.n	80011e4 <_printf_i+0x1c4>
 80011e0:	6019      	str	r1, [r3, #0]
 80011e2:	e002      	b.n	80011ea <_printf_i+0x1ca>
 80011e4:	0670      	lsls	r0, r6, #25
 80011e6:	d5fb      	bpl.n	80011e0 <_printf_i+0x1c0>
 80011e8:	8019      	strh	r1, [r3, #0]
 80011ea:	2300      	movs	r3, #0
 80011ec:	6123      	str	r3, [r4, #16]
 80011ee:	4615      	mov	r5, r2
 80011f0:	e7bc      	b.n	800116c <_printf_i+0x14c>
 80011f2:	682b      	ldr	r3, [r5, #0]
 80011f4:	1d1a      	adds	r2, r3, #4
 80011f6:	602a      	str	r2, [r5, #0]
 80011f8:	681d      	ldr	r5, [r3, #0]
 80011fa:	6862      	ldr	r2, [r4, #4]
 80011fc:	2100      	movs	r1, #0
 80011fe:	4628      	mov	r0, r5
 8001200:	f7fe ffee 	bl	80001e0 <memchr>
 8001204:	b108      	cbz	r0, 800120a <_printf_i+0x1ea>
 8001206:	1b40      	subs	r0, r0, r5
 8001208:	6060      	str	r0, [r4, #4]
 800120a:	6863      	ldr	r3, [r4, #4]
 800120c:	6123      	str	r3, [r4, #16]
 800120e:	2300      	movs	r3, #0
 8001210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001214:	e7aa      	b.n	800116c <_printf_i+0x14c>
 8001216:	6923      	ldr	r3, [r4, #16]
 8001218:	462a      	mov	r2, r5
 800121a:	4649      	mov	r1, r9
 800121c:	4640      	mov	r0, r8
 800121e:	47d0      	blx	sl
 8001220:	3001      	adds	r0, #1
 8001222:	d0ad      	beq.n	8001180 <_printf_i+0x160>
 8001224:	6823      	ldr	r3, [r4, #0]
 8001226:	079b      	lsls	r3, r3, #30
 8001228:	d413      	bmi.n	8001252 <_printf_i+0x232>
 800122a:	68e0      	ldr	r0, [r4, #12]
 800122c:	9b03      	ldr	r3, [sp, #12]
 800122e:	4298      	cmp	r0, r3
 8001230:	bfb8      	it	lt
 8001232:	4618      	movlt	r0, r3
 8001234:	e7a6      	b.n	8001184 <_printf_i+0x164>
 8001236:	2301      	movs	r3, #1
 8001238:	4632      	mov	r2, r6
 800123a:	4649      	mov	r1, r9
 800123c:	4640      	mov	r0, r8
 800123e:	47d0      	blx	sl
 8001240:	3001      	adds	r0, #1
 8001242:	d09d      	beq.n	8001180 <_printf_i+0x160>
 8001244:	3501      	adds	r5, #1
 8001246:	68e3      	ldr	r3, [r4, #12]
 8001248:	9903      	ldr	r1, [sp, #12]
 800124a:	1a5b      	subs	r3, r3, r1
 800124c:	42ab      	cmp	r3, r5
 800124e:	dcf2      	bgt.n	8001236 <_printf_i+0x216>
 8001250:	e7eb      	b.n	800122a <_printf_i+0x20a>
 8001252:	2500      	movs	r5, #0
 8001254:	f104 0619 	add.w	r6, r4, #25
 8001258:	e7f5      	b.n	8001246 <_printf_i+0x226>
 800125a:	bf00      	nop
 800125c:	0800163d 	.word	0x0800163d
 8001260:	0800164e 	.word	0x0800164e

08001264 <__sflush_r>:
 8001264:	898a      	ldrh	r2, [r1, #12]
 8001266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800126a:	4605      	mov	r5, r0
 800126c:	0710      	lsls	r0, r2, #28
 800126e:	460c      	mov	r4, r1
 8001270:	d458      	bmi.n	8001324 <__sflush_r+0xc0>
 8001272:	684b      	ldr	r3, [r1, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	dc05      	bgt.n	8001284 <__sflush_r+0x20>
 8001278:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800127a:	2b00      	cmp	r3, #0
 800127c:	dc02      	bgt.n	8001284 <__sflush_r+0x20>
 800127e:	2000      	movs	r0, #0
 8001280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001286:	2e00      	cmp	r6, #0
 8001288:	d0f9      	beq.n	800127e <__sflush_r+0x1a>
 800128a:	2300      	movs	r3, #0
 800128c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001290:	682f      	ldr	r7, [r5, #0]
 8001292:	6a21      	ldr	r1, [r4, #32]
 8001294:	602b      	str	r3, [r5, #0]
 8001296:	d032      	beq.n	80012fe <__sflush_r+0x9a>
 8001298:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800129a:	89a3      	ldrh	r3, [r4, #12]
 800129c:	075a      	lsls	r2, r3, #29
 800129e:	d505      	bpl.n	80012ac <__sflush_r+0x48>
 80012a0:	6863      	ldr	r3, [r4, #4]
 80012a2:	1ac0      	subs	r0, r0, r3
 80012a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012a6:	b10b      	cbz	r3, 80012ac <__sflush_r+0x48>
 80012a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012aa:	1ac0      	subs	r0, r0, r3
 80012ac:	2300      	movs	r3, #0
 80012ae:	4602      	mov	r2, r0
 80012b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012b2:	6a21      	ldr	r1, [r4, #32]
 80012b4:	4628      	mov	r0, r5
 80012b6:	47b0      	blx	r6
 80012b8:	1c43      	adds	r3, r0, #1
 80012ba:	89a3      	ldrh	r3, [r4, #12]
 80012bc:	d106      	bne.n	80012cc <__sflush_r+0x68>
 80012be:	6829      	ldr	r1, [r5, #0]
 80012c0:	291d      	cmp	r1, #29
 80012c2:	d82b      	bhi.n	800131c <__sflush_r+0xb8>
 80012c4:	4a29      	ldr	r2, [pc, #164]	; (800136c <__sflush_r+0x108>)
 80012c6:	410a      	asrs	r2, r1
 80012c8:	07d6      	lsls	r6, r2, #31
 80012ca:	d427      	bmi.n	800131c <__sflush_r+0xb8>
 80012cc:	2200      	movs	r2, #0
 80012ce:	6062      	str	r2, [r4, #4]
 80012d0:	04d9      	lsls	r1, r3, #19
 80012d2:	6922      	ldr	r2, [r4, #16]
 80012d4:	6022      	str	r2, [r4, #0]
 80012d6:	d504      	bpl.n	80012e2 <__sflush_r+0x7e>
 80012d8:	1c42      	adds	r2, r0, #1
 80012da:	d101      	bne.n	80012e0 <__sflush_r+0x7c>
 80012dc:	682b      	ldr	r3, [r5, #0]
 80012de:	b903      	cbnz	r3, 80012e2 <__sflush_r+0x7e>
 80012e0:	6560      	str	r0, [r4, #84]	; 0x54
 80012e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012e4:	602f      	str	r7, [r5, #0]
 80012e6:	2900      	cmp	r1, #0
 80012e8:	d0c9      	beq.n	800127e <__sflush_r+0x1a>
 80012ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012ee:	4299      	cmp	r1, r3
 80012f0:	d002      	beq.n	80012f8 <__sflush_r+0x94>
 80012f2:	4628      	mov	r0, r5
 80012f4:	f7ff fbea 	bl	8000acc <_free_r>
 80012f8:	2000      	movs	r0, #0
 80012fa:	6360      	str	r0, [r4, #52]	; 0x34
 80012fc:	e7c0      	b.n	8001280 <__sflush_r+0x1c>
 80012fe:	2301      	movs	r3, #1
 8001300:	4628      	mov	r0, r5
 8001302:	47b0      	blx	r6
 8001304:	1c41      	adds	r1, r0, #1
 8001306:	d1c8      	bne.n	800129a <__sflush_r+0x36>
 8001308:	682b      	ldr	r3, [r5, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0c5      	beq.n	800129a <__sflush_r+0x36>
 800130e:	2b1d      	cmp	r3, #29
 8001310:	d001      	beq.n	8001316 <__sflush_r+0xb2>
 8001312:	2b16      	cmp	r3, #22
 8001314:	d101      	bne.n	800131a <__sflush_r+0xb6>
 8001316:	602f      	str	r7, [r5, #0]
 8001318:	e7b1      	b.n	800127e <__sflush_r+0x1a>
 800131a:	89a3      	ldrh	r3, [r4, #12]
 800131c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001320:	81a3      	strh	r3, [r4, #12]
 8001322:	e7ad      	b.n	8001280 <__sflush_r+0x1c>
 8001324:	690f      	ldr	r7, [r1, #16]
 8001326:	2f00      	cmp	r7, #0
 8001328:	d0a9      	beq.n	800127e <__sflush_r+0x1a>
 800132a:	0793      	lsls	r3, r2, #30
 800132c:	680e      	ldr	r6, [r1, #0]
 800132e:	bf08      	it	eq
 8001330:	694b      	ldreq	r3, [r1, #20]
 8001332:	600f      	str	r7, [r1, #0]
 8001334:	bf18      	it	ne
 8001336:	2300      	movne	r3, #0
 8001338:	eba6 0807 	sub.w	r8, r6, r7
 800133c:	608b      	str	r3, [r1, #8]
 800133e:	f1b8 0f00 	cmp.w	r8, #0
 8001342:	dd9c      	ble.n	800127e <__sflush_r+0x1a>
 8001344:	6a21      	ldr	r1, [r4, #32]
 8001346:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001348:	4643      	mov	r3, r8
 800134a:	463a      	mov	r2, r7
 800134c:	4628      	mov	r0, r5
 800134e:	47b0      	blx	r6
 8001350:	2800      	cmp	r0, #0
 8001352:	dc06      	bgt.n	8001362 <__sflush_r+0xfe>
 8001354:	89a3      	ldrh	r3, [r4, #12]
 8001356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800135a:	81a3      	strh	r3, [r4, #12]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	e78e      	b.n	8001280 <__sflush_r+0x1c>
 8001362:	4407      	add	r7, r0
 8001364:	eba8 0800 	sub.w	r8, r8, r0
 8001368:	e7e9      	b.n	800133e <__sflush_r+0xda>
 800136a:	bf00      	nop
 800136c:	dfbffffe 	.word	0xdfbffffe

08001370 <_fflush_r>:
 8001370:	b538      	push	{r3, r4, r5, lr}
 8001372:	690b      	ldr	r3, [r1, #16]
 8001374:	4605      	mov	r5, r0
 8001376:	460c      	mov	r4, r1
 8001378:	b913      	cbnz	r3, 8001380 <_fflush_r+0x10>
 800137a:	2500      	movs	r5, #0
 800137c:	4628      	mov	r0, r5
 800137e:	bd38      	pop	{r3, r4, r5, pc}
 8001380:	b118      	cbz	r0, 800138a <_fflush_r+0x1a>
 8001382:	6a03      	ldr	r3, [r0, #32]
 8001384:	b90b      	cbnz	r3, 800138a <_fflush_r+0x1a>
 8001386:	f7ff f9a9 	bl	80006dc <__sinit>
 800138a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f3      	beq.n	800137a <_fflush_r+0xa>
 8001392:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001394:	07d0      	lsls	r0, r2, #31
 8001396:	d404      	bmi.n	80013a2 <_fflush_r+0x32>
 8001398:	0599      	lsls	r1, r3, #22
 800139a:	d402      	bmi.n	80013a2 <_fflush_r+0x32>
 800139c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800139e:	f7ff fb92 	bl	8000ac6 <__retarget_lock_acquire_recursive>
 80013a2:	4628      	mov	r0, r5
 80013a4:	4621      	mov	r1, r4
 80013a6:	f7ff ff5d 	bl	8001264 <__sflush_r>
 80013aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013ac:	07da      	lsls	r2, r3, #31
 80013ae:	4605      	mov	r5, r0
 80013b0:	d4e4      	bmi.n	800137c <_fflush_r+0xc>
 80013b2:	89a3      	ldrh	r3, [r4, #12]
 80013b4:	059b      	lsls	r3, r3, #22
 80013b6:	d4e1      	bmi.n	800137c <_fflush_r+0xc>
 80013b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ba:	f7ff fb85 	bl	8000ac8 <__retarget_lock_release_recursive>
 80013be:	e7dd      	b.n	800137c <_fflush_r+0xc>

080013c0 <__swhatbuf_r>:
 80013c0:	b570      	push	{r4, r5, r6, lr}
 80013c2:	460c      	mov	r4, r1
 80013c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013c8:	2900      	cmp	r1, #0
 80013ca:	b096      	sub	sp, #88	; 0x58
 80013cc:	4615      	mov	r5, r2
 80013ce:	461e      	mov	r6, r3
 80013d0:	da0d      	bge.n	80013ee <__swhatbuf_r+0x2e>
 80013d2:	89a3      	ldrh	r3, [r4, #12]
 80013d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80013d8:	f04f 0100 	mov.w	r1, #0
 80013dc:	bf0c      	ite	eq
 80013de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80013e2:	2340      	movne	r3, #64	; 0x40
 80013e4:	2000      	movs	r0, #0
 80013e6:	6031      	str	r1, [r6, #0]
 80013e8:	602b      	str	r3, [r5, #0]
 80013ea:	b016      	add	sp, #88	; 0x58
 80013ec:	bd70      	pop	{r4, r5, r6, pc}
 80013ee:	466a      	mov	r2, sp
 80013f0:	f000 f848 	bl	8001484 <_fstat_r>
 80013f4:	2800      	cmp	r0, #0
 80013f6:	dbec      	blt.n	80013d2 <__swhatbuf_r+0x12>
 80013f8:	9901      	ldr	r1, [sp, #4]
 80013fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80013fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001402:	4259      	negs	r1, r3
 8001404:	4159      	adcs	r1, r3
 8001406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800140a:	e7eb      	b.n	80013e4 <__swhatbuf_r+0x24>

0800140c <__smakebuf_r>:
 800140c:	898b      	ldrh	r3, [r1, #12]
 800140e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001410:	079d      	lsls	r5, r3, #30
 8001412:	4606      	mov	r6, r0
 8001414:	460c      	mov	r4, r1
 8001416:	d507      	bpl.n	8001428 <__smakebuf_r+0x1c>
 8001418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800141c:	6023      	str	r3, [r4, #0]
 800141e:	6123      	str	r3, [r4, #16]
 8001420:	2301      	movs	r3, #1
 8001422:	6163      	str	r3, [r4, #20]
 8001424:	b002      	add	sp, #8
 8001426:	bd70      	pop	{r4, r5, r6, pc}
 8001428:	ab01      	add	r3, sp, #4
 800142a:	466a      	mov	r2, sp
 800142c:	f7ff ffc8 	bl	80013c0 <__swhatbuf_r>
 8001430:	9900      	ldr	r1, [sp, #0]
 8001432:	4605      	mov	r5, r0
 8001434:	4630      	mov	r0, r6
 8001436:	f7ff fbb5 	bl	8000ba4 <_malloc_r>
 800143a:	b948      	cbnz	r0, 8001450 <__smakebuf_r+0x44>
 800143c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001440:	059a      	lsls	r2, r3, #22
 8001442:	d4ef      	bmi.n	8001424 <__smakebuf_r+0x18>
 8001444:	f023 0303 	bic.w	r3, r3, #3
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	81a3      	strh	r3, [r4, #12]
 800144e:	e7e3      	b.n	8001418 <__smakebuf_r+0xc>
 8001450:	89a3      	ldrh	r3, [r4, #12]
 8001452:	6020      	str	r0, [r4, #0]
 8001454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001458:	81a3      	strh	r3, [r4, #12]
 800145a:	9b00      	ldr	r3, [sp, #0]
 800145c:	6163      	str	r3, [r4, #20]
 800145e:	9b01      	ldr	r3, [sp, #4]
 8001460:	6120      	str	r0, [r4, #16]
 8001462:	b15b      	cbz	r3, 800147c <__smakebuf_r+0x70>
 8001464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001468:	4630      	mov	r0, r6
 800146a:	f000 f81d 	bl	80014a8 <_isatty_r>
 800146e:	b128      	cbz	r0, 800147c <__smakebuf_r+0x70>
 8001470:	89a3      	ldrh	r3, [r4, #12]
 8001472:	f023 0303 	bic.w	r3, r3, #3
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	81a3      	strh	r3, [r4, #12]
 800147c:	89a3      	ldrh	r3, [r4, #12]
 800147e:	431d      	orrs	r5, r3
 8001480:	81a5      	strh	r5, [r4, #12]
 8001482:	e7cf      	b.n	8001424 <__smakebuf_r+0x18>

08001484 <_fstat_r>:
 8001484:	b538      	push	{r3, r4, r5, lr}
 8001486:	4d07      	ldr	r5, [pc, #28]	; (80014a4 <_fstat_r+0x20>)
 8001488:	2300      	movs	r3, #0
 800148a:	4604      	mov	r4, r0
 800148c:	4608      	mov	r0, r1
 800148e:	4611      	mov	r1, r2
 8001490:	602b      	str	r3, [r5, #0]
 8001492:	f7ff f80e 	bl	80004b2 <_fstat>
 8001496:	1c43      	adds	r3, r0, #1
 8001498:	d102      	bne.n	80014a0 <_fstat_r+0x1c>
 800149a:	682b      	ldr	r3, [r5, #0]
 800149c:	b103      	cbz	r3, 80014a0 <_fstat_r+0x1c>
 800149e:	6023      	str	r3, [r4, #0]
 80014a0:	bd38      	pop	{r3, r4, r5, pc}
 80014a2:	bf00      	nop
 80014a4:	200001b8 	.word	0x200001b8

080014a8 <_isatty_r>:
 80014a8:	b538      	push	{r3, r4, r5, lr}
 80014aa:	4d06      	ldr	r5, [pc, #24]	; (80014c4 <_isatty_r+0x1c>)
 80014ac:	2300      	movs	r3, #0
 80014ae:	4604      	mov	r4, r0
 80014b0:	4608      	mov	r0, r1
 80014b2:	602b      	str	r3, [r5, #0]
 80014b4:	f7ff f80d 	bl	80004d2 <_isatty>
 80014b8:	1c43      	adds	r3, r0, #1
 80014ba:	d102      	bne.n	80014c2 <_isatty_r+0x1a>
 80014bc:	682b      	ldr	r3, [r5, #0]
 80014be:	b103      	cbz	r3, 80014c2 <_isatty_r+0x1a>
 80014c0:	6023      	str	r3, [r4, #0]
 80014c2:	bd38      	pop	{r3, r4, r5, pc}
 80014c4:	200001b8 	.word	0x200001b8

080014c8 <_sbrk_r>:
 80014c8:	b538      	push	{r3, r4, r5, lr}
 80014ca:	4d06      	ldr	r5, [pc, #24]	; (80014e4 <_sbrk_r+0x1c>)
 80014cc:	2300      	movs	r3, #0
 80014ce:	4604      	mov	r4, r0
 80014d0:	4608      	mov	r0, r1
 80014d2:	602b      	str	r3, [r5, #0]
 80014d4:	f7ff f816 	bl	8000504 <_sbrk>
 80014d8:	1c43      	adds	r3, r0, #1
 80014da:	d102      	bne.n	80014e2 <_sbrk_r+0x1a>
 80014dc:	682b      	ldr	r3, [r5, #0]
 80014de:	b103      	cbz	r3, 80014e2 <_sbrk_r+0x1a>
 80014e0:	6023      	str	r3, [r4, #0]
 80014e2:	bd38      	pop	{r3, r4, r5, pc}
 80014e4:	200001b8 	.word	0x200001b8

080014e8 <_init>:
 80014e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ea:	bf00      	nop
 80014ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ee:	bc08      	pop	{r3}
 80014f0:	469e      	mov	lr, r3
 80014f2:	4770      	bx	lr

080014f4 <_fini>:
 80014f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014f6:	bf00      	nop
 80014f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014fa:	bc08      	pop	{r3}
 80014fc:	469e      	mov	lr, r3
 80014fe:	4770      	bx	lr
