
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e8c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08001024  08001024  00011024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010b4  080010b4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080010b4  080010b4  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010b4  080010b4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010b4  080010b4  000110b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010b8  080010b8  000110b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080010bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000006c  08001128  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08001128  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b22  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000396  00000000  00000000  00020c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  00020f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000125  00000000  00000000  00021138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cfc  00000000  00000000  0002125d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000169e  00000000  00000000  00023f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009b42  00000000  00000000  000255f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000bc0  00000000  00000000  0002f13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0002fcfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000006c 	.word	0x2000006c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800100c 	.word	0x0800100c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000070 	.word	0x20000070
 80001d4:	0800100c 	.word	0x0800100c

080001d8 <main>:
uint32_t task_handlers[MAX_TASKS];
uint32_t current_task = 0;
/*************************************************************************/

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	enable_processor_faults(); /* Enable faults exception */
 80001dc:	f000 f882 	bl	80002e4 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80001e0:	480c      	ldr	r0, [pc, #48]	; (8000214 <main+0x3c>)
 80001e2:	f000 f8dd 	bl	80003a0 <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 80001e6:	4a0c      	ldr	r2, [pc, #48]	; (8000218 <main+0x40>)
 80001e8:	4b0c      	ldr	r3, [pc, #48]	; (800021c <main+0x44>)
 80001ea:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 80001ec:	4a0c      	ldr	r2, [pc, #48]	; (8000220 <main+0x48>)
 80001ee:	4b0b      	ldr	r3, [pc, #44]	; (800021c <main+0x44>)
 80001f0:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 80001f2:	4a0c      	ldr	r2, [pc, #48]	; (8000224 <main+0x4c>)
 80001f4:	4b09      	ldr	r3, [pc, #36]	; (800021c <main+0x44>)
 80001f6:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 80001f8:	4a0b      	ldr	r2, [pc, #44]	; (8000228 <main+0x50>)
 80001fa:	4b08      	ldr	r3, [pc, #32]	; (800021c <main+0x44>)
 80001fc:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 80001fe:	f000 f8d5 	bl	80003ac <init_tasks_stack>

	init_systick_timer(SYSTICK_CLK);
 8000202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000206:	f000 f88d 	bl	8000324 <init_systick_timer>

	switch_sp_to_psp();
 800020a:	f000 f92f 	bl	800046c <switch_sp_to_psp>

	task1_handler();
 800020e:	f000 f80d 	bl	800022c <task1_handler>
    /* Loop forever */
	for(;;);
 8000212:	e7fe      	b.n	8000212 <main+0x3a>
 8000214:	2001f000 	.word	0x2001f000
 8000218:	0800022d 	.word	0x0800022d
 800021c:	20000088 	.word	0x20000088
 8000220:	0800023d 	.word	0x0800023d
 8000224:	0800024d 	.word	0x0800024d
 8000228:	0800025d 	.word	0x0800025d

0800022c <task1_handler>:
}

void task1_handler(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task 1\n");
 8000230:	4801      	ldr	r0, [pc, #4]	; (8000238 <task1_handler+0xc>)
 8000232:	f000 fb55 	bl	80008e0 <puts>
 8000236:	e7fb      	b.n	8000230 <task1_handler+0x4>
 8000238:	08001024 	.word	0x08001024

0800023c <task2_handler>:
	}
}

void task2_handler(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task 2\n");
 8000240:	4801      	ldr	r0, [pc, #4]	; (8000248 <task2_handler+0xc>)
 8000242:	f000 fb4d 	bl	80008e0 <puts>
 8000246:	e7fb      	b.n	8000240 <task2_handler+0x4>
 8000248:	08001034 	.word	0x08001034

0800024c <task3_handler>:
	}
}

void task3_handler(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task 3\n");
 8000250:	4801      	ldr	r0, [pc, #4]	; (8000258 <task3_handler+0xc>)
 8000252:	f000 fb45 	bl	80008e0 <puts>
 8000256:	e7fb      	b.n	8000250 <task3_handler+0x4>
 8000258:	08001044 	.word	0x08001044

0800025c <task4_handler>:
	}
}

void task4_handler(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task 4\n");
 8000260:	4801      	ldr	r0, [pc, #4]	; (8000268 <task4_handler+0xc>)
 8000262:	f000 fb3d 	bl	80008e0 <puts>
 8000266:	e7fb      	b.n	8000260 <task4_handler+0x4>
 8000268:	08001054 	.word	0x08001054

0800026c <save_psp_value>:
	}
}

void save_psp_value(uint32_t current_psp_value)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	psp_of_stack[current_task] = current_psp_value;
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <save_psp_value+0x20>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4905      	ldr	r1, [pc, #20]	; (8000290 <save_psp_value+0x24>)
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	20000098 	.word	0x20000098
 8000290:	20000000 	.word	0x20000000

08000294 <update_the_next_task>:

void update_the_next_task(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
	current_task++;
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <update_the_next_task+0x24>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3301      	adds	r3, #1
 800029e:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <update_the_next_task+0x24>)
 80002a0:	6013      	str	r3, [r2, #0]
	current_task = current_task % MAX_TASKS;
 80002a2:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <update_the_next_task+0x24>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f003 0303 	and.w	r3, r3, #3
 80002aa:	4a03      	ldr	r2, [pc, #12]	; (80002b8 <update_the_next_task+0x24>)
 80002ac:	6013      	str	r3, [r2, #0]
}
 80002ae:	bf00      	nop
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	20000098 	.word	0x20000098

080002bc <SysTick_Handler>:

__attribute__((naked)) SysTick_Handler(void)
{
	/* Save the context of current task */
	__asm volatile("MRS R0,PSP");				/* Save the current running task PSP's value */
 80002bc:	f3ef 8009 	mrs	r0, PSP
	__asm volatile("STMDB R0!,{R4-R11}");		/* Using that PSP value store SF2(R4-R11) */
 80002c0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("PUSH {LR}");
 80002c4:	b500      	push	{lr}
	__asm volatile("BL save_psp_value");		/* Save the value of PSP for running task */
 80002c6:	f7ff ffd1 	bl	800026c <save_psp_value>

	/* Retrieve the context of next task */
	__asm volatile("BL update_the_next_task");	/* Decide the next task run */
 80002ca:	f7ff ffe3 	bl	8000294 <update_the_next_task>
	__asm volatile("BL get_psp_value");		    /* Get the previous PSP value */
 80002ce:	f000 f8bd 	bl	800044c <get_psp_value>
	__asm volatile("LDMIA R0!,{R4-R11}");		/* Using that PSP value retrieve SF2(R4-R11) */
 80002d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("MSR PSP,R0");				/* Update PSP for the next task and exit */
 80002d6:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 80002da:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 80002de:	4770      	bx	lr
}
 80002e0:	bf00      	nop
 80002e2:	4618      	mov	r0, r3

080002e4 <enable_processor_faults>:

void enable_processor_faults(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
	/* Get base address of SHCRS */
	uint32_t *pSHCRS = (uint32_t *)0xE000ED24U;
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <enable_processor_faults+0x3c>)
 80002ec:	607b      	str	r3, [r7, #4]

	*pSHCRS |= (uint32_t)(1 << 16); /* Enable MemManage fault */
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	601a      	str	r2, [r3, #0]
	*pSHCRS |= (uint32_t)(1 << 17); /* Enable Bus fault */
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	601a      	str	r2, [r3, #0]
	*pSHCRS |= (uint32_t)(1 << 18); /* Enable Usage fault */
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	601a      	str	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000ed24 	.word	0xe000ed24

08000324 <init_systick_timer>:

void init_systick_timer(uint32_t TICK_HZ)
{
 8000324:	b480      	push	{r7}
 8000326:	b087      	sub	sp, #28
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	uint32_t *pSYST_RVR = (uint32_t *)0xE000E014U;
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <init_systick_timer+0x6c>)
 800032e:	617b      	str	r3, [r7, #20]
	uint32_t *pSYST_CVR = (uint32_t *)0xE000E018U;
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <init_systick_timer+0x70>)
 8000332:	613b      	str	r3, [r7, #16]
	uint32_t *pSYST_CSR = (uint32_t *)0xE000E010U;
 8000334:	4b18      	ldr	r3, [pc, #96]	; (8000398 <init_systick_timer+0x74>)
 8000336:	60fb      	str	r3, [r7, #12]
	uint32_t count_value = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	60bb      	str	r3, [r7, #8]

	/* Calculate value to create exception for each 1ms, the parameter N for RVR should be "N-1" to get N cycles */
	count_value = (SYSTICK_TIM_CLK/TICK_HZ) - 1;
 800033c:	4a17      	ldr	r2, [pc, #92]	; (800039c <init_systick_timer+0x78>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	fbb2 f3f3 	udiv	r3, r2, r3
 8000344:	3b01      	subs	r3, #1
 8000346:	60bb      	str	r3, [r7, #8]
	/* Clear reload value for RVR register */
	*pSYST_RVR &= (uint32_t)0x0U;
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
	/* Program reload value for RVR register */
	*pSYST_RVR |= (uint32_t)count_value;
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	431a      	orrs	r2, r3
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	601a      	str	r2, [r3, #0]
	/* Clear current value for CVR register */
	*pSYST_CVR &= (uint32_t)0x0U;
 800035a:	693b      	ldr	r3, [r7, #16]
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
	/* Program Control and Status register */
	*pSYST_CSR |= (uint32_t)(1 << 2); /* Choose processor clock as clock source */
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f043 0204 	orr.w	r2, r3, #4
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	601a      	str	r2, [r3, #0]
	*pSYST_CSR |= (uint32_t)(1 << 1); /* Enable systick exception request */
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f043 0202 	orr.w	r2, r3, #2
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	601a      	str	r2, [r3, #0]
	*pSYST_CSR |= (uint32_t)(1 << 0); /* Enable systick counter */
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f043 0201 	orr.w	r2, r3, #1
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	601a      	str	r2, [r3, #0]
}
 8000384:	bf00      	nop
 8000386:	371c      	adds	r7, #28
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	e000e014 	.word	0xe000e014
 8000394:	e000e018 	.word	0xe000e018
 8000398:	e000e010 	.word	0xe000e010
 800039c:	00f42400 	.word	0x00f42400

080003a0 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 80003a0:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0": :"r"(sched_top_of_stack):);
 80003a2:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80003a6:	4770      	bx	lr
}
 80003a8:	bf00      	nop
	...

080003ac <init_tasks_stack>:

void init_tasks_stack(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
	uint32_t *pPSP;
	uint32_t index = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60bb      	str	r3, [r7, #8]
	uint32_t index_1 = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	607b      	str	r3, [r7, #4]

	for (index = 0; index < MAX_TASKS; index++)
 80003ba:	2300      	movs	r3, #0
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	e037      	b.n	8000430 <init_tasks_stack+0x84>
	{
		pPSP = (uint32_t *)psp_of_stack[index];
 80003c0:	4a20      	ldr	r2, [pc, #128]	; (8000444 <init_tasks_stack+0x98>)
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c8:	60fb      	str	r3, [r7, #12]
		pPSP--; /* xPSR */
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	3b04      	subs	r3, #4
 80003ce:	60fb      	str	r3, [r7, #12]
		*pPSP = INIT_XPSR; /* Set thumb state bit to 1 -> use Thumb instruction */
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003d6:	601a      	str	r2, [r3, #0]

		pPSP--; /* PC */
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	3b04      	subs	r3, #4
 80003dc:	60fb      	str	r3, [r7, #12]
		*pPSP |= task_handlers[index]; /* Initialize return address PC */
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	4919      	ldr	r1, [pc, #100]	; (8000448 <init_tasks_stack+0x9c>)
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003ea:	431a      	orrs	r2, r3
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	601a      	str	r2, [r3, #0]

		pPSP--; /* LR */
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	3b04      	subs	r3, #4
 80003f4:	60fb      	str	r3, [r7, #12]
		*pPSP |= 0xFFFFFFFD; /* Initialize LR to go into thread mode after exit handler, from PSP to PSP */
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f063 0202 	orn	r2, r3, #2
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	601a      	str	r2, [r3, #0]

		for (index_1 = 0; index_1 < 13; index_1++)
 8000402:	2300      	movs	r3, #0
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	e008      	b.n	800041a <init_tasks_stack+0x6e>
		{
			/* Initialize remaining registers */
			pPSP--;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	3b04      	subs	r3, #4
 800040c:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
		for (index_1 = 0; index_1 < 13; index_1++)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3301      	adds	r3, #1
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2b0c      	cmp	r3, #12
 800041e:	d9f3      	bls.n	8000408 <init_tasks_stack+0x5c>
		}

		psp_of_stack[index] = (uint32_t)pPSP;
 8000420:	68fa      	ldr	r2, [r7, #12]
 8000422:	4908      	ldr	r1, [pc, #32]	; (8000444 <init_tasks_stack+0x98>)
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (index = 0; index < MAX_TASKS; index++)
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	3301      	adds	r3, #1
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	2b03      	cmp	r3, #3
 8000434:	d9c4      	bls.n	80003c0 <init_tasks_stack+0x14>
	}
}
 8000436:	bf00      	nop
 8000438:	bf00      	nop
 800043a:	3714      	adds	r7, #20
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	20000000 	.word	0x20000000
 8000448:	20000088 	.word	0x20000088

0800044c <get_psp_value>:

uint32_t get_psp_value(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
	return psp_of_stack[current_task];
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <get_psp_value+0x18>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a04      	ldr	r2, [pc, #16]	; (8000468 <get_psp_value+0x1c>)
 8000456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800045a:	4618      	mov	r0, r3
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	20000098 	.word	0x20000098
 8000468:	20000000 	.word	0x20000000

0800046c <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void)
{
	/* Get PSP value */
	__asm volatile("PUSH {LR}");
 800046c:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 800046e:	f7ff ffed 	bl	800044c <get_psp_value>
	__asm volatile("MSR PSP,R0");
 8000472:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000476:	f85d eb04 	ldr.w	lr, [sp], #4

	/* Switch from MSP to PSP */
	__asm volatile("MOV R0,#0x02");
 800047a:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 800047e:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 8000482:	4770      	bx	lr
}
 8000484:	bf00      	nop
	...

08000488 <UsageFault_Handler>:

void UsageFault_Handler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	printf("Usagefault_Handler\n");
 800048c:	4801      	ldr	r0, [pc, #4]	; (8000494 <UsageFault_Handler+0xc>)
 800048e:	f000 fa27 	bl	80008e0 <puts>
	while(1);
 8000492:	e7fe      	b.n	8000492 <UsageFault_Handler+0xa>
 8000494:	08001064 	.word	0x08001064

08000498 <HardFault_Handler>:
}


void HardFault_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	printf("Hardfault_Handler\n");
 800049c:	4801      	ldr	r0, [pc, #4]	; (80004a4 <HardFault_Handler+0xc>)
 800049e:	f000 fa1f 	bl	80008e0 <puts>
	while(1);
 80004a2:	e7fe      	b.n	80004a2 <HardFault_Handler+0xa>
 80004a4:	08001078 	.word	0x08001078

080004a8 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	printf("MemManage_Handler\n");
 80004ac:	4801      	ldr	r0, [pc, #4]	; (80004b4 <MemManage_Handler+0xc>)
 80004ae:	f000 fa17 	bl	80008e0 <puts>
	while(1);
 80004b2:	e7fe      	b.n	80004b2 <MemManage_Handler+0xa>
 80004b4:	0800108c 	.word	0x0800108c

080004b8 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	printf("BusFault_Handler\n");
 80004bc:	4801      	ldr	r0, [pc, #4]	; (80004c4 <BusFault_Handler+0xc>)
 80004be:	f000 fa0f 	bl	80008e0 <puts>
	while(1);
 80004c2:	e7fe      	b.n	80004c2 <BusFault_Handler+0xa>
 80004c4:	080010a0 	.word	0x080010a0

080004c8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <ITM_SendChar+0x48>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <ITM_SendChar+0x48>)
 80004d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004dc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004de:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <ITM_SendChar+0x4c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <ITM_SendChar+0x4c>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004ea:	bf00      	nop
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f8      	beq.n	80004ec <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	6013      	str	r3, [r2, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	e000edfc 	.word	0xe000edfc
 8000514:	e0000e00 	.word	0xe0000e00

08000518 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	e00a      	b.n	8000540 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800052a:	f3af 8000 	nop.w
 800052e:	4601      	mov	r1, r0
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	1c5a      	adds	r2, r3, #1
 8000534:	60ba      	str	r2, [r7, #8]
 8000536:	b2ca      	uxtb	r2, r1
 8000538:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	3301      	adds	r3, #1
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	429a      	cmp	r2, r3
 8000546:	dbf0      	blt.n	800052a <_read+0x12>
  }

  return len;
 8000548:	687b      	ldr	r3, [r7, #4]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b086      	sub	sp, #24
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	60b9      	str	r1, [r7, #8]
 800055c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
 8000562:	e009      	b.n	8000578 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	60ba      	str	r2, [r7, #8]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ffab 	bl	80004c8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	3301      	adds	r3, #1
 8000576:	617b      	str	r3, [r7, #20]
 8000578:	697a      	ldr	r2, [r7, #20]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	429a      	cmp	r2, r3
 800057e:	dbf1      	blt.n	8000564 <_write+0x12>
  }
  return len;
 8000580:	687b      	ldr	r3, [r7, #4]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3718      	adds	r7, #24
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <_close>:

int _close(int file)
{
 800058a:	b480      	push	{r7}
 800058c:	b083      	sub	sp, #12
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005b2:	605a      	str	r2, [r3, #4]
  return 0;
 80005b4:	2300      	movs	r3, #0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <_isatty>:

int _isatty(int file)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005ca:	2301      	movs	r3, #1
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
	...

080005f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005fc:	4a14      	ldr	r2, [pc, #80]	; (8000650 <_sbrk+0x5c>)
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <_sbrk+0x60>)
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <_sbrk+0x64>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d102      	bne.n	8000616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <_sbrk+0x64>)
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <_sbrk+0x68>)
 8000614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <_sbrk+0x64>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	693a      	ldr	r2, [r7, #16]
 8000620:	429a      	cmp	r2, r3
 8000622:	d207      	bcs.n	8000634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000624:	f000 fa8a 	bl	8000b3c <__errno>
 8000628:	4603      	mov	r3, r0
 800062a:	220c      	movs	r2, #12
 800062c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
 8000632:	e009      	b.n	8000648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <_sbrk+0x64>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <_sbrk+0x64>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	4a05      	ldr	r2, [pc, #20]	; (8000658 <_sbrk+0x64>)
 8000644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000646:	68fb      	ldr	r3, [r7, #12]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3718      	adds	r7, #24
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20020000 	.word	0x20020000
 8000654:	00000400 	.word	0x00000400
 8000658:	2000009c 	.word	0x2000009c
 800065c:	200001f0 	.word	0x200001f0

08000660 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000662:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000664:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <LoopForever+0x6>)
  ldr r1, =_edata
 800066a:	490d      	ldr	r1, [pc, #52]	; (80006a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <LoopForever+0xe>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000680:	4c0a      	ldr	r4, [pc, #40]	; (80006ac <LoopForever+0x16>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800068e:	f000 fa5b 	bl	8000b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000692:	f7ff fda1 	bl	80001d8 <main>

08000696 <LoopForever>:

LoopForever:
  b LoopForever
 8000696:	e7fe      	b.n	8000696 <LoopForever>
  ldr   r0, =_estack
 8000698:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800069c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80006a4:	080010bc 	.word	0x080010bc
  ldr r2, =_sbss
 80006a8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80006ac:	200001ec 	.word	0x200001ec

080006b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC_IRQHandler>
	...

080006b4 <std>:
 80006b4:	2300      	movs	r3, #0
 80006b6:	b510      	push	{r4, lr}
 80006b8:	4604      	mov	r4, r0
 80006ba:	e9c0 3300 	strd	r3, r3, [r0]
 80006be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006c2:	6083      	str	r3, [r0, #8]
 80006c4:	8181      	strh	r1, [r0, #12]
 80006c6:	6643      	str	r3, [r0, #100]	; 0x64
 80006c8:	81c2      	strh	r2, [r0, #14]
 80006ca:	6183      	str	r3, [r0, #24]
 80006cc:	4619      	mov	r1, r3
 80006ce:	2208      	movs	r2, #8
 80006d0:	305c      	adds	r0, #92	; 0x5c
 80006d2:	f000 f9e5 	bl	8000aa0 <memset>
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <std+0x58>)
 80006d8:	6263      	str	r3, [r4, #36]	; 0x24
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <std+0x5c>)
 80006dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <std+0x60>)
 80006e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <std+0x64>)
 80006e4:	6323      	str	r3, [r4, #48]	; 0x30
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <std+0x68>)
 80006e8:	6224      	str	r4, [r4, #32]
 80006ea:	429c      	cmp	r4, r3
 80006ec:	d006      	beq.n	80006fc <std+0x48>
 80006ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80006f2:	4294      	cmp	r4, r2
 80006f4:	d002      	beq.n	80006fc <std+0x48>
 80006f6:	33d0      	adds	r3, #208	; 0xd0
 80006f8:	429c      	cmp	r4, r3
 80006fa:	d105      	bne.n	8000708 <std+0x54>
 80006fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000704:	f000 ba44 	b.w	8000b90 <__retarget_lock_init_recursive>
 8000708:	bd10      	pop	{r4, pc}
 800070a:	bf00      	nop
 800070c:	080008f1 	.word	0x080008f1
 8000710:	08000913 	.word	0x08000913
 8000714:	0800094b 	.word	0x0800094b
 8000718:	0800096f 	.word	0x0800096f
 800071c:	200000a0 	.word	0x200000a0

08000720 <stdio_exit_handler>:
 8000720:	4a02      	ldr	r2, [pc, #8]	; (800072c <stdio_exit_handler+0xc>)
 8000722:	4903      	ldr	r1, [pc, #12]	; (8000730 <stdio_exit_handler+0x10>)
 8000724:	4803      	ldr	r0, [pc, #12]	; (8000734 <stdio_exit_handler+0x14>)
 8000726:	f000 b869 	b.w	80007fc <_fwalk_sglue>
 800072a:	bf00      	nop
 800072c:	20000010 	.word	0x20000010
 8000730:	08000e95 	.word	0x08000e95
 8000734:	2000001c 	.word	0x2000001c

08000738 <cleanup_stdio>:
 8000738:	6841      	ldr	r1, [r0, #4]
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <cleanup_stdio+0x34>)
 800073c:	4299      	cmp	r1, r3
 800073e:	b510      	push	{r4, lr}
 8000740:	4604      	mov	r4, r0
 8000742:	d001      	beq.n	8000748 <cleanup_stdio+0x10>
 8000744:	f000 fba6 	bl	8000e94 <_fflush_r>
 8000748:	68a1      	ldr	r1, [r4, #8]
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <cleanup_stdio+0x38>)
 800074c:	4299      	cmp	r1, r3
 800074e:	d002      	beq.n	8000756 <cleanup_stdio+0x1e>
 8000750:	4620      	mov	r0, r4
 8000752:	f000 fb9f 	bl	8000e94 <_fflush_r>
 8000756:	68e1      	ldr	r1, [r4, #12]
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <cleanup_stdio+0x3c>)
 800075a:	4299      	cmp	r1, r3
 800075c:	d004      	beq.n	8000768 <cleanup_stdio+0x30>
 800075e:	4620      	mov	r0, r4
 8000760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000764:	f000 bb96 	b.w	8000e94 <_fflush_r>
 8000768:	bd10      	pop	{r4, pc}
 800076a:	bf00      	nop
 800076c:	200000a0 	.word	0x200000a0
 8000770:	20000108 	.word	0x20000108
 8000774:	20000170 	.word	0x20000170

08000778 <global_stdio_init.part.0>:
 8000778:	b510      	push	{r4, lr}
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <global_stdio_init.part.0+0x30>)
 800077c:	4c0b      	ldr	r4, [pc, #44]	; (80007ac <global_stdio_init.part.0+0x34>)
 800077e:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <global_stdio_init.part.0+0x38>)
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	4620      	mov	r0, r4
 8000784:	2200      	movs	r2, #0
 8000786:	2104      	movs	r1, #4
 8000788:	f7ff ff94 	bl	80006b4 <std>
 800078c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000790:	2201      	movs	r2, #1
 8000792:	2109      	movs	r1, #9
 8000794:	f7ff ff8e 	bl	80006b4 <std>
 8000798:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800079c:	2202      	movs	r2, #2
 800079e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007a2:	2112      	movs	r1, #18
 80007a4:	f7ff bf86 	b.w	80006b4 <std>
 80007a8:	200001d8 	.word	0x200001d8
 80007ac:	200000a0 	.word	0x200000a0
 80007b0:	08000721 	.word	0x08000721

080007b4 <__sfp_lock_acquire>:
 80007b4:	4801      	ldr	r0, [pc, #4]	; (80007bc <__sfp_lock_acquire+0x8>)
 80007b6:	f000 b9ec 	b.w	8000b92 <__retarget_lock_acquire_recursive>
 80007ba:	bf00      	nop
 80007bc:	200001e1 	.word	0x200001e1

080007c0 <__sfp_lock_release>:
 80007c0:	4801      	ldr	r0, [pc, #4]	; (80007c8 <__sfp_lock_release+0x8>)
 80007c2:	f000 b9e7 	b.w	8000b94 <__retarget_lock_release_recursive>
 80007c6:	bf00      	nop
 80007c8:	200001e1 	.word	0x200001e1

080007cc <__sinit>:
 80007cc:	b510      	push	{r4, lr}
 80007ce:	4604      	mov	r4, r0
 80007d0:	f7ff fff0 	bl	80007b4 <__sfp_lock_acquire>
 80007d4:	6a23      	ldr	r3, [r4, #32]
 80007d6:	b11b      	cbz	r3, 80007e0 <__sinit+0x14>
 80007d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007dc:	f7ff bff0 	b.w	80007c0 <__sfp_lock_release>
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <__sinit+0x28>)
 80007e2:	6223      	str	r3, [r4, #32]
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <__sinit+0x2c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f5      	bne.n	80007d8 <__sinit+0xc>
 80007ec:	f7ff ffc4 	bl	8000778 <global_stdio_init.part.0>
 80007f0:	e7f2      	b.n	80007d8 <__sinit+0xc>
 80007f2:	bf00      	nop
 80007f4:	08000739 	.word	0x08000739
 80007f8:	200001d8 	.word	0x200001d8

080007fc <_fwalk_sglue>:
 80007fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000800:	4607      	mov	r7, r0
 8000802:	4688      	mov	r8, r1
 8000804:	4614      	mov	r4, r2
 8000806:	2600      	movs	r6, #0
 8000808:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800080c:	f1b9 0901 	subs.w	r9, r9, #1
 8000810:	d505      	bpl.n	800081e <_fwalk_sglue+0x22>
 8000812:	6824      	ldr	r4, [r4, #0]
 8000814:	2c00      	cmp	r4, #0
 8000816:	d1f7      	bne.n	8000808 <_fwalk_sglue+0xc>
 8000818:	4630      	mov	r0, r6
 800081a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800081e:	89ab      	ldrh	r3, [r5, #12]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d907      	bls.n	8000834 <_fwalk_sglue+0x38>
 8000824:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000828:	3301      	adds	r3, #1
 800082a:	d003      	beq.n	8000834 <_fwalk_sglue+0x38>
 800082c:	4629      	mov	r1, r5
 800082e:	4638      	mov	r0, r7
 8000830:	47c0      	blx	r8
 8000832:	4306      	orrs	r6, r0
 8000834:	3568      	adds	r5, #104	; 0x68
 8000836:	e7e9      	b.n	800080c <_fwalk_sglue+0x10>

08000838 <_puts_r>:
 8000838:	6a03      	ldr	r3, [r0, #32]
 800083a:	b570      	push	{r4, r5, r6, lr}
 800083c:	6884      	ldr	r4, [r0, #8]
 800083e:	4605      	mov	r5, r0
 8000840:	460e      	mov	r6, r1
 8000842:	b90b      	cbnz	r3, 8000848 <_puts_r+0x10>
 8000844:	f7ff ffc2 	bl	80007cc <__sinit>
 8000848:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800084a:	07db      	lsls	r3, r3, #31
 800084c:	d405      	bmi.n	800085a <_puts_r+0x22>
 800084e:	89a3      	ldrh	r3, [r4, #12]
 8000850:	0598      	lsls	r0, r3, #22
 8000852:	d402      	bmi.n	800085a <_puts_r+0x22>
 8000854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000856:	f000 f99c 	bl	8000b92 <__retarget_lock_acquire_recursive>
 800085a:	89a3      	ldrh	r3, [r4, #12]
 800085c:	0719      	lsls	r1, r3, #28
 800085e:	d513      	bpl.n	8000888 <_puts_r+0x50>
 8000860:	6923      	ldr	r3, [r4, #16]
 8000862:	b18b      	cbz	r3, 8000888 <_puts_r+0x50>
 8000864:	3e01      	subs	r6, #1
 8000866:	68a3      	ldr	r3, [r4, #8]
 8000868:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800086c:	3b01      	subs	r3, #1
 800086e:	60a3      	str	r3, [r4, #8]
 8000870:	b9e9      	cbnz	r1, 80008ae <_puts_r+0x76>
 8000872:	2b00      	cmp	r3, #0
 8000874:	da2e      	bge.n	80008d4 <_puts_r+0x9c>
 8000876:	4622      	mov	r2, r4
 8000878:	210a      	movs	r1, #10
 800087a:	4628      	mov	r0, r5
 800087c:	f000 f87b 	bl	8000976 <__swbuf_r>
 8000880:	3001      	adds	r0, #1
 8000882:	d007      	beq.n	8000894 <_puts_r+0x5c>
 8000884:	250a      	movs	r5, #10
 8000886:	e007      	b.n	8000898 <_puts_r+0x60>
 8000888:	4621      	mov	r1, r4
 800088a:	4628      	mov	r0, r5
 800088c:	f000 f8b0 	bl	80009f0 <__swsetup_r>
 8000890:	2800      	cmp	r0, #0
 8000892:	d0e7      	beq.n	8000864 <_puts_r+0x2c>
 8000894:	f04f 35ff 	mov.w	r5, #4294967295
 8000898:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800089a:	07da      	lsls	r2, r3, #31
 800089c:	d405      	bmi.n	80008aa <_puts_r+0x72>
 800089e:	89a3      	ldrh	r3, [r4, #12]
 80008a0:	059b      	lsls	r3, r3, #22
 80008a2:	d402      	bmi.n	80008aa <_puts_r+0x72>
 80008a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008a6:	f000 f975 	bl	8000b94 <__retarget_lock_release_recursive>
 80008aa:	4628      	mov	r0, r5
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	da04      	bge.n	80008bc <_puts_r+0x84>
 80008b2:	69a2      	ldr	r2, [r4, #24]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	dc06      	bgt.n	80008c6 <_puts_r+0x8e>
 80008b8:	290a      	cmp	r1, #10
 80008ba:	d004      	beq.n	80008c6 <_puts_r+0x8e>
 80008bc:	6823      	ldr	r3, [r4, #0]
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	6022      	str	r2, [r4, #0]
 80008c2:	7019      	strb	r1, [r3, #0]
 80008c4:	e7cf      	b.n	8000866 <_puts_r+0x2e>
 80008c6:	4622      	mov	r2, r4
 80008c8:	4628      	mov	r0, r5
 80008ca:	f000 f854 	bl	8000976 <__swbuf_r>
 80008ce:	3001      	adds	r0, #1
 80008d0:	d1c9      	bne.n	8000866 <_puts_r+0x2e>
 80008d2:	e7df      	b.n	8000894 <_puts_r+0x5c>
 80008d4:	6823      	ldr	r3, [r4, #0]
 80008d6:	250a      	movs	r5, #10
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	6022      	str	r2, [r4, #0]
 80008dc:	701d      	strb	r5, [r3, #0]
 80008de:	e7db      	b.n	8000898 <_puts_r+0x60>

080008e0 <puts>:
 80008e0:	4b02      	ldr	r3, [pc, #8]	; (80008ec <puts+0xc>)
 80008e2:	4601      	mov	r1, r0
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	f7ff bfa7 	b.w	8000838 <_puts_r>
 80008ea:	bf00      	nop
 80008ec:	20000068 	.word	0x20000068

080008f0 <__sread>:
 80008f0:	b510      	push	{r4, lr}
 80008f2:	460c      	mov	r4, r1
 80008f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008f8:	f000 f8fc 	bl	8000af4 <_read_r>
 80008fc:	2800      	cmp	r0, #0
 80008fe:	bfab      	itete	ge
 8000900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000902:	89a3      	ldrhlt	r3, [r4, #12]
 8000904:	181b      	addge	r3, r3, r0
 8000906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800090a:	bfac      	ite	ge
 800090c:	6563      	strge	r3, [r4, #84]	; 0x54
 800090e:	81a3      	strhlt	r3, [r4, #12]
 8000910:	bd10      	pop	{r4, pc}

08000912 <__swrite>:
 8000912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000916:	461f      	mov	r7, r3
 8000918:	898b      	ldrh	r3, [r1, #12]
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	4605      	mov	r5, r0
 800091e:	460c      	mov	r4, r1
 8000920:	4616      	mov	r6, r2
 8000922:	d505      	bpl.n	8000930 <__swrite+0x1e>
 8000924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000928:	2302      	movs	r3, #2
 800092a:	2200      	movs	r2, #0
 800092c:	f000 f8d0 	bl	8000ad0 <_lseek_r>
 8000930:	89a3      	ldrh	r3, [r4, #12]
 8000932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800093a:	81a3      	strh	r3, [r4, #12]
 800093c:	4632      	mov	r2, r6
 800093e:	463b      	mov	r3, r7
 8000940:	4628      	mov	r0, r5
 8000942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000946:	f000 b8e7 	b.w	8000b18 <_write_r>

0800094a <__sseek>:
 800094a:	b510      	push	{r4, lr}
 800094c:	460c      	mov	r4, r1
 800094e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000952:	f000 f8bd 	bl	8000ad0 <_lseek_r>
 8000956:	1c43      	adds	r3, r0, #1
 8000958:	89a3      	ldrh	r3, [r4, #12]
 800095a:	bf15      	itete	ne
 800095c:	6560      	strne	r0, [r4, #84]	; 0x54
 800095e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000966:	81a3      	strheq	r3, [r4, #12]
 8000968:	bf18      	it	ne
 800096a:	81a3      	strhne	r3, [r4, #12]
 800096c:	bd10      	pop	{r4, pc}

0800096e <__sclose>:
 800096e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000972:	f000 b89d 	b.w	8000ab0 <_close_r>

08000976 <__swbuf_r>:
 8000976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000978:	460e      	mov	r6, r1
 800097a:	4614      	mov	r4, r2
 800097c:	4605      	mov	r5, r0
 800097e:	b118      	cbz	r0, 8000988 <__swbuf_r+0x12>
 8000980:	6a03      	ldr	r3, [r0, #32]
 8000982:	b90b      	cbnz	r3, 8000988 <__swbuf_r+0x12>
 8000984:	f7ff ff22 	bl	80007cc <__sinit>
 8000988:	69a3      	ldr	r3, [r4, #24]
 800098a:	60a3      	str	r3, [r4, #8]
 800098c:	89a3      	ldrh	r3, [r4, #12]
 800098e:	071a      	lsls	r2, r3, #28
 8000990:	d525      	bpl.n	80009de <__swbuf_r+0x68>
 8000992:	6923      	ldr	r3, [r4, #16]
 8000994:	b31b      	cbz	r3, 80009de <__swbuf_r+0x68>
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	6922      	ldr	r2, [r4, #16]
 800099a:	1a98      	subs	r0, r3, r2
 800099c:	6963      	ldr	r3, [r4, #20]
 800099e:	b2f6      	uxtb	r6, r6
 80009a0:	4283      	cmp	r3, r0
 80009a2:	4637      	mov	r7, r6
 80009a4:	dc04      	bgt.n	80009b0 <__swbuf_r+0x3a>
 80009a6:	4621      	mov	r1, r4
 80009a8:	4628      	mov	r0, r5
 80009aa:	f000 fa73 	bl	8000e94 <_fflush_r>
 80009ae:	b9e0      	cbnz	r0, 80009ea <__swbuf_r+0x74>
 80009b0:	68a3      	ldr	r3, [r4, #8]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	60a3      	str	r3, [r4, #8]
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	6022      	str	r2, [r4, #0]
 80009bc:	701e      	strb	r6, [r3, #0]
 80009be:	6962      	ldr	r2, [r4, #20]
 80009c0:	1c43      	adds	r3, r0, #1
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d004      	beq.n	80009d0 <__swbuf_r+0x5a>
 80009c6:	89a3      	ldrh	r3, [r4, #12]
 80009c8:	07db      	lsls	r3, r3, #31
 80009ca:	d506      	bpl.n	80009da <__swbuf_r+0x64>
 80009cc:	2e0a      	cmp	r6, #10
 80009ce:	d104      	bne.n	80009da <__swbuf_r+0x64>
 80009d0:	4621      	mov	r1, r4
 80009d2:	4628      	mov	r0, r5
 80009d4:	f000 fa5e 	bl	8000e94 <_fflush_r>
 80009d8:	b938      	cbnz	r0, 80009ea <__swbuf_r+0x74>
 80009da:	4638      	mov	r0, r7
 80009dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009de:	4621      	mov	r1, r4
 80009e0:	4628      	mov	r0, r5
 80009e2:	f000 f805 	bl	80009f0 <__swsetup_r>
 80009e6:	2800      	cmp	r0, #0
 80009e8:	d0d5      	beq.n	8000996 <__swbuf_r+0x20>
 80009ea:	f04f 37ff 	mov.w	r7, #4294967295
 80009ee:	e7f4      	b.n	80009da <__swbuf_r+0x64>

080009f0 <__swsetup_r>:
 80009f0:	b538      	push	{r3, r4, r5, lr}
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <__swsetup_r+0xac>)
 80009f4:	4605      	mov	r5, r0
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	460c      	mov	r4, r1
 80009fa:	b118      	cbz	r0, 8000a04 <__swsetup_r+0x14>
 80009fc:	6a03      	ldr	r3, [r0, #32]
 80009fe:	b90b      	cbnz	r3, 8000a04 <__swsetup_r+0x14>
 8000a00:	f7ff fee4 	bl	80007cc <__sinit>
 8000a04:	89a3      	ldrh	r3, [r4, #12]
 8000a06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a0a:	0718      	lsls	r0, r3, #28
 8000a0c:	d422      	bmi.n	8000a54 <__swsetup_r+0x64>
 8000a0e:	06d9      	lsls	r1, r3, #27
 8000a10:	d407      	bmi.n	8000a22 <__swsetup_r+0x32>
 8000a12:	2309      	movs	r3, #9
 8000a14:	602b      	str	r3, [r5, #0]
 8000a16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a1a:	81a3      	strh	r3, [r4, #12]
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	e034      	b.n	8000a8c <__swsetup_r+0x9c>
 8000a22:	0758      	lsls	r0, r3, #29
 8000a24:	d512      	bpl.n	8000a4c <__swsetup_r+0x5c>
 8000a26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a28:	b141      	cbz	r1, 8000a3c <__swsetup_r+0x4c>
 8000a2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d002      	beq.n	8000a38 <__swsetup_r+0x48>
 8000a32:	4628      	mov	r0, r5
 8000a34:	f000 f8b0 	bl	8000b98 <_free_r>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	6363      	str	r3, [r4, #52]	; 0x34
 8000a3c:	89a3      	ldrh	r3, [r4, #12]
 8000a3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a42:	81a3      	strh	r3, [r4, #12]
 8000a44:	2300      	movs	r3, #0
 8000a46:	6063      	str	r3, [r4, #4]
 8000a48:	6923      	ldr	r3, [r4, #16]
 8000a4a:	6023      	str	r3, [r4, #0]
 8000a4c:	89a3      	ldrh	r3, [r4, #12]
 8000a4e:	f043 0308 	orr.w	r3, r3, #8
 8000a52:	81a3      	strh	r3, [r4, #12]
 8000a54:	6923      	ldr	r3, [r4, #16]
 8000a56:	b94b      	cbnz	r3, 8000a6c <__swsetup_r+0x7c>
 8000a58:	89a3      	ldrh	r3, [r4, #12]
 8000a5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a62:	d003      	beq.n	8000a6c <__swsetup_r+0x7c>
 8000a64:	4621      	mov	r1, r4
 8000a66:	4628      	mov	r0, r5
 8000a68:	f000 fa62 	bl	8000f30 <__smakebuf_r>
 8000a6c:	89a0      	ldrh	r0, [r4, #12]
 8000a6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a72:	f010 0301 	ands.w	r3, r0, #1
 8000a76:	d00a      	beq.n	8000a8e <__swsetup_r+0x9e>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60a3      	str	r3, [r4, #8]
 8000a7c:	6963      	ldr	r3, [r4, #20]
 8000a7e:	425b      	negs	r3, r3
 8000a80:	61a3      	str	r3, [r4, #24]
 8000a82:	6923      	ldr	r3, [r4, #16]
 8000a84:	b943      	cbnz	r3, 8000a98 <__swsetup_r+0xa8>
 8000a86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a8a:	d1c4      	bne.n	8000a16 <__swsetup_r+0x26>
 8000a8c:	bd38      	pop	{r3, r4, r5, pc}
 8000a8e:	0781      	lsls	r1, r0, #30
 8000a90:	bf58      	it	pl
 8000a92:	6963      	ldrpl	r3, [r4, #20]
 8000a94:	60a3      	str	r3, [r4, #8]
 8000a96:	e7f4      	b.n	8000a82 <__swsetup_r+0x92>
 8000a98:	2000      	movs	r0, #0
 8000a9a:	e7f7      	b.n	8000a8c <__swsetup_r+0x9c>
 8000a9c:	20000068 	.word	0x20000068

08000aa0 <memset>:
 8000aa0:	4402      	add	r2, r0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d100      	bne.n	8000aaa <memset+0xa>
 8000aa8:	4770      	bx	lr
 8000aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8000aae:	e7f9      	b.n	8000aa4 <memset+0x4>

08000ab0 <_close_r>:
 8000ab0:	b538      	push	{r3, r4, r5, lr}
 8000ab2:	4d06      	ldr	r5, [pc, #24]	; (8000acc <_close_r+0x1c>)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	4608      	mov	r0, r1
 8000aba:	602b      	str	r3, [r5, #0]
 8000abc:	f7ff fd65 	bl	800058a <_close>
 8000ac0:	1c43      	adds	r3, r0, #1
 8000ac2:	d102      	bne.n	8000aca <_close_r+0x1a>
 8000ac4:	682b      	ldr	r3, [r5, #0]
 8000ac6:	b103      	cbz	r3, 8000aca <_close_r+0x1a>
 8000ac8:	6023      	str	r3, [r4, #0]
 8000aca:	bd38      	pop	{r3, r4, r5, pc}
 8000acc:	200001dc 	.word	0x200001dc

08000ad0 <_lseek_r>:
 8000ad0:	b538      	push	{r3, r4, r5, lr}
 8000ad2:	4d07      	ldr	r5, [pc, #28]	; (8000af0 <_lseek_r+0x20>)
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	4611      	mov	r1, r2
 8000ada:	2200      	movs	r2, #0
 8000adc:	602a      	str	r2, [r5, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	f7ff fd7a 	bl	80005d8 <_lseek>
 8000ae4:	1c43      	adds	r3, r0, #1
 8000ae6:	d102      	bne.n	8000aee <_lseek_r+0x1e>
 8000ae8:	682b      	ldr	r3, [r5, #0]
 8000aea:	b103      	cbz	r3, 8000aee <_lseek_r+0x1e>
 8000aec:	6023      	str	r3, [r4, #0]
 8000aee:	bd38      	pop	{r3, r4, r5, pc}
 8000af0:	200001dc 	.word	0x200001dc

08000af4 <_read_r>:
 8000af4:	b538      	push	{r3, r4, r5, lr}
 8000af6:	4d07      	ldr	r5, [pc, #28]	; (8000b14 <_read_r+0x20>)
 8000af8:	4604      	mov	r4, r0
 8000afa:	4608      	mov	r0, r1
 8000afc:	4611      	mov	r1, r2
 8000afe:	2200      	movs	r2, #0
 8000b00:	602a      	str	r2, [r5, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	f7ff fd08 	bl	8000518 <_read>
 8000b08:	1c43      	adds	r3, r0, #1
 8000b0a:	d102      	bne.n	8000b12 <_read_r+0x1e>
 8000b0c:	682b      	ldr	r3, [r5, #0]
 8000b0e:	b103      	cbz	r3, 8000b12 <_read_r+0x1e>
 8000b10:	6023      	str	r3, [r4, #0]
 8000b12:	bd38      	pop	{r3, r4, r5, pc}
 8000b14:	200001dc 	.word	0x200001dc

08000b18 <_write_r>:
 8000b18:	b538      	push	{r3, r4, r5, lr}
 8000b1a:	4d07      	ldr	r5, [pc, #28]	; (8000b38 <_write_r+0x20>)
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	4608      	mov	r0, r1
 8000b20:	4611      	mov	r1, r2
 8000b22:	2200      	movs	r2, #0
 8000b24:	602a      	str	r2, [r5, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	f7ff fd13 	bl	8000552 <_write>
 8000b2c:	1c43      	adds	r3, r0, #1
 8000b2e:	d102      	bne.n	8000b36 <_write_r+0x1e>
 8000b30:	682b      	ldr	r3, [r5, #0]
 8000b32:	b103      	cbz	r3, 8000b36 <_write_r+0x1e>
 8000b34:	6023      	str	r3, [r4, #0]
 8000b36:	bd38      	pop	{r3, r4, r5, pc}
 8000b38:	200001dc 	.word	0x200001dc

08000b3c <__errno>:
 8000b3c:	4b01      	ldr	r3, [pc, #4]	; (8000b44 <__errno+0x8>)
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000068 	.word	0x20000068

08000b48 <__libc_init_array>:
 8000b48:	b570      	push	{r4, r5, r6, lr}
 8000b4a:	4d0d      	ldr	r5, [pc, #52]	; (8000b80 <__libc_init_array+0x38>)
 8000b4c:	4c0d      	ldr	r4, [pc, #52]	; (8000b84 <__libc_init_array+0x3c>)
 8000b4e:	1b64      	subs	r4, r4, r5
 8000b50:	10a4      	asrs	r4, r4, #2
 8000b52:	2600      	movs	r6, #0
 8000b54:	42a6      	cmp	r6, r4
 8000b56:	d109      	bne.n	8000b6c <__libc_init_array+0x24>
 8000b58:	4d0b      	ldr	r5, [pc, #44]	; (8000b88 <__libc_init_array+0x40>)
 8000b5a:	4c0c      	ldr	r4, [pc, #48]	; (8000b8c <__libc_init_array+0x44>)
 8000b5c:	f000 fa56 	bl	800100c <_init>
 8000b60:	1b64      	subs	r4, r4, r5
 8000b62:	10a4      	asrs	r4, r4, #2
 8000b64:	2600      	movs	r6, #0
 8000b66:	42a6      	cmp	r6, r4
 8000b68:	d105      	bne.n	8000b76 <__libc_init_array+0x2e>
 8000b6a:	bd70      	pop	{r4, r5, r6, pc}
 8000b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b70:	4798      	blx	r3
 8000b72:	3601      	adds	r6, #1
 8000b74:	e7ee      	b.n	8000b54 <__libc_init_array+0xc>
 8000b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b7a:	4798      	blx	r3
 8000b7c:	3601      	adds	r6, #1
 8000b7e:	e7f2      	b.n	8000b66 <__libc_init_array+0x1e>
 8000b80:	080010b4 	.word	0x080010b4
 8000b84:	080010b4 	.word	0x080010b4
 8000b88:	080010b4 	.word	0x080010b4
 8000b8c:	080010b8 	.word	0x080010b8

08000b90 <__retarget_lock_init_recursive>:
 8000b90:	4770      	bx	lr

08000b92 <__retarget_lock_acquire_recursive>:
 8000b92:	4770      	bx	lr

08000b94 <__retarget_lock_release_recursive>:
 8000b94:	4770      	bx	lr
	...

08000b98 <_free_r>:
 8000b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d044      	beq.n	8000c28 <_free_r+0x90>
 8000b9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ba2:	9001      	str	r0, [sp, #4]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f1a1 0404 	sub.w	r4, r1, #4
 8000baa:	bfb8      	it	lt
 8000bac:	18e4      	addlt	r4, r4, r3
 8000bae:	f000 f8df 	bl	8000d70 <__malloc_lock>
 8000bb2:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <_free_r+0x94>)
 8000bb4:	9801      	ldr	r0, [sp, #4]
 8000bb6:	6813      	ldr	r3, [r2, #0]
 8000bb8:	b933      	cbnz	r3, 8000bc8 <_free_r+0x30>
 8000bba:	6063      	str	r3, [r4, #4]
 8000bbc:	6014      	str	r4, [r2, #0]
 8000bbe:	b003      	add	sp, #12
 8000bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000bc4:	f000 b8da 	b.w	8000d7c <__malloc_unlock>
 8000bc8:	42a3      	cmp	r3, r4
 8000bca:	d908      	bls.n	8000bde <_free_r+0x46>
 8000bcc:	6825      	ldr	r5, [r4, #0]
 8000bce:	1961      	adds	r1, r4, r5
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	bf01      	itttt	eq
 8000bd4:	6819      	ldreq	r1, [r3, #0]
 8000bd6:	685b      	ldreq	r3, [r3, #4]
 8000bd8:	1949      	addeq	r1, r1, r5
 8000bda:	6021      	streq	r1, [r4, #0]
 8000bdc:	e7ed      	b.n	8000bba <_free_r+0x22>
 8000bde:	461a      	mov	r2, r3
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	b10b      	cbz	r3, 8000be8 <_free_r+0x50>
 8000be4:	42a3      	cmp	r3, r4
 8000be6:	d9fa      	bls.n	8000bde <_free_r+0x46>
 8000be8:	6811      	ldr	r1, [r2, #0]
 8000bea:	1855      	adds	r5, r2, r1
 8000bec:	42a5      	cmp	r5, r4
 8000bee:	d10b      	bne.n	8000c08 <_free_r+0x70>
 8000bf0:	6824      	ldr	r4, [r4, #0]
 8000bf2:	4421      	add	r1, r4
 8000bf4:	1854      	adds	r4, r2, r1
 8000bf6:	42a3      	cmp	r3, r4
 8000bf8:	6011      	str	r1, [r2, #0]
 8000bfa:	d1e0      	bne.n	8000bbe <_free_r+0x26>
 8000bfc:	681c      	ldr	r4, [r3, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	6053      	str	r3, [r2, #4]
 8000c02:	440c      	add	r4, r1
 8000c04:	6014      	str	r4, [r2, #0]
 8000c06:	e7da      	b.n	8000bbe <_free_r+0x26>
 8000c08:	d902      	bls.n	8000c10 <_free_r+0x78>
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	6003      	str	r3, [r0, #0]
 8000c0e:	e7d6      	b.n	8000bbe <_free_r+0x26>
 8000c10:	6825      	ldr	r5, [r4, #0]
 8000c12:	1961      	adds	r1, r4, r5
 8000c14:	428b      	cmp	r3, r1
 8000c16:	bf04      	itt	eq
 8000c18:	6819      	ldreq	r1, [r3, #0]
 8000c1a:	685b      	ldreq	r3, [r3, #4]
 8000c1c:	6063      	str	r3, [r4, #4]
 8000c1e:	bf04      	itt	eq
 8000c20:	1949      	addeq	r1, r1, r5
 8000c22:	6021      	streq	r1, [r4, #0]
 8000c24:	6054      	str	r4, [r2, #4]
 8000c26:	e7ca      	b.n	8000bbe <_free_r+0x26>
 8000c28:	b003      	add	sp, #12
 8000c2a:	bd30      	pop	{r4, r5, pc}
 8000c2c:	200001e4 	.word	0x200001e4

08000c30 <sbrk_aligned>:
 8000c30:	b570      	push	{r4, r5, r6, lr}
 8000c32:	4e0e      	ldr	r6, [pc, #56]	; (8000c6c <sbrk_aligned+0x3c>)
 8000c34:	460c      	mov	r4, r1
 8000c36:	6831      	ldr	r1, [r6, #0]
 8000c38:	4605      	mov	r5, r0
 8000c3a:	b911      	cbnz	r1, 8000c42 <sbrk_aligned+0x12>
 8000c3c:	f000 f9d6 	bl	8000fec <_sbrk_r>
 8000c40:	6030      	str	r0, [r6, #0]
 8000c42:	4621      	mov	r1, r4
 8000c44:	4628      	mov	r0, r5
 8000c46:	f000 f9d1 	bl	8000fec <_sbrk_r>
 8000c4a:	1c43      	adds	r3, r0, #1
 8000c4c:	d00a      	beq.n	8000c64 <sbrk_aligned+0x34>
 8000c4e:	1cc4      	adds	r4, r0, #3
 8000c50:	f024 0403 	bic.w	r4, r4, #3
 8000c54:	42a0      	cmp	r0, r4
 8000c56:	d007      	beq.n	8000c68 <sbrk_aligned+0x38>
 8000c58:	1a21      	subs	r1, r4, r0
 8000c5a:	4628      	mov	r0, r5
 8000c5c:	f000 f9c6 	bl	8000fec <_sbrk_r>
 8000c60:	3001      	adds	r0, #1
 8000c62:	d101      	bne.n	8000c68 <sbrk_aligned+0x38>
 8000c64:	f04f 34ff 	mov.w	r4, #4294967295
 8000c68:	4620      	mov	r0, r4
 8000c6a:	bd70      	pop	{r4, r5, r6, pc}
 8000c6c:	200001e8 	.word	0x200001e8

08000c70 <_malloc_r>:
 8000c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c74:	1ccd      	adds	r5, r1, #3
 8000c76:	f025 0503 	bic.w	r5, r5, #3
 8000c7a:	3508      	adds	r5, #8
 8000c7c:	2d0c      	cmp	r5, #12
 8000c7e:	bf38      	it	cc
 8000c80:	250c      	movcc	r5, #12
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	4607      	mov	r7, r0
 8000c86:	db01      	blt.n	8000c8c <_malloc_r+0x1c>
 8000c88:	42a9      	cmp	r1, r5
 8000c8a:	d905      	bls.n	8000c98 <_malloc_r+0x28>
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	2600      	movs	r6, #0
 8000c92:	4630      	mov	r0, r6
 8000c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000d6c <_malloc_r+0xfc>
 8000c9c:	f000 f868 	bl	8000d70 <__malloc_lock>
 8000ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8000ca4:	461c      	mov	r4, r3
 8000ca6:	bb5c      	cbnz	r4, 8000d00 <_malloc_r+0x90>
 8000ca8:	4629      	mov	r1, r5
 8000caa:	4638      	mov	r0, r7
 8000cac:	f7ff ffc0 	bl	8000c30 <sbrk_aligned>
 8000cb0:	1c43      	adds	r3, r0, #1
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	d155      	bne.n	8000d62 <_malloc_r+0xf2>
 8000cb6:	f8d8 4000 	ldr.w	r4, [r8]
 8000cba:	4626      	mov	r6, r4
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d145      	bne.n	8000d4c <_malloc_r+0xdc>
 8000cc0:	2c00      	cmp	r4, #0
 8000cc2:	d048      	beq.n	8000d56 <_malloc_r+0xe6>
 8000cc4:	6823      	ldr	r3, [r4, #0]
 8000cc6:	4631      	mov	r1, r6
 8000cc8:	4638      	mov	r0, r7
 8000cca:	eb04 0903 	add.w	r9, r4, r3
 8000cce:	f000 f98d 	bl	8000fec <_sbrk_r>
 8000cd2:	4581      	cmp	r9, r0
 8000cd4:	d13f      	bne.n	8000d56 <_malloc_r+0xe6>
 8000cd6:	6821      	ldr	r1, [r4, #0]
 8000cd8:	1a6d      	subs	r5, r5, r1
 8000cda:	4629      	mov	r1, r5
 8000cdc:	4638      	mov	r0, r7
 8000cde:	f7ff ffa7 	bl	8000c30 <sbrk_aligned>
 8000ce2:	3001      	adds	r0, #1
 8000ce4:	d037      	beq.n	8000d56 <_malloc_r+0xe6>
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	442b      	add	r3, r5
 8000cea:	6023      	str	r3, [r4, #0]
 8000cec:	f8d8 3000 	ldr.w	r3, [r8]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d038      	beq.n	8000d66 <_malloc_r+0xf6>
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	42a2      	cmp	r2, r4
 8000cf8:	d12b      	bne.n	8000d52 <_malloc_r+0xe2>
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	e00f      	b.n	8000d20 <_malloc_r+0xb0>
 8000d00:	6822      	ldr	r2, [r4, #0]
 8000d02:	1b52      	subs	r2, r2, r5
 8000d04:	d41f      	bmi.n	8000d46 <_malloc_r+0xd6>
 8000d06:	2a0b      	cmp	r2, #11
 8000d08:	d917      	bls.n	8000d3a <_malloc_r+0xca>
 8000d0a:	1961      	adds	r1, r4, r5
 8000d0c:	42a3      	cmp	r3, r4
 8000d0e:	6025      	str	r5, [r4, #0]
 8000d10:	bf18      	it	ne
 8000d12:	6059      	strne	r1, [r3, #4]
 8000d14:	6863      	ldr	r3, [r4, #4]
 8000d16:	bf08      	it	eq
 8000d18:	f8c8 1000 	streq.w	r1, [r8]
 8000d1c:	5162      	str	r2, [r4, r5]
 8000d1e:	604b      	str	r3, [r1, #4]
 8000d20:	4638      	mov	r0, r7
 8000d22:	f104 060b 	add.w	r6, r4, #11
 8000d26:	f000 f829 	bl	8000d7c <__malloc_unlock>
 8000d2a:	f026 0607 	bic.w	r6, r6, #7
 8000d2e:	1d23      	adds	r3, r4, #4
 8000d30:	1af2      	subs	r2, r6, r3
 8000d32:	d0ae      	beq.n	8000c92 <_malloc_r+0x22>
 8000d34:	1b9b      	subs	r3, r3, r6
 8000d36:	50a3      	str	r3, [r4, r2]
 8000d38:	e7ab      	b.n	8000c92 <_malloc_r+0x22>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	6862      	ldr	r2, [r4, #4]
 8000d3e:	d1dd      	bne.n	8000cfc <_malloc_r+0x8c>
 8000d40:	f8c8 2000 	str.w	r2, [r8]
 8000d44:	e7ec      	b.n	8000d20 <_malloc_r+0xb0>
 8000d46:	4623      	mov	r3, r4
 8000d48:	6864      	ldr	r4, [r4, #4]
 8000d4a:	e7ac      	b.n	8000ca6 <_malloc_r+0x36>
 8000d4c:	4634      	mov	r4, r6
 8000d4e:	6876      	ldr	r6, [r6, #4]
 8000d50:	e7b4      	b.n	8000cbc <_malloc_r+0x4c>
 8000d52:	4613      	mov	r3, r2
 8000d54:	e7cc      	b.n	8000cf0 <_malloc_r+0x80>
 8000d56:	230c      	movs	r3, #12
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4638      	mov	r0, r7
 8000d5c:	f000 f80e 	bl	8000d7c <__malloc_unlock>
 8000d60:	e797      	b.n	8000c92 <_malloc_r+0x22>
 8000d62:	6025      	str	r5, [r4, #0]
 8000d64:	e7dc      	b.n	8000d20 <_malloc_r+0xb0>
 8000d66:	605b      	str	r3, [r3, #4]
 8000d68:	deff      	udf	#255	; 0xff
 8000d6a:	bf00      	nop
 8000d6c:	200001e4 	.word	0x200001e4

08000d70 <__malloc_lock>:
 8000d70:	4801      	ldr	r0, [pc, #4]	; (8000d78 <__malloc_lock+0x8>)
 8000d72:	f7ff bf0e 	b.w	8000b92 <__retarget_lock_acquire_recursive>
 8000d76:	bf00      	nop
 8000d78:	200001e0 	.word	0x200001e0

08000d7c <__malloc_unlock>:
 8000d7c:	4801      	ldr	r0, [pc, #4]	; (8000d84 <__malloc_unlock+0x8>)
 8000d7e:	f7ff bf09 	b.w	8000b94 <__retarget_lock_release_recursive>
 8000d82:	bf00      	nop
 8000d84:	200001e0 	.word	0x200001e0

08000d88 <__sflush_r>:
 8000d88:	898a      	ldrh	r2, [r1, #12]
 8000d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d8e:	4605      	mov	r5, r0
 8000d90:	0710      	lsls	r0, r2, #28
 8000d92:	460c      	mov	r4, r1
 8000d94:	d458      	bmi.n	8000e48 <__sflush_r+0xc0>
 8000d96:	684b      	ldr	r3, [r1, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	dc05      	bgt.n	8000da8 <__sflush_r+0x20>
 8000d9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	dc02      	bgt.n	8000da8 <__sflush_r+0x20>
 8000da2:	2000      	movs	r0, #0
 8000da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000da8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d0f9      	beq.n	8000da2 <__sflush_r+0x1a>
 8000dae:	2300      	movs	r3, #0
 8000db0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000db4:	682f      	ldr	r7, [r5, #0]
 8000db6:	6a21      	ldr	r1, [r4, #32]
 8000db8:	602b      	str	r3, [r5, #0]
 8000dba:	d032      	beq.n	8000e22 <__sflush_r+0x9a>
 8000dbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000dbe:	89a3      	ldrh	r3, [r4, #12]
 8000dc0:	075a      	lsls	r2, r3, #29
 8000dc2:	d505      	bpl.n	8000dd0 <__sflush_r+0x48>
 8000dc4:	6863      	ldr	r3, [r4, #4]
 8000dc6:	1ac0      	subs	r0, r0, r3
 8000dc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dca:	b10b      	cbz	r3, 8000dd0 <__sflush_r+0x48>
 8000dcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dce:	1ac0      	subs	r0, r0, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000dd6:	6a21      	ldr	r1, [r4, #32]
 8000dd8:	4628      	mov	r0, r5
 8000dda:	47b0      	blx	r6
 8000ddc:	1c43      	adds	r3, r0, #1
 8000dde:	89a3      	ldrh	r3, [r4, #12]
 8000de0:	d106      	bne.n	8000df0 <__sflush_r+0x68>
 8000de2:	6829      	ldr	r1, [r5, #0]
 8000de4:	291d      	cmp	r1, #29
 8000de6:	d82b      	bhi.n	8000e40 <__sflush_r+0xb8>
 8000de8:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <__sflush_r+0x108>)
 8000dea:	410a      	asrs	r2, r1
 8000dec:	07d6      	lsls	r6, r2, #31
 8000dee:	d427      	bmi.n	8000e40 <__sflush_r+0xb8>
 8000df0:	2200      	movs	r2, #0
 8000df2:	6062      	str	r2, [r4, #4]
 8000df4:	04d9      	lsls	r1, r3, #19
 8000df6:	6922      	ldr	r2, [r4, #16]
 8000df8:	6022      	str	r2, [r4, #0]
 8000dfa:	d504      	bpl.n	8000e06 <__sflush_r+0x7e>
 8000dfc:	1c42      	adds	r2, r0, #1
 8000dfe:	d101      	bne.n	8000e04 <__sflush_r+0x7c>
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	b903      	cbnz	r3, 8000e06 <__sflush_r+0x7e>
 8000e04:	6560      	str	r0, [r4, #84]	; 0x54
 8000e06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e08:	602f      	str	r7, [r5, #0]
 8000e0a:	2900      	cmp	r1, #0
 8000e0c:	d0c9      	beq.n	8000da2 <__sflush_r+0x1a>
 8000e0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e12:	4299      	cmp	r1, r3
 8000e14:	d002      	beq.n	8000e1c <__sflush_r+0x94>
 8000e16:	4628      	mov	r0, r5
 8000e18:	f7ff febe 	bl	8000b98 <_free_r>
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	6360      	str	r0, [r4, #52]	; 0x34
 8000e20:	e7c0      	b.n	8000da4 <__sflush_r+0x1c>
 8000e22:	2301      	movs	r3, #1
 8000e24:	4628      	mov	r0, r5
 8000e26:	47b0      	blx	r6
 8000e28:	1c41      	adds	r1, r0, #1
 8000e2a:	d1c8      	bne.n	8000dbe <__sflush_r+0x36>
 8000e2c:	682b      	ldr	r3, [r5, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0c5      	beq.n	8000dbe <__sflush_r+0x36>
 8000e32:	2b1d      	cmp	r3, #29
 8000e34:	d001      	beq.n	8000e3a <__sflush_r+0xb2>
 8000e36:	2b16      	cmp	r3, #22
 8000e38:	d101      	bne.n	8000e3e <__sflush_r+0xb6>
 8000e3a:	602f      	str	r7, [r5, #0]
 8000e3c:	e7b1      	b.n	8000da2 <__sflush_r+0x1a>
 8000e3e:	89a3      	ldrh	r3, [r4, #12]
 8000e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e44:	81a3      	strh	r3, [r4, #12]
 8000e46:	e7ad      	b.n	8000da4 <__sflush_r+0x1c>
 8000e48:	690f      	ldr	r7, [r1, #16]
 8000e4a:	2f00      	cmp	r7, #0
 8000e4c:	d0a9      	beq.n	8000da2 <__sflush_r+0x1a>
 8000e4e:	0793      	lsls	r3, r2, #30
 8000e50:	680e      	ldr	r6, [r1, #0]
 8000e52:	bf08      	it	eq
 8000e54:	694b      	ldreq	r3, [r1, #20]
 8000e56:	600f      	str	r7, [r1, #0]
 8000e58:	bf18      	it	ne
 8000e5a:	2300      	movne	r3, #0
 8000e5c:	eba6 0807 	sub.w	r8, r6, r7
 8000e60:	608b      	str	r3, [r1, #8]
 8000e62:	f1b8 0f00 	cmp.w	r8, #0
 8000e66:	dd9c      	ble.n	8000da2 <__sflush_r+0x1a>
 8000e68:	6a21      	ldr	r1, [r4, #32]
 8000e6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000e6c:	4643      	mov	r3, r8
 8000e6e:	463a      	mov	r2, r7
 8000e70:	4628      	mov	r0, r5
 8000e72:	47b0      	blx	r6
 8000e74:	2800      	cmp	r0, #0
 8000e76:	dc06      	bgt.n	8000e86 <__sflush_r+0xfe>
 8000e78:	89a3      	ldrh	r3, [r4, #12]
 8000e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e7e:	81a3      	strh	r3, [r4, #12]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	e78e      	b.n	8000da4 <__sflush_r+0x1c>
 8000e86:	4407      	add	r7, r0
 8000e88:	eba8 0800 	sub.w	r8, r8, r0
 8000e8c:	e7e9      	b.n	8000e62 <__sflush_r+0xda>
 8000e8e:	bf00      	nop
 8000e90:	dfbffffe 	.word	0xdfbffffe

08000e94 <_fflush_r>:
 8000e94:	b538      	push	{r3, r4, r5, lr}
 8000e96:	690b      	ldr	r3, [r1, #16]
 8000e98:	4605      	mov	r5, r0
 8000e9a:	460c      	mov	r4, r1
 8000e9c:	b913      	cbnz	r3, 8000ea4 <_fflush_r+0x10>
 8000e9e:	2500      	movs	r5, #0
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	bd38      	pop	{r3, r4, r5, pc}
 8000ea4:	b118      	cbz	r0, 8000eae <_fflush_r+0x1a>
 8000ea6:	6a03      	ldr	r3, [r0, #32]
 8000ea8:	b90b      	cbnz	r3, 8000eae <_fflush_r+0x1a>
 8000eaa:	f7ff fc8f 	bl	80007cc <__sinit>
 8000eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f3      	beq.n	8000e9e <_fflush_r+0xa>
 8000eb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000eb8:	07d0      	lsls	r0, r2, #31
 8000eba:	d404      	bmi.n	8000ec6 <_fflush_r+0x32>
 8000ebc:	0599      	lsls	r1, r3, #22
 8000ebe:	d402      	bmi.n	8000ec6 <_fflush_r+0x32>
 8000ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ec2:	f7ff fe66 	bl	8000b92 <__retarget_lock_acquire_recursive>
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	4621      	mov	r1, r4
 8000eca:	f7ff ff5d 	bl	8000d88 <__sflush_r>
 8000ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ed0:	07da      	lsls	r2, r3, #31
 8000ed2:	4605      	mov	r5, r0
 8000ed4:	d4e4      	bmi.n	8000ea0 <_fflush_r+0xc>
 8000ed6:	89a3      	ldrh	r3, [r4, #12]
 8000ed8:	059b      	lsls	r3, r3, #22
 8000eda:	d4e1      	bmi.n	8000ea0 <_fflush_r+0xc>
 8000edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ede:	f7ff fe59 	bl	8000b94 <__retarget_lock_release_recursive>
 8000ee2:	e7dd      	b.n	8000ea0 <_fflush_r+0xc>

08000ee4 <__swhatbuf_r>:
 8000ee4:	b570      	push	{r4, r5, r6, lr}
 8000ee6:	460c      	mov	r4, r1
 8000ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eec:	2900      	cmp	r1, #0
 8000eee:	b096      	sub	sp, #88	; 0x58
 8000ef0:	4615      	mov	r5, r2
 8000ef2:	461e      	mov	r6, r3
 8000ef4:	da0d      	bge.n	8000f12 <__swhatbuf_r+0x2e>
 8000ef6:	89a3      	ldrh	r3, [r4, #12]
 8000ef8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000efc:	f04f 0100 	mov.w	r1, #0
 8000f00:	bf0c      	ite	eq
 8000f02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000f06:	2340      	movne	r3, #64	; 0x40
 8000f08:	2000      	movs	r0, #0
 8000f0a:	6031      	str	r1, [r6, #0]
 8000f0c:	602b      	str	r3, [r5, #0]
 8000f0e:	b016      	add	sp, #88	; 0x58
 8000f10:	bd70      	pop	{r4, r5, r6, pc}
 8000f12:	466a      	mov	r2, sp
 8000f14:	f000 f848 	bl	8000fa8 <_fstat_r>
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	dbec      	blt.n	8000ef6 <__swhatbuf_r+0x12>
 8000f1c:	9901      	ldr	r1, [sp, #4]
 8000f1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000f22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000f26:	4259      	negs	r1, r3
 8000f28:	4159      	adcs	r1, r3
 8000f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f2e:	e7eb      	b.n	8000f08 <__swhatbuf_r+0x24>

08000f30 <__smakebuf_r>:
 8000f30:	898b      	ldrh	r3, [r1, #12]
 8000f32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f34:	079d      	lsls	r5, r3, #30
 8000f36:	4606      	mov	r6, r0
 8000f38:	460c      	mov	r4, r1
 8000f3a:	d507      	bpl.n	8000f4c <__smakebuf_r+0x1c>
 8000f3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f40:	6023      	str	r3, [r4, #0]
 8000f42:	6123      	str	r3, [r4, #16]
 8000f44:	2301      	movs	r3, #1
 8000f46:	6163      	str	r3, [r4, #20]
 8000f48:	b002      	add	sp, #8
 8000f4a:	bd70      	pop	{r4, r5, r6, pc}
 8000f4c:	ab01      	add	r3, sp, #4
 8000f4e:	466a      	mov	r2, sp
 8000f50:	f7ff ffc8 	bl	8000ee4 <__swhatbuf_r>
 8000f54:	9900      	ldr	r1, [sp, #0]
 8000f56:	4605      	mov	r5, r0
 8000f58:	4630      	mov	r0, r6
 8000f5a:	f7ff fe89 	bl	8000c70 <_malloc_r>
 8000f5e:	b948      	cbnz	r0, 8000f74 <__smakebuf_r+0x44>
 8000f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f64:	059a      	lsls	r2, r3, #22
 8000f66:	d4ef      	bmi.n	8000f48 <__smakebuf_r+0x18>
 8000f68:	f023 0303 	bic.w	r3, r3, #3
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	81a3      	strh	r3, [r4, #12]
 8000f72:	e7e3      	b.n	8000f3c <__smakebuf_r+0xc>
 8000f74:	89a3      	ldrh	r3, [r4, #12]
 8000f76:	6020      	str	r0, [r4, #0]
 8000f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7c:	81a3      	strh	r3, [r4, #12]
 8000f7e:	9b00      	ldr	r3, [sp, #0]
 8000f80:	6163      	str	r3, [r4, #20]
 8000f82:	9b01      	ldr	r3, [sp, #4]
 8000f84:	6120      	str	r0, [r4, #16]
 8000f86:	b15b      	cbz	r3, 8000fa0 <__smakebuf_r+0x70>
 8000f88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	f000 f81d 	bl	8000fcc <_isatty_r>
 8000f92:	b128      	cbz	r0, 8000fa0 <__smakebuf_r+0x70>
 8000f94:	89a3      	ldrh	r3, [r4, #12]
 8000f96:	f023 0303 	bic.w	r3, r3, #3
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	81a3      	strh	r3, [r4, #12]
 8000fa0:	89a3      	ldrh	r3, [r4, #12]
 8000fa2:	431d      	orrs	r5, r3
 8000fa4:	81a5      	strh	r5, [r4, #12]
 8000fa6:	e7cf      	b.n	8000f48 <__smakebuf_r+0x18>

08000fa8 <_fstat_r>:
 8000fa8:	b538      	push	{r3, r4, r5, lr}
 8000faa:	4d07      	ldr	r5, [pc, #28]	; (8000fc8 <_fstat_r+0x20>)
 8000fac:	2300      	movs	r3, #0
 8000fae:	4604      	mov	r4, r0
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	602b      	str	r3, [r5, #0]
 8000fb6:	f7ff faf4 	bl	80005a2 <_fstat>
 8000fba:	1c43      	adds	r3, r0, #1
 8000fbc:	d102      	bne.n	8000fc4 <_fstat_r+0x1c>
 8000fbe:	682b      	ldr	r3, [r5, #0]
 8000fc0:	b103      	cbz	r3, 8000fc4 <_fstat_r+0x1c>
 8000fc2:	6023      	str	r3, [r4, #0]
 8000fc4:	bd38      	pop	{r3, r4, r5, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200001dc 	.word	0x200001dc

08000fcc <_isatty_r>:
 8000fcc:	b538      	push	{r3, r4, r5, lr}
 8000fce:	4d06      	ldr	r5, [pc, #24]	; (8000fe8 <_isatty_r+0x1c>)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	602b      	str	r3, [r5, #0]
 8000fd8:	f7ff faf3 	bl	80005c2 <_isatty>
 8000fdc:	1c43      	adds	r3, r0, #1
 8000fde:	d102      	bne.n	8000fe6 <_isatty_r+0x1a>
 8000fe0:	682b      	ldr	r3, [r5, #0]
 8000fe2:	b103      	cbz	r3, 8000fe6 <_isatty_r+0x1a>
 8000fe4:	6023      	str	r3, [r4, #0]
 8000fe6:	bd38      	pop	{r3, r4, r5, pc}
 8000fe8:	200001dc 	.word	0x200001dc

08000fec <_sbrk_r>:
 8000fec:	b538      	push	{r3, r4, r5, lr}
 8000fee:	4d06      	ldr	r5, [pc, #24]	; (8001008 <_sbrk_r+0x1c>)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	602b      	str	r3, [r5, #0]
 8000ff8:	f7ff fafc 	bl	80005f4 <_sbrk>
 8000ffc:	1c43      	adds	r3, r0, #1
 8000ffe:	d102      	bne.n	8001006 <_sbrk_r+0x1a>
 8001000:	682b      	ldr	r3, [r5, #0]
 8001002:	b103      	cbz	r3, 8001006 <_sbrk_r+0x1a>
 8001004:	6023      	str	r3, [r4, #0]
 8001006:	bd38      	pop	{r3, r4, r5, pc}
 8001008:	200001dc 	.word	0x200001dc

0800100c <_init>:
 800100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100e:	bf00      	nop
 8001010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001012:	bc08      	pop	{r3}
 8001014:	469e      	mov	lr, r3
 8001016:	4770      	bx	lr

08001018 <_fini>:
 8001018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101a:	bf00      	nop
 800101c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101e:	bc08      	pop	{r3}
 8001020:	469e      	mov	lr, r3
 8001022:	4770      	bx	lr
