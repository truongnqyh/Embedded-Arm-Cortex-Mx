
SVC_operation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000138c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800152c  0800152c  0001152c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800158c  0800158c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800158c  0800158c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800158c  0800158c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800158c  0800158c  0001158c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001590  08001590  00011590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080015f0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080015f0  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ad2  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003c1  00000000  00000000  00020ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  00020f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e3  00000000  00000000  000210b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c9b  00000000  00000000  00021193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000150f  00000000  00000000  00023e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009806  00000000  00000000  0002533d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c1c  00000000  00000000  0002eb44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0002f760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001514 	.word	0x08001514

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001514 	.word	0x08001514

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <add>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int32_t add(int32_t a, int32_t b)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
	int32_t ret;
	__asm("SVC #36");
 800028a:	df24      	svc	36	; 0x24
	__asm volatile ("MOV %0,R0": "=r"(ret) ::);
 800028c:	4603      	mov	r3, r0
 800028e:	60fb      	str	r3, [r7, #12]
	return ret;
 8000290:	68fb      	ldr	r3, [r7, #12]
}
 8000292:	4618      	mov	r0, r3
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <sub>:

int32_t sub(int32_t a, int32_t b)
{
 800029e:	b480      	push	{r7}
 80002a0:	b085      	sub	sp, #20
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	6078      	str	r0, [r7, #4]
 80002a6:	6039      	str	r1, [r7, #0]
	int32_t ret;
	__asm("SVC #37");
 80002a8:	df25      	svc	37	; 0x25
	__asm volatile ("MOV %0,R0": "=r"(ret) ::);
 80002aa:	4603      	mov	r3, r0
 80002ac:	60fb      	str	r3, [r7, #12]
	return ret;
 80002ae:	68fb      	ldr	r3, [r7, #12]
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <mul>:

int32_t mul(int32_t a, int32_t b)
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]
	int32_t ret;
	__asm("SVC #38");
 80002c6:	df26      	svc	38	; 0x26
	__asm volatile ("MOV %0,R0": "=r"(ret) ::);
 80002c8:	4603      	mov	r3, r0
 80002ca:	60fb      	str	r3, [r7, #12]
	return ret;
 80002cc:	68fb      	ldr	r3, [r7, #12]
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3714      	adds	r7, #20
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <div>:

int32_t div(int32_t a, int32_t b)
{
 80002da:	b480      	push	{r7}
 80002dc:	b085      	sub	sp, #20
 80002de:	af00      	add	r7, sp, #0
 80002e0:	6078      	str	r0, [r7, #4]
 80002e2:	6039      	str	r1, [r7, #0]
	int32_t ret;
	__asm("SVC #39");
 80002e4:	df27      	svc	39	; 0x27
	__asm volatile ("MOV %0,R0": "=r"(ret) ::);
 80002e6:	4603      	mov	r3, r0
 80002e8:	60fb      	str	r3, [r7, #12]
	return ret;
 80002ea:	68fb      	ldr	r3, [r7, #12]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3714      	adds	r7, #20
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <main>:

int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
	int32_t ret_value;
	/******* ADD *******/
	ret_value = add(30,-90);
 80002fe:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8000302:	201e      	movs	r0, #30
 8000304:	f7ff ffbc 	bl	8000280 <add>
 8000308:	6078      	str	r0, [r7, #4]
	printf("add: %ld\n", ret_value);
 800030a:	6879      	ldr	r1, [r7, #4]
 800030c:	4810      	ldr	r0, [pc, #64]	; (8000350 <main+0x58>)
 800030e:	f000 fa31 	bl	8000774 <iprintf>

	/******* SUB *******/
	ret_value = sub(30,-90);
 8000312:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8000316:	201e      	movs	r0, #30
 8000318:	f7ff ffc1 	bl	800029e <sub>
 800031c:	6078      	str	r0, [r7, #4]
	printf("add: %ld\n", ret_value);
 800031e:	6879      	ldr	r1, [r7, #4]
 8000320:	480b      	ldr	r0, [pc, #44]	; (8000350 <main+0x58>)
 8000322:	f000 fa27 	bl	8000774 <iprintf>

	/******* MUL *******/
	ret_value = mul(30,-90);
 8000326:	f06f 0159 	mvn.w	r1, #89	; 0x59
 800032a:	201e      	movs	r0, #30
 800032c:	f7ff ffc6 	bl	80002bc <mul>
 8000330:	6078      	str	r0, [r7, #4]
	printf("add: %ld\n", ret_value);
 8000332:	6879      	ldr	r1, [r7, #4]
 8000334:	4806      	ldr	r0, [pc, #24]	; (8000350 <main+0x58>)
 8000336:	f000 fa1d 	bl	8000774 <iprintf>

	/******* DIV *******/
	ret_value = div(30,-90);
 800033a:	f06f 0159 	mvn.w	r1, #89	; 0x59
 800033e:	201e      	movs	r0, #30
 8000340:	f7ff ffcb 	bl	80002da <div>
 8000344:	6078      	str	r0, [r7, #4]
	printf("add: %ld\n", ret_value);
 8000346:	6879      	ldr	r1, [r7, #4]
 8000348:	4801      	ldr	r0, [pc, #4]	; (8000350 <main+0x58>)
 800034a:	f000 fa13 	bl	8000774 <iprintf>
    /* Loop forever */
	for(;;);
 800034e:	e7fe      	b.n	800034e <main+0x56>
 8000350:	0800152c 	.word	0x0800152c

08000354 <SVC_Handler>:
}

__attribute__ ((naked)) void SVC_Handler(void)
{
	__asm("MRS R0,MSP");
 8000354:	f3ef 8008 	mrs	r0, MSP
	__asm("B SVC_Handler_c");
 8000358:	f000 b802 	b.w	8000360 <SVC_Handler_c>

}
 800035c:	bf00      	nop
	...

08000360 <SVC_Handler_c>:

void SVC_Handler_c(int32_t *pstackPointer)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	uint8_t SVC_number = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	76fb      	strb	r3, [r7, #27]
	int32_t arg0;
	int32_t arg1;
	int32_t ret;
	uint8_t *pMSP_Addr = (uint8_t *)pstackPointer[6];
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3318      	adds	r3, #24
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	617b      	str	r3, [r7, #20]
	pMSP_Addr --;
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	3b01      	subs	r3, #1
 8000378:	617b      	str	r3, [r7, #20]
	pMSP_Addr --;
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	3b01      	subs	r3, #1
 800037e:	617b      	str	r3, [r7, #20]
	SVC_number = *pMSP_Addr;
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	76fb      	strb	r3, [r7, #27]
	printf("SVC number: %d\n", SVC_number);
 8000386:	7efb      	ldrb	r3, [r7, #27]
 8000388:	4619      	mov	r1, r3
 800038a:	481c      	ldr	r0, [pc, #112]	; (80003fc <SVC_Handler_c+0x9c>)
 800038c:	f000 f9f2 	bl	8000774 <iprintf>
	arg0 = pstackPointer[0];
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	613b      	str	r3, [r7, #16]
	arg1 = pstackPointer[1];
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	60fb      	str	r3, [r7, #12]
	switch(SVC_number)
 800039c:	7efb      	ldrb	r3, [r7, #27]
 800039e:	3b24      	subs	r3, #36	; 0x24
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	d821      	bhi.n	80003e8 <SVC_Handler_c+0x88>
 80003a4:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <SVC_Handler_c+0x4c>)
 80003a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003aa:	bf00      	nop
 80003ac:	080003bd 	.word	0x080003bd
 80003b0:	080003c7 	.word	0x080003c7
 80003b4:	080003d1 	.word	0x080003d1
 80003b8:	080003dd 	.word	0x080003dd
	{
	case 36:
		ret = arg0 + arg1;
 80003bc:	693a      	ldr	r2, [r7, #16]
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	4413      	add	r3, r2
 80003c2:	61fb      	str	r3, [r7, #28]
		break;
 80003c4:	e013      	b.n	80003ee <SVC_Handler_c+0x8e>
	case 37:
		ret = arg0 - arg1;
 80003c6:	693a      	ldr	r2, [r7, #16]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	1ad3      	subs	r3, r2, r3
 80003cc:	61fb      	str	r3, [r7, #28]
		break;
 80003ce:	e00e      	b.n	80003ee <SVC_Handler_c+0x8e>
	case 38:
		ret = arg0 * arg1;
 80003d0:	693b      	ldr	r3, [r7, #16]
 80003d2:	68fa      	ldr	r2, [r7, #12]
 80003d4:	fb02 f303 	mul.w	r3, r2, r3
 80003d8:	61fb      	str	r3, [r7, #28]
		break;
 80003da:	e008      	b.n	80003ee <SVC_Handler_c+0x8e>
	case 39:
		ret = arg0 / arg1;
 80003dc:	693a      	ldr	r2, [r7, #16]
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80003e4:	61fb      	str	r3, [r7, #28]
		break;
 80003e6:	e002      	b.n	80003ee <SVC_Handler_c+0x8e>
	default:
		printf("SVC is invalid\n");
 80003e8:	4805      	ldr	r0, [pc, #20]	; (8000400 <SVC_Handler_c+0xa0>)
 80003ea:	f000 fa29 	bl	8000840 <puts>
	}
	pstackPointer[0] = ret;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	69fa      	ldr	r2, [r7, #28]
 80003f2:	601a      	str	r2, [r3, #0]
}
 80003f4:	bf00      	nop
 80003f6:	3720      	adds	r7, #32
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	08001538 	.word	0x08001538
 8000400:	08001548 	.word	0x08001548

08000404 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <ITM_SendChar+0x48>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a0e      	ldr	r2, [pc, #56]	; (800044c <ITM_SendChar+0x48>)
 8000414:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000418:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800041a:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <ITM_SendChar+0x4c>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a0c      	ldr	r2, [pc, #48]	; (8000450 <ITM_SendChar+0x4c>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000426:	bf00      	nop
 8000428:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0f8      	beq.n	8000428 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000436:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	6013      	str	r3, [r2, #0]
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	e000edfc 	.word	0xe000edfc
 8000450:	e0000e00 	.word	0xe0000e00

08000454 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	e00a      	b.n	800047c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000466:	f3af 8000 	nop.w
 800046a:	4601      	mov	r1, r0
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	1c5a      	adds	r2, r3, #1
 8000470:	60ba      	str	r2, [r7, #8]
 8000472:	b2ca      	uxtb	r2, r1
 8000474:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	3301      	adds	r3, #1
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	697a      	ldr	r2, [r7, #20]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	429a      	cmp	r2, r3
 8000482:	dbf0      	blt.n	8000466 <_read+0x12>
  }

  return len;
 8000484:	687b      	ldr	r3, [r7, #4]
}
 8000486:	4618      	mov	r0, r3
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b086      	sub	sp, #24
 8000492:	af00      	add	r7, sp, #0
 8000494:	60f8      	str	r0, [r7, #12]
 8000496:	60b9      	str	r1, [r7, #8]
 8000498:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
 800049e:	e009      	b.n	80004b4 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	1c5a      	adds	r2, r3, #1
 80004a4:	60ba      	str	r2, [r7, #8]
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff ffab 	bl	8000404 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	3301      	adds	r3, #1
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	697a      	ldr	r2, [r7, #20]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	dbf1      	blt.n	80004a0 <_write+0x12>
  }
  return len;
 80004bc:	687b      	ldr	r3, [r7, #4]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3718      	adds	r7, #24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <_close>:

int _close(int file)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
 80004e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004ee:	605a      	str	r2, [r3, #4]
  return 0;
 80004f0:	2300      	movs	r3, #0
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <_isatty>:

int _isatty(int file)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000506:	2301      	movs	r3, #1
}
 8000508:	4618      	mov	r0, r3
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
	...

08000530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000538:	4a14      	ldr	r2, [pc, #80]	; (800058c <_sbrk+0x5c>)
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <_sbrk+0x60>)
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <_sbrk+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d102      	bne.n	8000552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <_sbrk+0x64>)
 800054e:	4a12      	ldr	r2, [pc, #72]	; (8000598 <_sbrk+0x68>)
 8000550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <_sbrk+0x64>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	693a      	ldr	r2, [r7, #16]
 800055c:	429a      	cmp	r2, r3
 800055e:	d207      	bcs.n	8000570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000560:	f000 fa9c 	bl	8000a9c <__errno>
 8000564:	4603      	mov	r3, r0
 8000566:	220c      	movs	r2, #12
 8000568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	e009      	b.n	8000584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <_sbrk+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <_sbrk+0x64>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <_sbrk+0x64>)
 8000580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20020000 	.word	0x20020000
 8000590:	00000400 	.word	0x00000400
 8000594:	20000078 	.word	0x20000078
 8000598:	200001c8 	.word	0x200001c8

0800059c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800059e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a6:	490d      	ldr	r1, [pc, #52]	; (80005dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a8:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <LoopForever+0xe>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005bc:	4c0a      	ldr	r4, [pc, #40]	; (80005e8 <LoopForever+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ca:	f000 fa6d 	bl	8000aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ce:	f7ff fe93 	bl	80002f8 <main>

080005d2 <LoopForever>:

LoopForever:
  b LoopForever
 80005d2:	e7fe      	b.n	80005d2 <LoopForever>
  ldr   r0, =_estack
 80005d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005e0:	08001594 	.word	0x08001594
  ldr r2, =_sbss
 80005e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005e8:	200001c8 	.word	0x200001c8

080005ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC_IRQHandler>
	...

080005f0 <std>:
 80005f0:	2300      	movs	r3, #0
 80005f2:	b510      	push	{r4, lr}
 80005f4:	4604      	mov	r4, r0
 80005f6:	e9c0 3300 	strd	r3, r3, [r0]
 80005fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005fe:	6083      	str	r3, [r0, #8]
 8000600:	8181      	strh	r1, [r0, #12]
 8000602:	6643      	str	r3, [r0, #100]	; 0x64
 8000604:	81c2      	strh	r2, [r0, #14]
 8000606:	6183      	str	r3, [r0, #24]
 8000608:	4619      	mov	r1, r3
 800060a:	2208      	movs	r2, #8
 800060c:	305c      	adds	r0, #92	; 0x5c
 800060e:	f000 f9f7 	bl	8000a00 <memset>
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <std+0x58>)
 8000614:	6263      	str	r3, [r4, #36]	; 0x24
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <std+0x5c>)
 8000618:	62a3      	str	r3, [r4, #40]	; 0x28
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <std+0x60>)
 800061c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <std+0x64>)
 8000620:	6323      	str	r3, [r4, #48]	; 0x30
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <std+0x68>)
 8000624:	6224      	str	r4, [r4, #32]
 8000626:	429c      	cmp	r4, r3
 8000628:	d006      	beq.n	8000638 <std+0x48>
 800062a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800062e:	4294      	cmp	r4, r2
 8000630:	d002      	beq.n	8000638 <std+0x48>
 8000632:	33d0      	adds	r3, #208	; 0xd0
 8000634:	429c      	cmp	r4, r3
 8000636:	d105      	bne.n	8000644 <std+0x54>
 8000638:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800063c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000640:	f000 ba56 	b.w	8000af0 <__retarget_lock_init_recursive>
 8000644:	bd10      	pop	{r4, pc}
 8000646:	bf00      	nop
 8000648:	08000851 	.word	0x08000851
 800064c:	08000873 	.word	0x08000873
 8000650:	080008ab 	.word	0x080008ab
 8000654:	080008cf 	.word	0x080008cf
 8000658:	2000007c 	.word	0x2000007c

0800065c <stdio_exit_handler>:
 800065c:	4a02      	ldr	r2, [pc, #8]	; (8000668 <stdio_exit_handler+0xc>)
 800065e:	4903      	ldr	r1, [pc, #12]	; (800066c <stdio_exit_handler+0x10>)
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <stdio_exit_handler+0x14>)
 8000662:	f000 b869 	b.w	8000738 <_fwalk_sglue>
 8000666:	bf00      	nop
 8000668:	20000000 	.word	0x20000000
 800066c:	0800139d 	.word	0x0800139d
 8000670:	2000000c 	.word	0x2000000c

08000674 <cleanup_stdio>:
 8000674:	6841      	ldr	r1, [r0, #4]
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <cleanup_stdio+0x34>)
 8000678:	4299      	cmp	r1, r3
 800067a:	b510      	push	{r4, lr}
 800067c:	4604      	mov	r4, r0
 800067e:	d001      	beq.n	8000684 <cleanup_stdio+0x10>
 8000680:	f000 fe8c 	bl	800139c <_fflush_r>
 8000684:	68a1      	ldr	r1, [r4, #8]
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <cleanup_stdio+0x38>)
 8000688:	4299      	cmp	r1, r3
 800068a:	d002      	beq.n	8000692 <cleanup_stdio+0x1e>
 800068c:	4620      	mov	r0, r4
 800068e:	f000 fe85 	bl	800139c <_fflush_r>
 8000692:	68e1      	ldr	r1, [r4, #12]
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <cleanup_stdio+0x3c>)
 8000696:	4299      	cmp	r1, r3
 8000698:	d004      	beq.n	80006a4 <cleanup_stdio+0x30>
 800069a:	4620      	mov	r0, r4
 800069c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a0:	f000 be7c 	b.w	800139c <_fflush_r>
 80006a4:	bd10      	pop	{r4, pc}
 80006a6:	bf00      	nop
 80006a8:	2000007c 	.word	0x2000007c
 80006ac:	200000e4 	.word	0x200000e4
 80006b0:	2000014c 	.word	0x2000014c

080006b4 <global_stdio_init.part.0>:
 80006b4:	b510      	push	{r4, lr}
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <global_stdio_init.part.0+0x30>)
 80006b8:	4c0b      	ldr	r4, [pc, #44]	; (80006e8 <global_stdio_init.part.0+0x34>)
 80006ba:	4a0c      	ldr	r2, [pc, #48]	; (80006ec <global_stdio_init.part.0+0x38>)
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	4620      	mov	r0, r4
 80006c0:	2200      	movs	r2, #0
 80006c2:	2104      	movs	r1, #4
 80006c4:	f7ff ff94 	bl	80005f0 <std>
 80006c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80006cc:	2201      	movs	r2, #1
 80006ce:	2109      	movs	r1, #9
 80006d0:	f7ff ff8e 	bl	80005f0 <std>
 80006d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006d8:	2202      	movs	r2, #2
 80006da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006de:	2112      	movs	r1, #18
 80006e0:	f7ff bf86 	b.w	80005f0 <std>
 80006e4:	200001b4 	.word	0x200001b4
 80006e8:	2000007c 	.word	0x2000007c
 80006ec:	0800065d 	.word	0x0800065d

080006f0 <__sfp_lock_acquire>:
 80006f0:	4801      	ldr	r0, [pc, #4]	; (80006f8 <__sfp_lock_acquire+0x8>)
 80006f2:	f000 b9fe 	b.w	8000af2 <__retarget_lock_acquire_recursive>
 80006f6:	bf00      	nop
 80006f8:	200001bd 	.word	0x200001bd

080006fc <__sfp_lock_release>:
 80006fc:	4801      	ldr	r0, [pc, #4]	; (8000704 <__sfp_lock_release+0x8>)
 80006fe:	f000 b9f9 	b.w	8000af4 <__retarget_lock_release_recursive>
 8000702:	bf00      	nop
 8000704:	200001bd 	.word	0x200001bd

08000708 <__sinit>:
 8000708:	b510      	push	{r4, lr}
 800070a:	4604      	mov	r4, r0
 800070c:	f7ff fff0 	bl	80006f0 <__sfp_lock_acquire>
 8000710:	6a23      	ldr	r3, [r4, #32]
 8000712:	b11b      	cbz	r3, 800071c <__sinit+0x14>
 8000714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000718:	f7ff bff0 	b.w	80006fc <__sfp_lock_release>
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <__sinit+0x28>)
 800071e:	6223      	str	r3, [r4, #32]
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <__sinit+0x2c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f5      	bne.n	8000714 <__sinit+0xc>
 8000728:	f7ff ffc4 	bl	80006b4 <global_stdio_init.part.0>
 800072c:	e7f2      	b.n	8000714 <__sinit+0xc>
 800072e:	bf00      	nop
 8000730:	08000675 	.word	0x08000675
 8000734:	200001b4 	.word	0x200001b4

08000738 <_fwalk_sglue>:
 8000738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800073c:	4607      	mov	r7, r0
 800073e:	4688      	mov	r8, r1
 8000740:	4614      	mov	r4, r2
 8000742:	2600      	movs	r6, #0
 8000744:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000748:	f1b9 0901 	subs.w	r9, r9, #1
 800074c:	d505      	bpl.n	800075a <_fwalk_sglue+0x22>
 800074e:	6824      	ldr	r4, [r4, #0]
 8000750:	2c00      	cmp	r4, #0
 8000752:	d1f7      	bne.n	8000744 <_fwalk_sglue+0xc>
 8000754:	4630      	mov	r0, r6
 8000756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800075a:	89ab      	ldrh	r3, [r5, #12]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d907      	bls.n	8000770 <_fwalk_sglue+0x38>
 8000760:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000764:	3301      	adds	r3, #1
 8000766:	d003      	beq.n	8000770 <_fwalk_sglue+0x38>
 8000768:	4629      	mov	r1, r5
 800076a:	4638      	mov	r0, r7
 800076c:	47c0      	blx	r8
 800076e:	4306      	orrs	r6, r0
 8000770:	3568      	adds	r5, #104	; 0x68
 8000772:	e7e9      	b.n	8000748 <_fwalk_sglue+0x10>

08000774 <iprintf>:
 8000774:	b40f      	push	{r0, r1, r2, r3}
 8000776:	b507      	push	{r0, r1, r2, lr}
 8000778:	4906      	ldr	r1, [pc, #24]	; (8000794 <iprintf+0x20>)
 800077a:	ab04      	add	r3, sp, #16
 800077c:	6808      	ldr	r0, [r1, #0]
 800077e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000782:	6881      	ldr	r1, [r0, #8]
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	f000 fad9 	bl	8000d3c <_vfiprintf_r>
 800078a:	b003      	add	sp, #12
 800078c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000790:	b004      	add	sp, #16
 8000792:	4770      	bx	lr
 8000794:	20000058 	.word	0x20000058

08000798 <_puts_r>:
 8000798:	6a03      	ldr	r3, [r0, #32]
 800079a:	b570      	push	{r4, r5, r6, lr}
 800079c:	6884      	ldr	r4, [r0, #8]
 800079e:	4605      	mov	r5, r0
 80007a0:	460e      	mov	r6, r1
 80007a2:	b90b      	cbnz	r3, 80007a8 <_puts_r+0x10>
 80007a4:	f7ff ffb0 	bl	8000708 <__sinit>
 80007a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007aa:	07db      	lsls	r3, r3, #31
 80007ac:	d405      	bmi.n	80007ba <_puts_r+0x22>
 80007ae:	89a3      	ldrh	r3, [r4, #12]
 80007b0:	0598      	lsls	r0, r3, #22
 80007b2:	d402      	bmi.n	80007ba <_puts_r+0x22>
 80007b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007b6:	f000 f99c 	bl	8000af2 <__retarget_lock_acquire_recursive>
 80007ba:	89a3      	ldrh	r3, [r4, #12]
 80007bc:	0719      	lsls	r1, r3, #28
 80007be:	d513      	bpl.n	80007e8 <_puts_r+0x50>
 80007c0:	6923      	ldr	r3, [r4, #16]
 80007c2:	b18b      	cbz	r3, 80007e8 <_puts_r+0x50>
 80007c4:	3e01      	subs	r6, #1
 80007c6:	68a3      	ldr	r3, [r4, #8]
 80007c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007cc:	3b01      	subs	r3, #1
 80007ce:	60a3      	str	r3, [r4, #8]
 80007d0:	b9e9      	cbnz	r1, 800080e <_puts_r+0x76>
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da2e      	bge.n	8000834 <_puts_r+0x9c>
 80007d6:	4622      	mov	r2, r4
 80007d8:	210a      	movs	r1, #10
 80007da:	4628      	mov	r0, r5
 80007dc:	f000 f87b 	bl	80008d6 <__swbuf_r>
 80007e0:	3001      	adds	r0, #1
 80007e2:	d007      	beq.n	80007f4 <_puts_r+0x5c>
 80007e4:	250a      	movs	r5, #10
 80007e6:	e007      	b.n	80007f8 <_puts_r+0x60>
 80007e8:	4621      	mov	r1, r4
 80007ea:	4628      	mov	r0, r5
 80007ec:	f000 f8b0 	bl	8000950 <__swsetup_r>
 80007f0:	2800      	cmp	r0, #0
 80007f2:	d0e7      	beq.n	80007c4 <_puts_r+0x2c>
 80007f4:	f04f 35ff 	mov.w	r5, #4294967295
 80007f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007fa:	07da      	lsls	r2, r3, #31
 80007fc:	d405      	bmi.n	800080a <_puts_r+0x72>
 80007fe:	89a3      	ldrh	r3, [r4, #12]
 8000800:	059b      	lsls	r3, r3, #22
 8000802:	d402      	bmi.n	800080a <_puts_r+0x72>
 8000804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000806:	f000 f975 	bl	8000af4 <__retarget_lock_release_recursive>
 800080a:	4628      	mov	r0, r5
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	2b00      	cmp	r3, #0
 8000810:	da04      	bge.n	800081c <_puts_r+0x84>
 8000812:	69a2      	ldr	r2, [r4, #24]
 8000814:	429a      	cmp	r2, r3
 8000816:	dc06      	bgt.n	8000826 <_puts_r+0x8e>
 8000818:	290a      	cmp	r1, #10
 800081a:	d004      	beq.n	8000826 <_puts_r+0x8e>
 800081c:	6823      	ldr	r3, [r4, #0]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	6022      	str	r2, [r4, #0]
 8000822:	7019      	strb	r1, [r3, #0]
 8000824:	e7cf      	b.n	80007c6 <_puts_r+0x2e>
 8000826:	4622      	mov	r2, r4
 8000828:	4628      	mov	r0, r5
 800082a:	f000 f854 	bl	80008d6 <__swbuf_r>
 800082e:	3001      	adds	r0, #1
 8000830:	d1c9      	bne.n	80007c6 <_puts_r+0x2e>
 8000832:	e7df      	b.n	80007f4 <_puts_r+0x5c>
 8000834:	6823      	ldr	r3, [r4, #0]
 8000836:	250a      	movs	r5, #10
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	6022      	str	r2, [r4, #0]
 800083c:	701d      	strb	r5, [r3, #0]
 800083e:	e7db      	b.n	80007f8 <_puts_r+0x60>

08000840 <puts>:
 8000840:	4b02      	ldr	r3, [pc, #8]	; (800084c <puts+0xc>)
 8000842:	4601      	mov	r1, r0
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	f7ff bfa7 	b.w	8000798 <_puts_r>
 800084a:	bf00      	nop
 800084c:	20000058 	.word	0x20000058

08000850 <__sread>:
 8000850:	b510      	push	{r4, lr}
 8000852:	460c      	mov	r4, r1
 8000854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000858:	f000 f8fc 	bl	8000a54 <_read_r>
 800085c:	2800      	cmp	r0, #0
 800085e:	bfab      	itete	ge
 8000860:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000862:	89a3      	ldrhlt	r3, [r4, #12]
 8000864:	181b      	addge	r3, r3, r0
 8000866:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800086a:	bfac      	ite	ge
 800086c:	6563      	strge	r3, [r4, #84]	; 0x54
 800086e:	81a3      	strhlt	r3, [r4, #12]
 8000870:	bd10      	pop	{r4, pc}

08000872 <__swrite>:
 8000872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000876:	461f      	mov	r7, r3
 8000878:	898b      	ldrh	r3, [r1, #12]
 800087a:	05db      	lsls	r3, r3, #23
 800087c:	4605      	mov	r5, r0
 800087e:	460c      	mov	r4, r1
 8000880:	4616      	mov	r6, r2
 8000882:	d505      	bpl.n	8000890 <__swrite+0x1e>
 8000884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000888:	2302      	movs	r3, #2
 800088a:	2200      	movs	r2, #0
 800088c:	f000 f8d0 	bl	8000a30 <_lseek_r>
 8000890:	89a3      	ldrh	r3, [r4, #12]
 8000892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800089a:	81a3      	strh	r3, [r4, #12]
 800089c:	4632      	mov	r2, r6
 800089e:	463b      	mov	r3, r7
 80008a0:	4628      	mov	r0, r5
 80008a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008a6:	f000 b8e7 	b.w	8000a78 <_write_r>

080008aa <__sseek>:
 80008aa:	b510      	push	{r4, lr}
 80008ac:	460c      	mov	r4, r1
 80008ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008b2:	f000 f8bd 	bl	8000a30 <_lseek_r>
 80008b6:	1c43      	adds	r3, r0, #1
 80008b8:	89a3      	ldrh	r3, [r4, #12]
 80008ba:	bf15      	itete	ne
 80008bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80008be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80008c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80008c6:	81a3      	strheq	r3, [r4, #12]
 80008c8:	bf18      	it	ne
 80008ca:	81a3      	strhne	r3, [r4, #12]
 80008cc:	bd10      	pop	{r4, pc}

080008ce <__sclose>:
 80008ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008d2:	f000 b89d 	b.w	8000a10 <_close_r>

080008d6 <__swbuf_r>:
 80008d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008d8:	460e      	mov	r6, r1
 80008da:	4614      	mov	r4, r2
 80008dc:	4605      	mov	r5, r0
 80008de:	b118      	cbz	r0, 80008e8 <__swbuf_r+0x12>
 80008e0:	6a03      	ldr	r3, [r0, #32]
 80008e2:	b90b      	cbnz	r3, 80008e8 <__swbuf_r+0x12>
 80008e4:	f7ff ff10 	bl	8000708 <__sinit>
 80008e8:	69a3      	ldr	r3, [r4, #24]
 80008ea:	60a3      	str	r3, [r4, #8]
 80008ec:	89a3      	ldrh	r3, [r4, #12]
 80008ee:	071a      	lsls	r2, r3, #28
 80008f0:	d525      	bpl.n	800093e <__swbuf_r+0x68>
 80008f2:	6923      	ldr	r3, [r4, #16]
 80008f4:	b31b      	cbz	r3, 800093e <__swbuf_r+0x68>
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	6922      	ldr	r2, [r4, #16]
 80008fa:	1a98      	subs	r0, r3, r2
 80008fc:	6963      	ldr	r3, [r4, #20]
 80008fe:	b2f6      	uxtb	r6, r6
 8000900:	4283      	cmp	r3, r0
 8000902:	4637      	mov	r7, r6
 8000904:	dc04      	bgt.n	8000910 <__swbuf_r+0x3a>
 8000906:	4621      	mov	r1, r4
 8000908:	4628      	mov	r0, r5
 800090a:	f000 fd47 	bl	800139c <_fflush_r>
 800090e:	b9e0      	cbnz	r0, 800094a <__swbuf_r+0x74>
 8000910:	68a3      	ldr	r3, [r4, #8]
 8000912:	3b01      	subs	r3, #1
 8000914:	60a3      	str	r3, [r4, #8]
 8000916:	6823      	ldr	r3, [r4, #0]
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	6022      	str	r2, [r4, #0]
 800091c:	701e      	strb	r6, [r3, #0]
 800091e:	6962      	ldr	r2, [r4, #20]
 8000920:	1c43      	adds	r3, r0, #1
 8000922:	429a      	cmp	r2, r3
 8000924:	d004      	beq.n	8000930 <__swbuf_r+0x5a>
 8000926:	89a3      	ldrh	r3, [r4, #12]
 8000928:	07db      	lsls	r3, r3, #31
 800092a:	d506      	bpl.n	800093a <__swbuf_r+0x64>
 800092c:	2e0a      	cmp	r6, #10
 800092e:	d104      	bne.n	800093a <__swbuf_r+0x64>
 8000930:	4621      	mov	r1, r4
 8000932:	4628      	mov	r0, r5
 8000934:	f000 fd32 	bl	800139c <_fflush_r>
 8000938:	b938      	cbnz	r0, 800094a <__swbuf_r+0x74>
 800093a:	4638      	mov	r0, r7
 800093c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800093e:	4621      	mov	r1, r4
 8000940:	4628      	mov	r0, r5
 8000942:	f000 f805 	bl	8000950 <__swsetup_r>
 8000946:	2800      	cmp	r0, #0
 8000948:	d0d5      	beq.n	80008f6 <__swbuf_r+0x20>
 800094a:	f04f 37ff 	mov.w	r7, #4294967295
 800094e:	e7f4      	b.n	800093a <__swbuf_r+0x64>

08000950 <__swsetup_r>:
 8000950:	b538      	push	{r3, r4, r5, lr}
 8000952:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <__swsetup_r+0xac>)
 8000954:	4605      	mov	r5, r0
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	460c      	mov	r4, r1
 800095a:	b118      	cbz	r0, 8000964 <__swsetup_r+0x14>
 800095c:	6a03      	ldr	r3, [r0, #32]
 800095e:	b90b      	cbnz	r3, 8000964 <__swsetup_r+0x14>
 8000960:	f7ff fed2 	bl	8000708 <__sinit>
 8000964:	89a3      	ldrh	r3, [r4, #12]
 8000966:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800096a:	0718      	lsls	r0, r3, #28
 800096c:	d422      	bmi.n	80009b4 <__swsetup_r+0x64>
 800096e:	06d9      	lsls	r1, r3, #27
 8000970:	d407      	bmi.n	8000982 <__swsetup_r+0x32>
 8000972:	2309      	movs	r3, #9
 8000974:	602b      	str	r3, [r5, #0]
 8000976:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800097a:	81a3      	strh	r3, [r4, #12]
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	e034      	b.n	80009ec <__swsetup_r+0x9c>
 8000982:	0758      	lsls	r0, r3, #29
 8000984:	d512      	bpl.n	80009ac <__swsetup_r+0x5c>
 8000986:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000988:	b141      	cbz	r1, 800099c <__swsetup_r+0x4c>
 800098a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800098e:	4299      	cmp	r1, r3
 8000990:	d002      	beq.n	8000998 <__swsetup_r+0x48>
 8000992:	4628      	mov	r0, r5
 8000994:	f000 f8b0 	bl	8000af8 <_free_r>
 8000998:	2300      	movs	r3, #0
 800099a:	6363      	str	r3, [r4, #52]	; 0x34
 800099c:	89a3      	ldrh	r3, [r4, #12]
 800099e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80009a2:	81a3      	strh	r3, [r4, #12]
 80009a4:	2300      	movs	r3, #0
 80009a6:	6063      	str	r3, [r4, #4]
 80009a8:	6923      	ldr	r3, [r4, #16]
 80009aa:	6023      	str	r3, [r4, #0]
 80009ac:	89a3      	ldrh	r3, [r4, #12]
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	81a3      	strh	r3, [r4, #12]
 80009b4:	6923      	ldr	r3, [r4, #16]
 80009b6:	b94b      	cbnz	r3, 80009cc <__swsetup_r+0x7c>
 80009b8:	89a3      	ldrh	r3, [r4, #12]
 80009ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80009be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009c2:	d003      	beq.n	80009cc <__swsetup_r+0x7c>
 80009c4:	4621      	mov	r1, r4
 80009c6:	4628      	mov	r0, r5
 80009c8:	f000 fd36 	bl	8001438 <__smakebuf_r>
 80009cc:	89a0      	ldrh	r0, [r4, #12]
 80009ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009d2:	f010 0301 	ands.w	r3, r0, #1
 80009d6:	d00a      	beq.n	80009ee <__swsetup_r+0x9e>
 80009d8:	2300      	movs	r3, #0
 80009da:	60a3      	str	r3, [r4, #8]
 80009dc:	6963      	ldr	r3, [r4, #20]
 80009de:	425b      	negs	r3, r3
 80009e0:	61a3      	str	r3, [r4, #24]
 80009e2:	6923      	ldr	r3, [r4, #16]
 80009e4:	b943      	cbnz	r3, 80009f8 <__swsetup_r+0xa8>
 80009e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80009ea:	d1c4      	bne.n	8000976 <__swsetup_r+0x26>
 80009ec:	bd38      	pop	{r3, r4, r5, pc}
 80009ee:	0781      	lsls	r1, r0, #30
 80009f0:	bf58      	it	pl
 80009f2:	6963      	ldrpl	r3, [r4, #20]
 80009f4:	60a3      	str	r3, [r4, #8]
 80009f6:	e7f4      	b.n	80009e2 <__swsetup_r+0x92>
 80009f8:	2000      	movs	r0, #0
 80009fa:	e7f7      	b.n	80009ec <__swsetup_r+0x9c>
 80009fc:	20000058 	.word	0x20000058

08000a00 <memset>:
 8000a00:	4402      	add	r2, r0
 8000a02:	4603      	mov	r3, r0
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d100      	bne.n	8000a0a <memset+0xa>
 8000a08:	4770      	bx	lr
 8000a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8000a0e:	e7f9      	b.n	8000a04 <memset+0x4>

08000a10 <_close_r>:
 8000a10:	b538      	push	{r3, r4, r5, lr}
 8000a12:	4d06      	ldr	r5, [pc, #24]	; (8000a2c <_close_r+0x1c>)
 8000a14:	2300      	movs	r3, #0
 8000a16:	4604      	mov	r4, r0
 8000a18:	4608      	mov	r0, r1
 8000a1a:	602b      	str	r3, [r5, #0]
 8000a1c:	f7ff fd53 	bl	80004c6 <_close>
 8000a20:	1c43      	adds	r3, r0, #1
 8000a22:	d102      	bne.n	8000a2a <_close_r+0x1a>
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	b103      	cbz	r3, 8000a2a <_close_r+0x1a>
 8000a28:	6023      	str	r3, [r4, #0]
 8000a2a:	bd38      	pop	{r3, r4, r5, pc}
 8000a2c:	200001b8 	.word	0x200001b8

08000a30 <_lseek_r>:
 8000a30:	b538      	push	{r3, r4, r5, lr}
 8000a32:	4d07      	ldr	r5, [pc, #28]	; (8000a50 <_lseek_r+0x20>)
 8000a34:	4604      	mov	r4, r0
 8000a36:	4608      	mov	r0, r1
 8000a38:	4611      	mov	r1, r2
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	602a      	str	r2, [r5, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	f7ff fd68 	bl	8000514 <_lseek>
 8000a44:	1c43      	adds	r3, r0, #1
 8000a46:	d102      	bne.n	8000a4e <_lseek_r+0x1e>
 8000a48:	682b      	ldr	r3, [r5, #0]
 8000a4a:	b103      	cbz	r3, 8000a4e <_lseek_r+0x1e>
 8000a4c:	6023      	str	r3, [r4, #0]
 8000a4e:	bd38      	pop	{r3, r4, r5, pc}
 8000a50:	200001b8 	.word	0x200001b8

08000a54 <_read_r>:
 8000a54:	b538      	push	{r3, r4, r5, lr}
 8000a56:	4d07      	ldr	r5, [pc, #28]	; (8000a74 <_read_r+0x20>)
 8000a58:	4604      	mov	r4, r0
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	2200      	movs	r2, #0
 8000a60:	602a      	str	r2, [r5, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	f7ff fcf6 	bl	8000454 <_read>
 8000a68:	1c43      	adds	r3, r0, #1
 8000a6a:	d102      	bne.n	8000a72 <_read_r+0x1e>
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	b103      	cbz	r3, 8000a72 <_read_r+0x1e>
 8000a70:	6023      	str	r3, [r4, #0]
 8000a72:	bd38      	pop	{r3, r4, r5, pc}
 8000a74:	200001b8 	.word	0x200001b8

08000a78 <_write_r>:
 8000a78:	b538      	push	{r3, r4, r5, lr}
 8000a7a:	4d07      	ldr	r5, [pc, #28]	; (8000a98 <_write_r+0x20>)
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4608      	mov	r0, r1
 8000a80:	4611      	mov	r1, r2
 8000a82:	2200      	movs	r2, #0
 8000a84:	602a      	str	r2, [r5, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	f7ff fd01 	bl	800048e <_write>
 8000a8c:	1c43      	adds	r3, r0, #1
 8000a8e:	d102      	bne.n	8000a96 <_write_r+0x1e>
 8000a90:	682b      	ldr	r3, [r5, #0]
 8000a92:	b103      	cbz	r3, 8000a96 <_write_r+0x1e>
 8000a94:	6023      	str	r3, [r4, #0]
 8000a96:	bd38      	pop	{r3, r4, r5, pc}
 8000a98:	200001b8 	.word	0x200001b8

08000a9c <__errno>:
 8000a9c:	4b01      	ldr	r3, [pc, #4]	; (8000aa4 <__errno+0x8>)
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000058 	.word	0x20000058

08000aa8 <__libc_init_array>:
 8000aa8:	b570      	push	{r4, r5, r6, lr}
 8000aaa:	4d0d      	ldr	r5, [pc, #52]	; (8000ae0 <__libc_init_array+0x38>)
 8000aac:	4c0d      	ldr	r4, [pc, #52]	; (8000ae4 <__libc_init_array+0x3c>)
 8000aae:	1b64      	subs	r4, r4, r5
 8000ab0:	10a4      	asrs	r4, r4, #2
 8000ab2:	2600      	movs	r6, #0
 8000ab4:	42a6      	cmp	r6, r4
 8000ab6:	d109      	bne.n	8000acc <__libc_init_array+0x24>
 8000ab8:	4d0b      	ldr	r5, [pc, #44]	; (8000ae8 <__libc_init_array+0x40>)
 8000aba:	4c0c      	ldr	r4, [pc, #48]	; (8000aec <__libc_init_array+0x44>)
 8000abc:	f000 fd2a 	bl	8001514 <_init>
 8000ac0:	1b64      	subs	r4, r4, r5
 8000ac2:	10a4      	asrs	r4, r4, #2
 8000ac4:	2600      	movs	r6, #0
 8000ac6:	42a6      	cmp	r6, r4
 8000ac8:	d105      	bne.n	8000ad6 <__libc_init_array+0x2e>
 8000aca:	bd70      	pop	{r4, r5, r6, pc}
 8000acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad0:	4798      	blx	r3
 8000ad2:	3601      	adds	r6, #1
 8000ad4:	e7ee      	b.n	8000ab4 <__libc_init_array+0xc>
 8000ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ada:	4798      	blx	r3
 8000adc:	3601      	adds	r6, #1
 8000ade:	e7f2      	b.n	8000ac6 <__libc_init_array+0x1e>
 8000ae0:	0800158c 	.word	0x0800158c
 8000ae4:	0800158c 	.word	0x0800158c
 8000ae8:	0800158c 	.word	0x0800158c
 8000aec:	08001590 	.word	0x08001590

08000af0 <__retarget_lock_init_recursive>:
 8000af0:	4770      	bx	lr

08000af2 <__retarget_lock_acquire_recursive>:
 8000af2:	4770      	bx	lr

08000af4 <__retarget_lock_release_recursive>:
 8000af4:	4770      	bx	lr
	...

08000af8 <_free_r>:
 8000af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000afa:	2900      	cmp	r1, #0
 8000afc:	d044      	beq.n	8000b88 <_free_r+0x90>
 8000afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b02:	9001      	str	r0, [sp, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f1a1 0404 	sub.w	r4, r1, #4
 8000b0a:	bfb8      	it	lt
 8000b0c:	18e4      	addlt	r4, r4, r3
 8000b0e:	f000 f8df 	bl	8000cd0 <__malloc_lock>
 8000b12:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <_free_r+0x94>)
 8000b14:	9801      	ldr	r0, [sp, #4]
 8000b16:	6813      	ldr	r3, [r2, #0]
 8000b18:	b933      	cbnz	r3, 8000b28 <_free_r+0x30>
 8000b1a:	6063      	str	r3, [r4, #4]
 8000b1c:	6014      	str	r4, [r2, #0]
 8000b1e:	b003      	add	sp, #12
 8000b20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000b24:	f000 b8da 	b.w	8000cdc <__malloc_unlock>
 8000b28:	42a3      	cmp	r3, r4
 8000b2a:	d908      	bls.n	8000b3e <_free_r+0x46>
 8000b2c:	6825      	ldr	r5, [r4, #0]
 8000b2e:	1961      	adds	r1, r4, r5
 8000b30:	428b      	cmp	r3, r1
 8000b32:	bf01      	itttt	eq
 8000b34:	6819      	ldreq	r1, [r3, #0]
 8000b36:	685b      	ldreq	r3, [r3, #4]
 8000b38:	1949      	addeq	r1, r1, r5
 8000b3a:	6021      	streq	r1, [r4, #0]
 8000b3c:	e7ed      	b.n	8000b1a <_free_r+0x22>
 8000b3e:	461a      	mov	r2, r3
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	b10b      	cbz	r3, 8000b48 <_free_r+0x50>
 8000b44:	42a3      	cmp	r3, r4
 8000b46:	d9fa      	bls.n	8000b3e <_free_r+0x46>
 8000b48:	6811      	ldr	r1, [r2, #0]
 8000b4a:	1855      	adds	r5, r2, r1
 8000b4c:	42a5      	cmp	r5, r4
 8000b4e:	d10b      	bne.n	8000b68 <_free_r+0x70>
 8000b50:	6824      	ldr	r4, [r4, #0]
 8000b52:	4421      	add	r1, r4
 8000b54:	1854      	adds	r4, r2, r1
 8000b56:	42a3      	cmp	r3, r4
 8000b58:	6011      	str	r1, [r2, #0]
 8000b5a:	d1e0      	bne.n	8000b1e <_free_r+0x26>
 8000b5c:	681c      	ldr	r4, [r3, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	6053      	str	r3, [r2, #4]
 8000b62:	440c      	add	r4, r1
 8000b64:	6014      	str	r4, [r2, #0]
 8000b66:	e7da      	b.n	8000b1e <_free_r+0x26>
 8000b68:	d902      	bls.n	8000b70 <_free_r+0x78>
 8000b6a:	230c      	movs	r3, #12
 8000b6c:	6003      	str	r3, [r0, #0]
 8000b6e:	e7d6      	b.n	8000b1e <_free_r+0x26>
 8000b70:	6825      	ldr	r5, [r4, #0]
 8000b72:	1961      	adds	r1, r4, r5
 8000b74:	428b      	cmp	r3, r1
 8000b76:	bf04      	itt	eq
 8000b78:	6819      	ldreq	r1, [r3, #0]
 8000b7a:	685b      	ldreq	r3, [r3, #4]
 8000b7c:	6063      	str	r3, [r4, #4]
 8000b7e:	bf04      	itt	eq
 8000b80:	1949      	addeq	r1, r1, r5
 8000b82:	6021      	streq	r1, [r4, #0]
 8000b84:	6054      	str	r4, [r2, #4]
 8000b86:	e7ca      	b.n	8000b1e <_free_r+0x26>
 8000b88:	b003      	add	sp, #12
 8000b8a:	bd30      	pop	{r4, r5, pc}
 8000b8c:	200001c0 	.word	0x200001c0

08000b90 <sbrk_aligned>:
 8000b90:	b570      	push	{r4, r5, r6, lr}
 8000b92:	4e0e      	ldr	r6, [pc, #56]	; (8000bcc <sbrk_aligned+0x3c>)
 8000b94:	460c      	mov	r4, r1
 8000b96:	6831      	ldr	r1, [r6, #0]
 8000b98:	4605      	mov	r5, r0
 8000b9a:	b911      	cbnz	r1, 8000ba2 <sbrk_aligned+0x12>
 8000b9c:	f000 fcaa 	bl	80014f4 <_sbrk_r>
 8000ba0:	6030      	str	r0, [r6, #0]
 8000ba2:	4621      	mov	r1, r4
 8000ba4:	4628      	mov	r0, r5
 8000ba6:	f000 fca5 	bl	80014f4 <_sbrk_r>
 8000baa:	1c43      	adds	r3, r0, #1
 8000bac:	d00a      	beq.n	8000bc4 <sbrk_aligned+0x34>
 8000bae:	1cc4      	adds	r4, r0, #3
 8000bb0:	f024 0403 	bic.w	r4, r4, #3
 8000bb4:	42a0      	cmp	r0, r4
 8000bb6:	d007      	beq.n	8000bc8 <sbrk_aligned+0x38>
 8000bb8:	1a21      	subs	r1, r4, r0
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f000 fc9a 	bl	80014f4 <_sbrk_r>
 8000bc0:	3001      	adds	r0, #1
 8000bc2:	d101      	bne.n	8000bc8 <sbrk_aligned+0x38>
 8000bc4:	f04f 34ff 	mov.w	r4, #4294967295
 8000bc8:	4620      	mov	r0, r4
 8000bca:	bd70      	pop	{r4, r5, r6, pc}
 8000bcc:	200001c4 	.word	0x200001c4

08000bd0 <_malloc_r>:
 8000bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bd4:	1ccd      	adds	r5, r1, #3
 8000bd6:	f025 0503 	bic.w	r5, r5, #3
 8000bda:	3508      	adds	r5, #8
 8000bdc:	2d0c      	cmp	r5, #12
 8000bde:	bf38      	it	cc
 8000be0:	250c      	movcc	r5, #12
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	4607      	mov	r7, r0
 8000be6:	db01      	blt.n	8000bec <_malloc_r+0x1c>
 8000be8:	42a9      	cmp	r1, r5
 8000bea:	d905      	bls.n	8000bf8 <_malloc_r+0x28>
 8000bec:	230c      	movs	r3, #12
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bf8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000ccc <_malloc_r+0xfc>
 8000bfc:	f000 f868 	bl	8000cd0 <__malloc_lock>
 8000c00:	f8d8 3000 	ldr.w	r3, [r8]
 8000c04:	461c      	mov	r4, r3
 8000c06:	bb5c      	cbnz	r4, 8000c60 <_malloc_r+0x90>
 8000c08:	4629      	mov	r1, r5
 8000c0a:	4638      	mov	r0, r7
 8000c0c:	f7ff ffc0 	bl	8000b90 <sbrk_aligned>
 8000c10:	1c43      	adds	r3, r0, #1
 8000c12:	4604      	mov	r4, r0
 8000c14:	d155      	bne.n	8000cc2 <_malloc_r+0xf2>
 8000c16:	f8d8 4000 	ldr.w	r4, [r8]
 8000c1a:	4626      	mov	r6, r4
 8000c1c:	2e00      	cmp	r6, #0
 8000c1e:	d145      	bne.n	8000cac <_malloc_r+0xdc>
 8000c20:	2c00      	cmp	r4, #0
 8000c22:	d048      	beq.n	8000cb6 <_malloc_r+0xe6>
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	4631      	mov	r1, r6
 8000c28:	4638      	mov	r0, r7
 8000c2a:	eb04 0903 	add.w	r9, r4, r3
 8000c2e:	f000 fc61 	bl	80014f4 <_sbrk_r>
 8000c32:	4581      	cmp	r9, r0
 8000c34:	d13f      	bne.n	8000cb6 <_malloc_r+0xe6>
 8000c36:	6821      	ldr	r1, [r4, #0]
 8000c38:	1a6d      	subs	r5, r5, r1
 8000c3a:	4629      	mov	r1, r5
 8000c3c:	4638      	mov	r0, r7
 8000c3e:	f7ff ffa7 	bl	8000b90 <sbrk_aligned>
 8000c42:	3001      	adds	r0, #1
 8000c44:	d037      	beq.n	8000cb6 <_malloc_r+0xe6>
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	442b      	add	r3, r5
 8000c4a:	6023      	str	r3, [r4, #0]
 8000c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d038      	beq.n	8000cc6 <_malloc_r+0xf6>
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	42a2      	cmp	r2, r4
 8000c58:	d12b      	bne.n	8000cb2 <_malloc_r+0xe2>
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	e00f      	b.n	8000c80 <_malloc_r+0xb0>
 8000c60:	6822      	ldr	r2, [r4, #0]
 8000c62:	1b52      	subs	r2, r2, r5
 8000c64:	d41f      	bmi.n	8000ca6 <_malloc_r+0xd6>
 8000c66:	2a0b      	cmp	r2, #11
 8000c68:	d917      	bls.n	8000c9a <_malloc_r+0xca>
 8000c6a:	1961      	adds	r1, r4, r5
 8000c6c:	42a3      	cmp	r3, r4
 8000c6e:	6025      	str	r5, [r4, #0]
 8000c70:	bf18      	it	ne
 8000c72:	6059      	strne	r1, [r3, #4]
 8000c74:	6863      	ldr	r3, [r4, #4]
 8000c76:	bf08      	it	eq
 8000c78:	f8c8 1000 	streq.w	r1, [r8]
 8000c7c:	5162      	str	r2, [r4, r5]
 8000c7e:	604b      	str	r3, [r1, #4]
 8000c80:	4638      	mov	r0, r7
 8000c82:	f104 060b 	add.w	r6, r4, #11
 8000c86:	f000 f829 	bl	8000cdc <__malloc_unlock>
 8000c8a:	f026 0607 	bic.w	r6, r6, #7
 8000c8e:	1d23      	adds	r3, r4, #4
 8000c90:	1af2      	subs	r2, r6, r3
 8000c92:	d0ae      	beq.n	8000bf2 <_malloc_r+0x22>
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	50a3      	str	r3, [r4, r2]
 8000c98:	e7ab      	b.n	8000bf2 <_malloc_r+0x22>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	6862      	ldr	r2, [r4, #4]
 8000c9e:	d1dd      	bne.n	8000c5c <_malloc_r+0x8c>
 8000ca0:	f8c8 2000 	str.w	r2, [r8]
 8000ca4:	e7ec      	b.n	8000c80 <_malloc_r+0xb0>
 8000ca6:	4623      	mov	r3, r4
 8000ca8:	6864      	ldr	r4, [r4, #4]
 8000caa:	e7ac      	b.n	8000c06 <_malloc_r+0x36>
 8000cac:	4634      	mov	r4, r6
 8000cae:	6876      	ldr	r6, [r6, #4]
 8000cb0:	e7b4      	b.n	8000c1c <_malloc_r+0x4c>
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	e7cc      	b.n	8000c50 <_malloc_r+0x80>
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4638      	mov	r0, r7
 8000cbc:	f000 f80e 	bl	8000cdc <__malloc_unlock>
 8000cc0:	e797      	b.n	8000bf2 <_malloc_r+0x22>
 8000cc2:	6025      	str	r5, [r4, #0]
 8000cc4:	e7dc      	b.n	8000c80 <_malloc_r+0xb0>
 8000cc6:	605b      	str	r3, [r3, #4]
 8000cc8:	deff      	udf	#255	; 0xff
 8000cca:	bf00      	nop
 8000ccc:	200001c0 	.word	0x200001c0

08000cd0 <__malloc_lock>:
 8000cd0:	4801      	ldr	r0, [pc, #4]	; (8000cd8 <__malloc_lock+0x8>)
 8000cd2:	f7ff bf0e 	b.w	8000af2 <__retarget_lock_acquire_recursive>
 8000cd6:	bf00      	nop
 8000cd8:	200001bc 	.word	0x200001bc

08000cdc <__malloc_unlock>:
 8000cdc:	4801      	ldr	r0, [pc, #4]	; (8000ce4 <__malloc_unlock+0x8>)
 8000cde:	f7ff bf09 	b.w	8000af4 <__retarget_lock_release_recursive>
 8000ce2:	bf00      	nop
 8000ce4:	200001bc 	.word	0x200001bc

08000ce8 <__sfputc_r>:
 8000ce8:	6893      	ldr	r3, [r2, #8]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	b410      	push	{r4}
 8000cf0:	6093      	str	r3, [r2, #8]
 8000cf2:	da08      	bge.n	8000d06 <__sfputc_r+0x1e>
 8000cf4:	6994      	ldr	r4, [r2, #24]
 8000cf6:	42a3      	cmp	r3, r4
 8000cf8:	db01      	blt.n	8000cfe <__sfputc_r+0x16>
 8000cfa:	290a      	cmp	r1, #10
 8000cfc:	d103      	bne.n	8000d06 <__sfputc_r+0x1e>
 8000cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d02:	f7ff bde8 	b.w	80008d6 <__swbuf_r>
 8000d06:	6813      	ldr	r3, [r2, #0]
 8000d08:	1c58      	adds	r0, r3, #1
 8000d0a:	6010      	str	r0, [r2, #0]
 8000d0c:	7019      	strb	r1, [r3, #0]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <__sfputs_r>:
 8000d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d18:	4606      	mov	r6, r0
 8000d1a:	460f      	mov	r7, r1
 8000d1c:	4614      	mov	r4, r2
 8000d1e:	18d5      	adds	r5, r2, r3
 8000d20:	42ac      	cmp	r4, r5
 8000d22:	d101      	bne.n	8000d28 <__sfputs_r+0x12>
 8000d24:	2000      	movs	r0, #0
 8000d26:	e007      	b.n	8000d38 <__sfputs_r+0x22>
 8000d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d2c:	463a      	mov	r2, r7
 8000d2e:	4630      	mov	r0, r6
 8000d30:	f7ff ffda 	bl	8000ce8 <__sfputc_r>
 8000d34:	1c43      	adds	r3, r0, #1
 8000d36:	d1f3      	bne.n	8000d20 <__sfputs_r+0xa>
 8000d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d3c <_vfiprintf_r>:
 8000d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d40:	460d      	mov	r5, r1
 8000d42:	b09d      	sub	sp, #116	; 0x74
 8000d44:	4614      	mov	r4, r2
 8000d46:	4698      	mov	r8, r3
 8000d48:	4606      	mov	r6, r0
 8000d4a:	b118      	cbz	r0, 8000d54 <_vfiprintf_r+0x18>
 8000d4c:	6a03      	ldr	r3, [r0, #32]
 8000d4e:	b90b      	cbnz	r3, 8000d54 <_vfiprintf_r+0x18>
 8000d50:	f7ff fcda 	bl	8000708 <__sinit>
 8000d54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d56:	07d9      	lsls	r1, r3, #31
 8000d58:	d405      	bmi.n	8000d66 <_vfiprintf_r+0x2a>
 8000d5a:	89ab      	ldrh	r3, [r5, #12]
 8000d5c:	059a      	lsls	r2, r3, #22
 8000d5e:	d402      	bmi.n	8000d66 <_vfiprintf_r+0x2a>
 8000d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d62:	f7ff fec6 	bl	8000af2 <__retarget_lock_acquire_recursive>
 8000d66:	89ab      	ldrh	r3, [r5, #12]
 8000d68:	071b      	lsls	r3, r3, #28
 8000d6a:	d501      	bpl.n	8000d70 <_vfiprintf_r+0x34>
 8000d6c:	692b      	ldr	r3, [r5, #16]
 8000d6e:	b99b      	cbnz	r3, 8000d98 <_vfiprintf_r+0x5c>
 8000d70:	4629      	mov	r1, r5
 8000d72:	4630      	mov	r0, r6
 8000d74:	f7ff fdec 	bl	8000950 <__swsetup_r>
 8000d78:	b170      	cbz	r0, 8000d98 <_vfiprintf_r+0x5c>
 8000d7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d7c:	07dc      	lsls	r4, r3, #31
 8000d7e:	d504      	bpl.n	8000d8a <_vfiprintf_r+0x4e>
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	b01d      	add	sp, #116	; 0x74
 8000d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d8a:	89ab      	ldrh	r3, [r5, #12]
 8000d8c:	0598      	lsls	r0, r3, #22
 8000d8e:	d4f7      	bmi.n	8000d80 <_vfiprintf_r+0x44>
 8000d90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d92:	f7ff feaf 	bl	8000af4 <__retarget_lock_release_recursive>
 8000d96:	e7f3      	b.n	8000d80 <_vfiprintf_r+0x44>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d9c:	2320      	movs	r3, #32
 8000d9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000da2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000da6:	2330      	movs	r3, #48	; 0x30
 8000da8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000f5c <_vfiprintf_r+0x220>
 8000dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000db0:	f04f 0901 	mov.w	r9, #1
 8000db4:	4623      	mov	r3, r4
 8000db6:	469a      	mov	sl, r3
 8000db8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dbc:	b10a      	cbz	r2, 8000dc2 <_vfiprintf_r+0x86>
 8000dbe:	2a25      	cmp	r2, #37	; 0x25
 8000dc0:	d1f9      	bne.n	8000db6 <_vfiprintf_r+0x7a>
 8000dc2:	ebba 0b04 	subs.w	fp, sl, r4
 8000dc6:	d00b      	beq.n	8000de0 <_vfiprintf_r+0xa4>
 8000dc8:	465b      	mov	r3, fp
 8000dca:	4622      	mov	r2, r4
 8000dcc:	4629      	mov	r1, r5
 8000dce:	4630      	mov	r0, r6
 8000dd0:	f7ff ffa1 	bl	8000d16 <__sfputs_r>
 8000dd4:	3001      	adds	r0, #1
 8000dd6:	f000 80a9 	beq.w	8000f2c <_vfiprintf_r+0x1f0>
 8000dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ddc:	445a      	add	r2, fp
 8000dde:	9209      	str	r2, [sp, #36]	; 0x24
 8000de0:	f89a 3000 	ldrb.w	r3, [sl]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 80a1 	beq.w	8000f2c <_vfiprintf_r+0x1f0>
 8000dea:	2300      	movs	r3, #0
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000df4:	f10a 0a01 	add.w	sl, sl, #1
 8000df8:	9304      	str	r3, [sp, #16]
 8000dfa:	9307      	str	r3, [sp, #28]
 8000dfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e00:	931a      	str	r3, [sp, #104]	; 0x68
 8000e02:	4654      	mov	r4, sl
 8000e04:	2205      	movs	r2, #5
 8000e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e0a:	4854      	ldr	r0, [pc, #336]	; (8000f5c <_vfiprintf_r+0x220>)
 8000e0c:	f7ff f9e8 	bl	80001e0 <memchr>
 8000e10:	9a04      	ldr	r2, [sp, #16]
 8000e12:	b9d8      	cbnz	r0, 8000e4c <_vfiprintf_r+0x110>
 8000e14:	06d1      	lsls	r1, r2, #27
 8000e16:	bf44      	itt	mi
 8000e18:	2320      	movmi	r3, #32
 8000e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e1e:	0713      	lsls	r3, r2, #28
 8000e20:	bf44      	itt	mi
 8000e22:	232b      	movmi	r3, #43	; 0x2b
 8000e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e28:	f89a 3000 	ldrb.w	r3, [sl]
 8000e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8000e2e:	d015      	beq.n	8000e5c <_vfiprintf_r+0x120>
 8000e30:	9a07      	ldr	r2, [sp, #28]
 8000e32:	4654      	mov	r4, sl
 8000e34:	2000      	movs	r0, #0
 8000e36:	f04f 0c0a 	mov.w	ip, #10
 8000e3a:	4621      	mov	r1, r4
 8000e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e40:	3b30      	subs	r3, #48	; 0x30
 8000e42:	2b09      	cmp	r3, #9
 8000e44:	d94d      	bls.n	8000ee2 <_vfiprintf_r+0x1a6>
 8000e46:	b1b0      	cbz	r0, 8000e76 <_vfiprintf_r+0x13a>
 8000e48:	9207      	str	r2, [sp, #28]
 8000e4a:	e014      	b.n	8000e76 <_vfiprintf_r+0x13a>
 8000e4c:	eba0 0308 	sub.w	r3, r0, r8
 8000e50:	fa09 f303 	lsl.w	r3, r9, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	9304      	str	r3, [sp, #16]
 8000e58:	46a2      	mov	sl, r4
 8000e5a:	e7d2      	b.n	8000e02 <_vfiprintf_r+0xc6>
 8000e5c:	9b03      	ldr	r3, [sp, #12]
 8000e5e:	1d19      	adds	r1, r3, #4
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	9103      	str	r1, [sp, #12]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	bfbb      	ittet	lt
 8000e68:	425b      	neglt	r3, r3
 8000e6a:	f042 0202 	orrlt.w	r2, r2, #2
 8000e6e:	9307      	strge	r3, [sp, #28]
 8000e70:	9307      	strlt	r3, [sp, #28]
 8000e72:	bfb8      	it	lt
 8000e74:	9204      	strlt	r2, [sp, #16]
 8000e76:	7823      	ldrb	r3, [r4, #0]
 8000e78:	2b2e      	cmp	r3, #46	; 0x2e
 8000e7a:	d10c      	bne.n	8000e96 <_vfiprintf_r+0x15a>
 8000e7c:	7863      	ldrb	r3, [r4, #1]
 8000e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8000e80:	d134      	bne.n	8000eec <_vfiprintf_r+0x1b0>
 8000e82:	9b03      	ldr	r3, [sp, #12]
 8000e84:	1d1a      	adds	r2, r3, #4
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	9203      	str	r2, [sp, #12]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bfb8      	it	lt
 8000e8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e92:	3402      	adds	r4, #2
 8000e94:	9305      	str	r3, [sp, #20]
 8000e96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000f6c <_vfiprintf_r+0x230>
 8000e9a:	7821      	ldrb	r1, [r4, #0]
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	4650      	mov	r0, sl
 8000ea0:	f7ff f99e 	bl	80001e0 <memchr>
 8000ea4:	b138      	cbz	r0, 8000eb6 <_vfiprintf_r+0x17a>
 8000ea6:	9b04      	ldr	r3, [sp, #16]
 8000ea8:	eba0 000a 	sub.w	r0, r0, sl
 8000eac:	2240      	movs	r2, #64	; 0x40
 8000eae:	4082      	lsls	r2, r0
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	3401      	adds	r4, #1
 8000eb4:	9304      	str	r3, [sp, #16]
 8000eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eba:	4829      	ldr	r0, [pc, #164]	; (8000f60 <_vfiprintf_r+0x224>)
 8000ebc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ec0:	2206      	movs	r2, #6
 8000ec2:	f7ff f98d 	bl	80001e0 <memchr>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d03f      	beq.n	8000f4a <_vfiprintf_r+0x20e>
 8000eca:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <_vfiprintf_r+0x228>)
 8000ecc:	bb1b      	cbnz	r3, 8000f16 <_vfiprintf_r+0x1da>
 8000ece:	9b03      	ldr	r3, [sp, #12]
 8000ed0:	3307      	adds	r3, #7
 8000ed2:	f023 0307 	bic.w	r3, r3, #7
 8000ed6:	3308      	adds	r3, #8
 8000ed8:	9303      	str	r3, [sp, #12]
 8000eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000edc:	443b      	add	r3, r7
 8000ede:	9309      	str	r3, [sp, #36]	; 0x24
 8000ee0:	e768      	b.n	8000db4 <_vfiprintf_r+0x78>
 8000ee2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ee6:	460c      	mov	r4, r1
 8000ee8:	2001      	movs	r0, #1
 8000eea:	e7a6      	b.n	8000e3a <_vfiprintf_r+0xfe>
 8000eec:	2300      	movs	r3, #0
 8000eee:	3401      	adds	r4, #1
 8000ef0:	9305      	str	r3, [sp, #20]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 0c0a 	mov.w	ip, #10
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000efe:	3a30      	subs	r2, #48	; 0x30
 8000f00:	2a09      	cmp	r2, #9
 8000f02:	d903      	bls.n	8000f0c <_vfiprintf_r+0x1d0>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0c6      	beq.n	8000e96 <_vfiprintf_r+0x15a>
 8000f08:	9105      	str	r1, [sp, #20]
 8000f0a:	e7c4      	b.n	8000e96 <_vfiprintf_r+0x15a>
 8000f0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f10:	4604      	mov	r4, r0
 8000f12:	2301      	movs	r3, #1
 8000f14:	e7f0      	b.n	8000ef8 <_vfiprintf_r+0x1bc>
 8000f16:	ab03      	add	r3, sp, #12
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	462a      	mov	r2, r5
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <_vfiprintf_r+0x22c>)
 8000f1e:	a904      	add	r1, sp, #16
 8000f20:	4630      	mov	r0, r6
 8000f22:	f3af 8000 	nop.w
 8000f26:	4607      	mov	r7, r0
 8000f28:	1c78      	adds	r0, r7, #1
 8000f2a:	d1d6      	bne.n	8000eda <_vfiprintf_r+0x19e>
 8000f2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f2e:	07d9      	lsls	r1, r3, #31
 8000f30:	d405      	bmi.n	8000f3e <_vfiprintf_r+0x202>
 8000f32:	89ab      	ldrh	r3, [r5, #12]
 8000f34:	059a      	lsls	r2, r3, #22
 8000f36:	d402      	bmi.n	8000f3e <_vfiprintf_r+0x202>
 8000f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f3a:	f7ff fddb 	bl	8000af4 <__retarget_lock_release_recursive>
 8000f3e:	89ab      	ldrh	r3, [r5, #12]
 8000f40:	065b      	lsls	r3, r3, #25
 8000f42:	f53f af1d 	bmi.w	8000d80 <_vfiprintf_r+0x44>
 8000f46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f48:	e71c      	b.n	8000d84 <_vfiprintf_r+0x48>
 8000f4a:	ab03      	add	r3, sp, #12
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	462a      	mov	r2, r5
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <_vfiprintf_r+0x22c>)
 8000f52:	a904      	add	r1, sp, #16
 8000f54:	4630      	mov	r0, r6
 8000f56:	f000 f879 	bl	800104c <_printf_i>
 8000f5a:	e7e4      	b.n	8000f26 <_vfiprintf_r+0x1ea>
 8000f5c:	08001557 	.word	0x08001557
 8000f60:	08001561 	.word	0x08001561
 8000f64:	00000000 	.word	0x00000000
 8000f68:	08000d17 	.word	0x08000d17
 8000f6c:	0800155d 	.word	0x0800155d

08000f70 <_printf_common>:
 8000f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f74:	4616      	mov	r6, r2
 8000f76:	4699      	mov	r9, r3
 8000f78:	688a      	ldr	r2, [r1, #8]
 8000f7a:	690b      	ldr	r3, [r1, #16]
 8000f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f80:	4293      	cmp	r3, r2
 8000f82:	bfb8      	it	lt
 8000f84:	4613      	movlt	r3, r2
 8000f86:	6033      	str	r3, [r6, #0]
 8000f88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f8c:	4607      	mov	r7, r0
 8000f8e:	460c      	mov	r4, r1
 8000f90:	b10a      	cbz	r2, 8000f96 <_printf_common+0x26>
 8000f92:	3301      	adds	r3, #1
 8000f94:	6033      	str	r3, [r6, #0]
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	0699      	lsls	r1, r3, #26
 8000f9a:	bf42      	ittt	mi
 8000f9c:	6833      	ldrmi	r3, [r6, #0]
 8000f9e:	3302      	addmi	r3, #2
 8000fa0:	6033      	strmi	r3, [r6, #0]
 8000fa2:	6825      	ldr	r5, [r4, #0]
 8000fa4:	f015 0506 	ands.w	r5, r5, #6
 8000fa8:	d106      	bne.n	8000fb8 <_printf_common+0x48>
 8000faa:	f104 0a19 	add.w	sl, r4, #25
 8000fae:	68e3      	ldr	r3, [r4, #12]
 8000fb0:	6832      	ldr	r2, [r6, #0]
 8000fb2:	1a9b      	subs	r3, r3, r2
 8000fb4:	42ab      	cmp	r3, r5
 8000fb6:	dc26      	bgt.n	8001006 <_printf_common+0x96>
 8000fb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fbc:	1e13      	subs	r3, r2, #0
 8000fbe:	6822      	ldr	r2, [r4, #0]
 8000fc0:	bf18      	it	ne
 8000fc2:	2301      	movne	r3, #1
 8000fc4:	0692      	lsls	r2, r2, #26
 8000fc6:	d42b      	bmi.n	8001020 <_printf_common+0xb0>
 8000fc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000fcc:	4649      	mov	r1, r9
 8000fce:	4638      	mov	r0, r7
 8000fd0:	47c0      	blx	r8
 8000fd2:	3001      	adds	r0, #1
 8000fd4:	d01e      	beq.n	8001014 <_printf_common+0xa4>
 8000fd6:	6823      	ldr	r3, [r4, #0]
 8000fd8:	6922      	ldr	r2, [r4, #16]
 8000fda:	f003 0306 	and.w	r3, r3, #6
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf02      	ittt	eq
 8000fe2:	68e5      	ldreq	r5, [r4, #12]
 8000fe4:	6833      	ldreq	r3, [r6, #0]
 8000fe6:	1aed      	subeq	r5, r5, r3
 8000fe8:	68a3      	ldr	r3, [r4, #8]
 8000fea:	bf0c      	ite	eq
 8000fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ff0:	2500      	movne	r5, #0
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	bfc4      	itt	gt
 8000ff6:	1a9b      	subgt	r3, r3, r2
 8000ff8:	18ed      	addgt	r5, r5, r3
 8000ffa:	2600      	movs	r6, #0
 8000ffc:	341a      	adds	r4, #26
 8000ffe:	42b5      	cmp	r5, r6
 8001000:	d11a      	bne.n	8001038 <_printf_common+0xc8>
 8001002:	2000      	movs	r0, #0
 8001004:	e008      	b.n	8001018 <_printf_common+0xa8>
 8001006:	2301      	movs	r3, #1
 8001008:	4652      	mov	r2, sl
 800100a:	4649      	mov	r1, r9
 800100c:	4638      	mov	r0, r7
 800100e:	47c0      	blx	r8
 8001010:	3001      	adds	r0, #1
 8001012:	d103      	bne.n	800101c <_printf_common+0xac>
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101c:	3501      	adds	r5, #1
 800101e:	e7c6      	b.n	8000fae <_printf_common+0x3e>
 8001020:	18e1      	adds	r1, r4, r3
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	2030      	movs	r0, #48	; 0x30
 8001026:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800102a:	4422      	add	r2, r4
 800102c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001030:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001034:	3302      	adds	r3, #2
 8001036:	e7c7      	b.n	8000fc8 <_printf_common+0x58>
 8001038:	2301      	movs	r3, #1
 800103a:	4622      	mov	r2, r4
 800103c:	4649      	mov	r1, r9
 800103e:	4638      	mov	r0, r7
 8001040:	47c0      	blx	r8
 8001042:	3001      	adds	r0, #1
 8001044:	d0e6      	beq.n	8001014 <_printf_common+0xa4>
 8001046:	3601      	adds	r6, #1
 8001048:	e7d9      	b.n	8000ffe <_printf_common+0x8e>
	...

0800104c <_printf_i>:
 800104c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001050:	7e0f      	ldrb	r7, [r1, #24]
 8001052:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001054:	2f78      	cmp	r7, #120	; 0x78
 8001056:	4691      	mov	r9, r2
 8001058:	4680      	mov	r8, r0
 800105a:	460c      	mov	r4, r1
 800105c:	469a      	mov	sl, r3
 800105e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001062:	d807      	bhi.n	8001074 <_printf_i+0x28>
 8001064:	2f62      	cmp	r7, #98	; 0x62
 8001066:	d80a      	bhi.n	800107e <_printf_i+0x32>
 8001068:	2f00      	cmp	r7, #0
 800106a:	f000 80d4 	beq.w	8001216 <_printf_i+0x1ca>
 800106e:	2f58      	cmp	r7, #88	; 0x58
 8001070:	f000 80c0 	beq.w	80011f4 <_printf_i+0x1a8>
 8001074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800107c:	e03a      	b.n	80010f4 <_printf_i+0xa8>
 800107e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001082:	2b15      	cmp	r3, #21
 8001084:	d8f6      	bhi.n	8001074 <_printf_i+0x28>
 8001086:	a101      	add	r1, pc, #4	; (adr r1, 800108c <_printf_i+0x40>)
 8001088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800108c:	080010e5 	.word	0x080010e5
 8001090:	080010f9 	.word	0x080010f9
 8001094:	08001075 	.word	0x08001075
 8001098:	08001075 	.word	0x08001075
 800109c:	08001075 	.word	0x08001075
 80010a0:	08001075 	.word	0x08001075
 80010a4:	080010f9 	.word	0x080010f9
 80010a8:	08001075 	.word	0x08001075
 80010ac:	08001075 	.word	0x08001075
 80010b0:	08001075 	.word	0x08001075
 80010b4:	08001075 	.word	0x08001075
 80010b8:	080011fd 	.word	0x080011fd
 80010bc:	08001125 	.word	0x08001125
 80010c0:	080011b7 	.word	0x080011b7
 80010c4:	08001075 	.word	0x08001075
 80010c8:	08001075 	.word	0x08001075
 80010cc:	0800121f 	.word	0x0800121f
 80010d0:	08001075 	.word	0x08001075
 80010d4:	08001125 	.word	0x08001125
 80010d8:	08001075 	.word	0x08001075
 80010dc:	08001075 	.word	0x08001075
 80010e0:	080011bf 	.word	0x080011bf
 80010e4:	682b      	ldr	r3, [r5, #0]
 80010e6:	1d1a      	adds	r2, r3, #4
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	602a      	str	r2, [r5, #0]
 80010ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010f4:	2301      	movs	r3, #1
 80010f6:	e09f      	b.n	8001238 <_printf_i+0x1ec>
 80010f8:	6820      	ldr	r0, [r4, #0]
 80010fa:	682b      	ldr	r3, [r5, #0]
 80010fc:	0607      	lsls	r7, r0, #24
 80010fe:	f103 0104 	add.w	r1, r3, #4
 8001102:	6029      	str	r1, [r5, #0]
 8001104:	d501      	bpl.n	800110a <_printf_i+0xbe>
 8001106:	681e      	ldr	r6, [r3, #0]
 8001108:	e003      	b.n	8001112 <_printf_i+0xc6>
 800110a:	0646      	lsls	r6, r0, #25
 800110c:	d5fb      	bpl.n	8001106 <_printf_i+0xba>
 800110e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001112:	2e00      	cmp	r6, #0
 8001114:	da03      	bge.n	800111e <_printf_i+0xd2>
 8001116:	232d      	movs	r3, #45	; 0x2d
 8001118:	4276      	negs	r6, r6
 800111a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800111e:	485a      	ldr	r0, [pc, #360]	; (8001288 <_printf_i+0x23c>)
 8001120:	230a      	movs	r3, #10
 8001122:	e012      	b.n	800114a <_printf_i+0xfe>
 8001124:	682b      	ldr	r3, [r5, #0]
 8001126:	6820      	ldr	r0, [r4, #0]
 8001128:	1d19      	adds	r1, r3, #4
 800112a:	6029      	str	r1, [r5, #0]
 800112c:	0605      	lsls	r5, r0, #24
 800112e:	d501      	bpl.n	8001134 <_printf_i+0xe8>
 8001130:	681e      	ldr	r6, [r3, #0]
 8001132:	e002      	b.n	800113a <_printf_i+0xee>
 8001134:	0641      	lsls	r1, r0, #25
 8001136:	d5fb      	bpl.n	8001130 <_printf_i+0xe4>
 8001138:	881e      	ldrh	r6, [r3, #0]
 800113a:	4853      	ldr	r0, [pc, #332]	; (8001288 <_printf_i+0x23c>)
 800113c:	2f6f      	cmp	r7, #111	; 0x6f
 800113e:	bf0c      	ite	eq
 8001140:	2308      	moveq	r3, #8
 8001142:	230a      	movne	r3, #10
 8001144:	2100      	movs	r1, #0
 8001146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800114a:	6865      	ldr	r5, [r4, #4]
 800114c:	60a5      	str	r5, [r4, #8]
 800114e:	2d00      	cmp	r5, #0
 8001150:	bfa2      	ittt	ge
 8001152:	6821      	ldrge	r1, [r4, #0]
 8001154:	f021 0104 	bicge.w	r1, r1, #4
 8001158:	6021      	strge	r1, [r4, #0]
 800115a:	b90e      	cbnz	r6, 8001160 <_printf_i+0x114>
 800115c:	2d00      	cmp	r5, #0
 800115e:	d04b      	beq.n	80011f8 <_printf_i+0x1ac>
 8001160:	4615      	mov	r5, r2
 8001162:	fbb6 f1f3 	udiv	r1, r6, r3
 8001166:	fb03 6711 	mls	r7, r3, r1, r6
 800116a:	5dc7      	ldrb	r7, [r0, r7]
 800116c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001170:	4637      	mov	r7, r6
 8001172:	42bb      	cmp	r3, r7
 8001174:	460e      	mov	r6, r1
 8001176:	d9f4      	bls.n	8001162 <_printf_i+0x116>
 8001178:	2b08      	cmp	r3, #8
 800117a:	d10b      	bne.n	8001194 <_printf_i+0x148>
 800117c:	6823      	ldr	r3, [r4, #0]
 800117e:	07de      	lsls	r6, r3, #31
 8001180:	d508      	bpl.n	8001194 <_printf_i+0x148>
 8001182:	6923      	ldr	r3, [r4, #16]
 8001184:	6861      	ldr	r1, [r4, #4]
 8001186:	4299      	cmp	r1, r3
 8001188:	bfde      	ittt	le
 800118a:	2330      	movle	r3, #48	; 0x30
 800118c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001190:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001194:	1b52      	subs	r2, r2, r5
 8001196:	6122      	str	r2, [r4, #16]
 8001198:	f8cd a000 	str.w	sl, [sp]
 800119c:	464b      	mov	r3, r9
 800119e:	aa03      	add	r2, sp, #12
 80011a0:	4621      	mov	r1, r4
 80011a2:	4640      	mov	r0, r8
 80011a4:	f7ff fee4 	bl	8000f70 <_printf_common>
 80011a8:	3001      	adds	r0, #1
 80011aa:	d14a      	bne.n	8001242 <_printf_i+0x1f6>
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	b004      	add	sp, #16
 80011b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	f043 0320 	orr.w	r3, r3, #32
 80011bc:	6023      	str	r3, [r4, #0]
 80011be:	4833      	ldr	r0, [pc, #204]	; (800128c <_printf_i+0x240>)
 80011c0:	2778      	movs	r7, #120	; 0x78
 80011c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	6829      	ldr	r1, [r5, #0]
 80011ca:	061f      	lsls	r7, r3, #24
 80011cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80011d0:	d402      	bmi.n	80011d8 <_printf_i+0x18c>
 80011d2:	065f      	lsls	r7, r3, #25
 80011d4:	bf48      	it	mi
 80011d6:	b2b6      	uxthmi	r6, r6
 80011d8:	07df      	lsls	r7, r3, #31
 80011da:	bf48      	it	mi
 80011dc:	f043 0320 	orrmi.w	r3, r3, #32
 80011e0:	6029      	str	r1, [r5, #0]
 80011e2:	bf48      	it	mi
 80011e4:	6023      	strmi	r3, [r4, #0]
 80011e6:	b91e      	cbnz	r6, 80011f0 <_printf_i+0x1a4>
 80011e8:	6823      	ldr	r3, [r4, #0]
 80011ea:	f023 0320 	bic.w	r3, r3, #32
 80011ee:	6023      	str	r3, [r4, #0]
 80011f0:	2310      	movs	r3, #16
 80011f2:	e7a7      	b.n	8001144 <_printf_i+0xf8>
 80011f4:	4824      	ldr	r0, [pc, #144]	; (8001288 <_printf_i+0x23c>)
 80011f6:	e7e4      	b.n	80011c2 <_printf_i+0x176>
 80011f8:	4615      	mov	r5, r2
 80011fa:	e7bd      	b.n	8001178 <_printf_i+0x12c>
 80011fc:	682b      	ldr	r3, [r5, #0]
 80011fe:	6826      	ldr	r6, [r4, #0]
 8001200:	6961      	ldr	r1, [r4, #20]
 8001202:	1d18      	adds	r0, r3, #4
 8001204:	6028      	str	r0, [r5, #0]
 8001206:	0635      	lsls	r5, r6, #24
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	d501      	bpl.n	8001210 <_printf_i+0x1c4>
 800120c:	6019      	str	r1, [r3, #0]
 800120e:	e002      	b.n	8001216 <_printf_i+0x1ca>
 8001210:	0670      	lsls	r0, r6, #25
 8001212:	d5fb      	bpl.n	800120c <_printf_i+0x1c0>
 8001214:	8019      	strh	r1, [r3, #0]
 8001216:	2300      	movs	r3, #0
 8001218:	6123      	str	r3, [r4, #16]
 800121a:	4615      	mov	r5, r2
 800121c:	e7bc      	b.n	8001198 <_printf_i+0x14c>
 800121e:	682b      	ldr	r3, [r5, #0]
 8001220:	1d1a      	adds	r2, r3, #4
 8001222:	602a      	str	r2, [r5, #0]
 8001224:	681d      	ldr	r5, [r3, #0]
 8001226:	6862      	ldr	r2, [r4, #4]
 8001228:	2100      	movs	r1, #0
 800122a:	4628      	mov	r0, r5
 800122c:	f7fe ffd8 	bl	80001e0 <memchr>
 8001230:	b108      	cbz	r0, 8001236 <_printf_i+0x1ea>
 8001232:	1b40      	subs	r0, r0, r5
 8001234:	6060      	str	r0, [r4, #4]
 8001236:	6863      	ldr	r3, [r4, #4]
 8001238:	6123      	str	r3, [r4, #16]
 800123a:	2300      	movs	r3, #0
 800123c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001240:	e7aa      	b.n	8001198 <_printf_i+0x14c>
 8001242:	6923      	ldr	r3, [r4, #16]
 8001244:	462a      	mov	r2, r5
 8001246:	4649      	mov	r1, r9
 8001248:	4640      	mov	r0, r8
 800124a:	47d0      	blx	sl
 800124c:	3001      	adds	r0, #1
 800124e:	d0ad      	beq.n	80011ac <_printf_i+0x160>
 8001250:	6823      	ldr	r3, [r4, #0]
 8001252:	079b      	lsls	r3, r3, #30
 8001254:	d413      	bmi.n	800127e <_printf_i+0x232>
 8001256:	68e0      	ldr	r0, [r4, #12]
 8001258:	9b03      	ldr	r3, [sp, #12]
 800125a:	4298      	cmp	r0, r3
 800125c:	bfb8      	it	lt
 800125e:	4618      	movlt	r0, r3
 8001260:	e7a6      	b.n	80011b0 <_printf_i+0x164>
 8001262:	2301      	movs	r3, #1
 8001264:	4632      	mov	r2, r6
 8001266:	4649      	mov	r1, r9
 8001268:	4640      	mov	r0, r8
 800126a:	47d0      	blx	sl
 800126c:	3001      	adds	r0, #1
 800126e:	d09d      	beq.n	80011ac <_printf_i+0x160>
 8001270:	3501      	adds	r5, #1
 8001272:	68e3      	ldr	r3, [r4, #12]
 8001274:	9903      	ldr	r1, [sp, #12]
 8001276:	1a5b      	subs	r3, r3, r1
 8001278:	42ab      	cmp	r3, r5
 800127a:	dcf2      	bgt.n	8001262 <_printf_i+0x216>
 800127c:	e7eb      	b.n	8001256 <_printf_i+0x20a>
 800127e:	2500      	movs	r5, #0
 8001280:	f104 0619 	add.w	r6, r4, #25
 8001284:	e7f5      	b.n	8001272 <_printf_i+0x226>
 8001286:	bf00      	nop
 8001288:	08001568 	.word	0x08001568
 800128c:	08001579 	.word	0x08001579

08001290 <__sflush_r>:
 8001290:	898a      	ldrh	r2, [r1, #12]
 8001292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001296:	4605      	mov	r5, r0
 8001298:	0710      	lsls	r0, r2, #28
 800129a:	460c      	mov	r4, r1
 800129c:	d458      	bmi.n	8001350 <__sflush_r+0xc0>
 800129e:	684b      	ldr	r3, [r1, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	dc05      	bgt.n	80012b0 <__sflush_r+0x20>
 80012a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	dc02      	bgt.n	80012b0 <__sflush_r+0x20>
 80012aa:	2000      	movs	r0, #0
 80012ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012b2:	2e00      	cmp	r6, #0
 80012b4:	d0f9      	beq.n	80012aa <__sflush_r+0x1a>
 80012b6:	2300      	movs	r3, #0
 80012b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012bc:	682f      	ldr	r7, [r5, #0]
 80012be:	6a21      	ldr	r1, [r4, #32]
 80012c0:	602b      	str	r3, [r5, #0]
 80012c2:	d032      	beq.n	800132a <__sflush_r+0x9a>
 80012c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012c6:	89a3      	ldrh	r3, [r4, #12]
 80012c8:	075a      	lsls	r2, r3, #29
 80012ca:	d505      	bpl.n	80012d8 <__sflush_r+0x48>
 80012cc:	6863      	ldr	r3, [r4, #4]
 80012ce:	1ac0      	subs	r0, r0, r3
 80012d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012d2:	b10b      	cbz	r3, 80012d8 <__sflush_r+0x48>
 80012d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012d6:	1ac0      	subs	r0, r0, r3
 80012d8:	2300      	movs	r3, #0
 80012da:	4602      	mov	r2, r0
 80012dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012de:	6a21      	ldr	r1, [r4, #32]
 80012e0:	4628      	mov	r0, r5
 80012e2:	47b0      	blx	r6
 80012e4:	1c43      	adds	r3, r0, #1
 80012e6:	89a3      	ldrh	r3, [r4, #12]
 80012e8:	d106      	bne.n	80012f8 <__sflush_r+0x68>
 80012ea:	6829      	ldr	r1, [r5, #0]
 80012ec:	291d      	cmp	r1, #29
 80012ee:	d82b      	bhi.n	8001348 <__sflush_r+0xb8>
 80012f0:	4a29      	ldr	r2, [pc, #164]	; (8001398 <__sflush_r+0x108>)
 80012f2:	410a      	asrs	r2, r1
 80012f4:	07d6      	lsls	r6, r2, #31
 80012f6:	d427      	bmi.n	8001348 <__sflush_r+0xb8>
 80012f8:	2200      	movs	r2, #0
 80012fa:	6062      	str	r2, [r4, #4]
 80012fc:	04d9      	lsls	r1, r3, #19
 80012fe:	6922      	ldr	r2, [r4, #16]
 8001300:	6022      	str	r2, [r4, #0]
 8001302:	d504      	bpl.n	800130e <__sflush_r+0x7e>
 8001304:	1c42      	adds	r2, r0, #1
 8001306:	d101      	bne.n	800130c <__sflush_r+0x7c>
 8001308:	682b      	ldr	r3, [r5, #0]
 800130a:	b903      	cbnz	r3, 800130e <__sflush_r+0x7e>
 800130c:	6560      	str	r0, [r4, #84]	; 0x54
 800130e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001310:	602f      	str	r7, [r5, #0]
 8001312:	2900      	cmp	r1, #0
 8001314:	d0c9      	beq.n	80012aa <__sflush_r+0x1a>
 8001316:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800131a:	4299      	cmp	r1, r3
 800131c:	d002      	beq.n	8001324 <__sflush_r+0x94>
 800131e:	4628      	mov	r0, r5
 8001320:	f7ff fbea 	bl	8000af8 <_free_r>
 8001324:	2000      	movs	r0, #0
 8001326:	6360      	str	r0, [r4, #52]	; 0x34
 8001328:	e7c0      	b.n	80012ac <__sflush_r+0x1c>
 800132a:	2301      	movs	r3, #1
 800132c:	4628      	mov	r0, r5
 800132e:	47b0      	blx	r6
 8001330:	1c41      	adds	r1, r0, #1
 8001332:	d1c8      	bne.n	80012c6 <__sflush_r+0x36>
 8001334:	682b      	ldr	r3, [r5, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0c5      	beq.n	80012c6 <__sflush_r+0x36>
 800133a:	2b1d      	cmp	r3, #29
 800133c:	d001      	beq.n	8001342 <__sflush_r+0xb2>
 800133e:	2b16      	cmp	r3, #22
 8001340:	d101      	bne.n	8001346 <__sflush_r+0xb6>
 8001342:	602f      	str	r7, [r5, #0]
 8001344:	e7b1      	b.n	80012aa <__sflush_r+0x1a>
 8001346:	89a3      	ldrh	r3, [r4, #12]
 8001348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134c:	81a3      	strh	r3, [r4, #12]
 800134e:	e7ad      	b.n	80012ac <__sflush_r+0x1c>
 8001350:	690f      	ldr	r7, [r1, #16]
 8001352:	2f00      	cmp	r7, #0
 8001354:	d0a9      	beq.n	80012aa <__sflush_r+0x1a>
 8001356:	0793      	lsls	r3, r2, #30
 8001358:	680e      	ldr	r6, [r1, #0]
 800135a:	bf08      	it	eq
 800135c:	694b      	ldreq	r3, [r1, #20]
 800135e:	600f      	str	r7, [r1, #0]
 8001360:	bf18      	it	ne
 8001362:	2300      	movne	r3, #0
 8001364:	eba6 0807 	sub.w	r8, r6, r7
 8001368:	608b      	str	r3, [r1, #8]
 800136a:	f1b8 0f00 	cmp.w	r8, #0
 800136e:	dd9c      	ble.n	80012aa <__sflush_r+0x1a>
 8001370:	6a21      	ldr	r1, [r4, #32]
 8001372:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001374:	4643      	mov	r3, r8
 8001376:	463a      	mov	r2, r7
 8001378:	4628      	mov	r0, r5
 800137a:	47b0      	blx	r6
 800137c:	2800      	cmp	r0, #0
 800137e:	dc06      	bgt.n	800138e <__sflush_r+0xfe>
 8001380:	89a3      	ldrh	r3, [r4, #12]
 8001382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001386:	81a3      	strh	r3, [r4, #12]
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	e78e      	b.n	80012ac <__sflush_r+0x1c>
 800138e:	4407      	add	r7, r0
 8001390:	eba8 0800 	sub.w	r8, r8, r0
 8001394:	e7e9      	b.n	800136a <__sflush_r+0xda>
 8001396:	bf00      	nop
 8001398:	dfbffffe 	.word	0xdfbffffe

0800139c <_fflush_r>:
 800139c:	b538      	push	{r3, r4, r5, lr}
 800139e:	690b      	ldr	r3, [r1, #16]
 80013a0:	4605      	mov	r5, r0
 80013a2:	460c      	mov	r4, r1
 80013a4:	b913      	cbnz	r3, 80013ac <_fflush_r+0x10>
 80013a6:	2500      	movs	r5, #0
 80013a8:	4628      	mov	r0, r5
 80013aa:	bd38      	pop	{r3, r4, r5, pc}
 80013ac:	b118      	cbz	r0, 80013b6 <_fflush_r+0x1a>
 80013ae:	6a03      	ldr	r3, [r0, #32]
 80013b0:	b90b      	cbnz	r3, 80013b6 <_fflush_r+0x1a>
 80013b2:	f7ff f9a9 	bl	8000708 <__sinit>
 80013b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f3      	beq.n	80013a6 <_fflush_r+0xa>
 80013be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013c0:	07d0      	lsls	r0, r2, #31
 80013c2:	d404      	bmi.n	80013ce <_fflush_r+0x32>
 80013c4:	0599      	lsls	r1, r3, #22
 80013c6:	d402      	bmi.n	80013ce <_fflush_r+0x32>
 80013c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ca:	f7ff fb92 	bl	8000af2 <__retarget_lock_acquire_recursive>
 80013ce:	4628      	mov	r0, r5
 80013d0:	4621      	mov	r1, r4
 80013d2:	f7ff ff5d 	bl	8001290 <__sflush_r>
 80013d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013d8:	07da      	lsls	r2, r3, #31
 80013da:	4605      	mov	r5, r0
 80013dc:	d4e4      	bmi.n	80013a8 <_fflush_r+0xc>
 80013de:	89a3      	ldrh	r3, [r4, #12]
 80013e0:	059b      	lsls	r3, r3, #22
 80013e2:	d4e1      	bmi.n	80013a8 <_fflush_r+0xc>
 80013e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013e6:	f7ff fb85 	bl	8000af4 <__retarget_lock_release_recursive>
 80013ea:	e7dd      	b.n	80013a8 <_fflush_r+0xc>

080013ec <__swhatbuf_r>:
 80013ec:	b570      	push	{r4, r5, r6, lr}
 80013ee:	460c      	mov	r4, r1
 80013f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013f4:	2900      	cmp	r1, #0
 80013f6:	b096      	sub	sp, #88	; 0x58
 80013f8:	4615      	mov	r5, r2
 80013fa:	461e      	mov	r6, r3
 80013fc:	da0d      	bge.n	800141a <__swhatbuf_r+0x2e>
 80013fe:	89a3      	ldrh	r3, [r4, #12]
 8001400:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001404:	f04f 0100 	mov.w	r1, #0
 8001408:	bf0c      	ite	eq
 800140a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800140e:	2340      	movne	r3, #64	; 0x40
 8001410:	2000      	movs	r0, #0
 8001412:	6031      	str	r1, [r6, #0]
 8001414:	602b      	str	r3, [r5, #0]
 8001416:	b016      	add	sp, #88	; 0x58
 8001418:	bd70      	pop	{r4, r5, r6, pc}
 800141a:	466a      	mov	r2, sp
 800141c:	f000 f848 	bl	80014b0 <_fstat_r>
 8001420:	2800      	cmp	r0, #0
 8001422:	dbec      	blt.n	80013fe <__swhatbuf_r+0x12>
 8001424:	9901      	ldr	r1, [sp, #4]
 8001426:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800142a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800142e:	4259      	negs	r1, r3
 8001430:	4159      	adcs	r1, r3
 8001432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001436:	e7eb      	b.n	8001410 <__swhatbuf_r+0x24>

08001438 <__smakebuf_r>:
 8001438:	898b      	ldrh	r3, [r1, #12]
 800143a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800143c:	079d      	lsls	r5, r3, #30
 800143e:	4606      	mov	r6, r0
 8001440:	460c      	mov	r4, r1
 8001442:	d507      	bpl.n	8001454 <__smakebuf_r+0x1c>
 8001444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001448:	6023      	str	r3, [r4, #0]
 800144a:	6123      	str	r3, [r4, #16]
 800144c:	2301      	movs	r3, #1
 800144e:	6163      	str	r3, [r4, #20]
 8001450:	b002      	add	sp, #8
 8001452:	bd70      	pop	{r4, r5, r6, pc}
 8001454:	ab01      	add	r3, sp, #4
 8001456:	466a      	mov	r2, sp
 8001458:	f7ff ffc8 	bl	80013ec <__swhatbuf_r>
 800145c:	9900      	ldr	r1, [sp, #0]
 800145e:	4605      	mov	r5, r0
 8001460:	4630      	mov	r0, r6
 8001462:	f7ff fbb5 	bl	8000bd0 <_malloc_r>
 8001466:	b948      	cbnz	r0, 800147c <__smakebuf_r+0x44>
 8001468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800146c:	059a      	lsls	r2, r3, #22
 800146e:	d4ef      	bmi.n	8001450 <__smakebuf_r+0x18>
 8001470:	f023 0303 	bic.w	r3, r3, #3
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	81a3      	strh	r3, [r4, #12]
 800147a:	e7e3      	b.n	8001444 <__smakebuf_r+0xc>
 800147c:	89a3      	ldrh	r3, [r4, #12]
 800147e:	6020      	str	r0, [r4, #0]
 8001480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001484:	81a3      	strh	r3, [r4, #12]
 8001486:	9b00      	ldr	r3, [sp, #0]
 8001488:	6163      	str	r3, [r4, #20]
 800148a:	9b01      	ldr	r3, [sp, #4]
 800148c:	6120      	str	r0, [r4, #16]
 800148e:	b15b      	cbz	r3, 80014a8 <__smakebuf_r+0x70>
 8001490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001494:	4630      	mov	r0, r6
 8001496:	f000 f81d 	bl	80014d4 <_isatty_r>
 800149a:	b128      	cbz	r0, 80014a8 <__smakebuf_r+0x70>
 800149c:	89a3      	ldrh	r3, [r4, #12]
 800149e:	f023 0303 	bic.w	r3, r3, #3
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	81a3      	strh	r3, [r4, #12]
 80014a8:	89a3      	ldrh	r3, [r4, #12]
 80014aa:	431d      	orrs	r5, r3
 80014ac:	81a5      	strh	r5, [r4, #12]
 80014ae:	e7cf      	b.n	8001450 <__smakebuf_r+0x18>

080014b0 <_fstat_r>:
 80014b0:	b538      	push	{r3, r4, r5, lr}
 80014b2:	4d07      	ldr	r5, [pc, #28]	; (80014d0 <_fstat_r+0x20>)
 80014b4:	2300      	movs	r3, #0
 80014b6:	4604      	mov	r4, r0
 80014b8:	4608      	mov	r0, r1
 80014ba:	4611      	mov	r1, r2
 80014bc:	602b      	str	r3, [r5, #0]
 80014be:	f7ff f80e 	bl	80004de <_fstat>
 80014c2:	1c43      	adds	r3, r0, #1
 80014c4:	d102      	bne.n	80014cc <_fstat_r+0x1c>
 80014c6:	682b      	ldr	r3, [r5, #0]
 80014c8:	b103      	cbz	r3, 80014cc <_fstat_r+0x1c>
 80014ca:	6023      	str	r3, [r4, #0]
 80014cc:	bd38      	pop	{r3, r4, r5, pc}
 80014ce:	bf00      	nop
 80014d0:	200001b8 	.word	0x200001b8

080014d4 <_isatty_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	4d06      	ldr	r5, [pc, #24]	; (80014f0 <_isatty_r+0x1c>)
 80014d8:	2300      	movs	r3, #0
 80014da:	4604      	mov	r4, r0
 80014dc:	4608      	mov	r0, r1
 80014de:	602b      	str	r3, [r5, #0]
 80014e0:	f7ff f80d 	bl	80004fe <_isatty>
 80014e4:	1c43      	adds	r3, r0, #1
 80014e6:	d102      	bne.n	80014ee <_isatty_r+0x1a>
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	b103      	cbz	r3, 80014ee <_isatty_r+0x1a>
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
 80014f0:	200001b8 	.word	0x200001b8

080014f4 <_sbrk_r>:
 80014f4:	b538      	push	{r3, r4, r5, lr}
 80014f6:	4d06      	ldr	r5, [pc, #24]	; (8001510 <_sbrk_r+0x1c>)
 80014f8:	2300      	movs	r3, #0
 80014fa:	4604      	mov	r4, r0
 80014fc:	4608      	mov	r0, r1
 80014fe:	602b      	str	r3, [r5, #0]
 8001500:	f7ff f816 	bl	8000530 <_sbrk>
 8001504:	1c43      	adds	r3, r0, #1
 8001506:	d102      	bne.n	800150e <_sbrk_r+0x1a>
 8001508:	682b      	ldr	r3, [r5, #0]
 800150a:	b103      	cbz	r3, 800150e <_sbrk_r+0x1a>
 800150c:	6023      	str	r3, [r4, #0]
 800150e:	bd38      	pop	{r3, r4, r5, pc}
 8001510:	200001b8 	.word	0x200001b8

08001514 <_init>:
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	bf00      	nop
 8001518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800151a:	bc08      	pop	{r3}
 800151c:	469e      	mov	lr, r3
 800151e:	4770      	bx	lr

08001520 <_fini>:
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	bf00      	nop
 8001524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001526:	bc08      	pop	{r3}
 8001528:	469e      	mov	lr, r3
 800152a:	4770      	bx	lr
